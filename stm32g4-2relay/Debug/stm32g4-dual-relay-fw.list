
stm32g4-dual-relay-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009414  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  080095f8  080095f8  0000a5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d48  08009d48  0000b60c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d48  08009d48  0000ad48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d50  08009d50  0000b60c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d50  08009d50  0000ad50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d54  08009d54  0000ad54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08009d58  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .non_cache    0000042c  200001e0  08009f38  0000b1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002214  2000060c  0800a364  0000b60c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002820  0800a364  0000b820  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b60c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa9b  00000000  00000000  0000b63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f6b  00000000  00000000  0001b0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  0001e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a9b  00000000  00000000  0001ee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002011f  00000000  00000000  0001f8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015794  00000000  00000000  0003f9f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b97fc  00000000  00000000  00055186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e982  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049ec  00000000  00000000  0010e9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001133b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000060c 	.word	0x2000060c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080095dc 	.word	0x080095dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000610 	.word	0x20000610
 800021c:	080095dc 	.word	0x080095dc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff33 	bl	8000b3c <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fca9 	bl	8000658 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc2a 	bl	8000564 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fca0 	bl	8000658 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff fae2 	bl	80002e8 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <apInit>:
#include "ap.h"



void apInit (void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  cliOpen(_DEF_UART1, 115200);
 8000ff8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f90d 	bl	800121c <cliOpen>
  logBoot(false);
 8001002:	2000      	movs	r0, #0
 8001004:	f001 f8b0 	bl	8002168 <logBoot>

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <apMain>:

void apMain (void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	uint32_t pre_time;

	pre_time = millis ();
 8001012:	f000 f81d 	bl	8001050 <millis>
 8001016:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (millis () - pre_time >= 500)
 8001018:	f000 f81a 	bl	8001050 <millis>
 800101c:	4602      	mov	r2, r0
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001026:	d305      	bcc.n	8001034 <apMain+0x28>
		{
			pre_time = millis ();
 8001028:	f000 f812 	bl	8001050 <millis>
 800102c:	6078      	str	r0, [r7, #4]
			ledToggle (_DEF_LED1);
 800102e:	2000      	movs	r0, #0
 8001030:	f001 f844 	bl	80020bc <ledToggle>
		}
		
		cliMain();
 8001034:	f000 f9c4 	bl	80013c0 <cliMain>
		if (millis () - pre_time >= 500)
 8001038:	e7ee      	b.n	8001018 <apMain+0xc>

0800103a <delay>:
{
  return true;
}

void delay(uint32_t ms)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f002 fa24 	bl	8003490 <HAL_Delay>
#endif
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <millis>:

uint32_t millis(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001054:	f002 fa10 	bl	8003478 <HAL_GetTick>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}

0800105e <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800105e:	b480      	push	{r7}
 8001060:	b087      	sub	sp, #28
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800106a:	2301      	movs	r3, #1
 800106c:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2201      	movs	r2, #1
 8001084:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	611a      	str	r2, [r3, #16]

  return ret;
 800108c:	7dfb      	ldrb	r3, [r7, #23]
}
 800108e:	4618      	mov	r0, r3
 8001090:	371c      	adds	r7, #28
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800109a:	b480      	push	{r7}
 800109c:	b089      	sub	sp, #36	@ 0x24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	60f8      	str	r0, [r7, #12]
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80010a6:	2301      	movs	r3, #1
 80010a8:	77fb      	strb	r3, [r7, #31]


  for (uint32_t i=0; i<length; i++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
 80010ae:	e041      	b.n	8001134 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d024      	beq.n	8001102 <qbufferRead+0x68>
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d021      	beq.n	8001102 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	691a      	ldr	r2, [r3, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	68f9      	ldr	r1, [r7, #12]
 80010c8:	68c9      	ldr	r1, [r1, #12]
 80010ca:	fb01 f303 	mul.w	r3, r1, r3
 80010ce:	4413      	add	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
      for (uint32_t j=0; j<p_node->size; j++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	e00a      	b.n	80010ee <qbufferRead+0x54>
      {
        p_data[j] = p_buf[j];
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	441a      	add	r2, r3
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	440b      	add	r3, r1
 80010e4:	7812      	ldrb	r2, [r2, #0]
 80010e6:	701a      	strb	r2, [r3, #0]
      for (uint32_t j=0; j<p_node->size; j++)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3301      	adds	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d3ef      	bcc.n	80010d8 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	4413      	add	r3, r2
 8001100:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	429a      	cmp	r2, r3
 800110c:	d00c      	beq.n	8001128 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	3301      	adds	r3, #1
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	6892      	ldr	r2, [r2, #8]
 8001118:	fbb3 f1f2 	udiv	r1, r3, r2
 800111c:	fb01 f202 	mul.w	r2, r1, r2
 8001120:	1a9a      	subs	r2, r3, r2
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	e002      	b.n	800112e <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 8001128:	2300      	movs	r3, #0
 800112a:	77fb      	strb	r3, [r7, #31]
      break;
 800112c:	e006      	b.n	800113c <qbufferRead+0xa2>
  for (uint32_t i=0; i<length; i++)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	3301      	adds	r3, #1
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	d3b9      	bcc.n	80010b0 <qbufferRead+0x16>
    }
  }

  return ret;
 800113c:	7ffb      	ldrb	r3, [r7, #31]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	@ 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	441a      	add	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6892      	ldr	r2, [r2, #8]
 8001166:	fbb3 f1f2 	udiv	r1, r3, r2
 800116a:	fb01 f202 	mul.w	r2, r1, r2
 800116e:	1a9b      	subs	r3, r3, r2
 8001170:	60fb      	str	r3, [r7, #12]

  return ret;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001184:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <cliInit+0x78>)
 8001186:	2200      	movs	r2, #0
 8001188:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800118a:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <cliInit+0x78>)
 800118c:	2200      	movs	r2, #0
 800118e:	725a      	strb	r2, [r3, #9]
  cli_node.is_busy = false;
 8001190:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <cliInit+0x78>)
 8001192:	2200      	movs	r2, #0
 8001194:	729a      	strb	r2, [r3, #10]
  cli_node.state   = CLI_RX_IDLE;
 8001196:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <cliInit+0x78>)
 8001198:	2200      	movs	r2, #0
 800119a:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <cliInit+0x78>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <cliInit+0x78>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <cliInit+0x78>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 80011b4:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <cliInit+0x78>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <cliInit+0x78>)
 80011be:	4a0f      	ldr	r2, [pc, #60]	@ (80011fc <cliInit+0x7c>)
 80011c0:	f8c3 2680 	str.w	r2, [r3, #1664]	@ 0x680
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <cliInit+0x78>)
 80011c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001200 <cliInit+0x80>)
 80011c8:	f8c3 2684 	str.w	r2, [r3, #1668]	@ 0x684
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <cliInit+0x78>)
 80011ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <cliInit+0x84>)
 80011d0:	f8c3 2688 	str.w	r2, [r3, #1672]	@ 0x688
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <cliInit+0x78>)
 80011d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <cliInit+0x88>)
 80011d8:	f8c3 268c 	str.w	r2, [r3, #1676]	@ 0x68c

  cliLineClean(&cli_node);
 80011dc:	4806      	ldr	r0, [pc, #24]	@ (80011f8 <cliInit+0x78>)
 80011de:	f000 fb9f 	bl	8001920 <cliLineClean>


  cliAdd("help", cliShowList);
 80011e2:	490a      	ldr	r1, [pc, #40]	@ (800120c <cliInit+0x8c>)
 80011e4:	480a      	ldr	r0, [pc, #40]	@ (8001210 <cliInit+0x90>)
 80011e6:	f000 fe3b 	bl	8001e60 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80011ea:	490a      	ldr	r1, [pc, #40]	@ (8001214 <cliInit+0x94>)
 80011ec:	480a      	ldr	r0, [pc, #40]	@ (8001218 <cliInit+0x98>)
 80011ee:	f000 fe37 	bl	8001e60 <cliAdd>

  return true;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000628 	.word	0x20000628
 80011fc:	08001cf1 	.word	0x08001cf1
 8001200:	08001d41 	.word	0x08001d41
 8001204:	08001d99 	.word	0x08001d99
 8001208:	08001de1 	.word	0x08001de1
 800120c:	08001ef1 	.word	0x08001ef1
 8001210:	080095f8 	.word	0x080095f8
 8001214:	08001f61 	.word	0x08001f61
 8001218:	08009600 	.word	0x08009600

0800121c <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001228:	4a11      	ldr	r2, [pc, #68]	@ (8001270 <cliOpen+0x54>)
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	7013      	strb	r3, [r2, #0]


  if (cli_node.is_open == false || cli_node.baud != baud)
 800122e:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <cliOpen+0x54>)
 8001230:	7a1b      	ldrb	r3, [r3, #8]
 8001232:	f083 0301 	eor.w	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d104      	bne.n	8001246 <cliOpen+0x2a>
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <cliOpen+0x54>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d00e      	beq.n	8001264 <cliOpen+0x48>
  {
    if (baud > 0)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00b      	beq.n	8001264 <cliOpen+0x48>
    {
      cli_node.baud = baud;
 800124c:	4a08      	ldr	r2, [pc, #32]	@ (8001270 <cliOpen+0x54>)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	6053      	str	r3, [r2, #4]
      cli_node.is_open = uartOpen(ch, baud);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f001 f978 	bl	800254c <uartOpen>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <cliOpen+0x54>)
 8001262:	721a      	strb	r2, [r3, #8]
    }
  }

  return cli_node.is_open;
 8001264:	4b02      	ldr	r3, [pc, #8]	@ (8001270 <cliOpen+0x54>)
 8001266:	7a1b      	ldrb	r3, [r3, #8]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000628 	.word	0x20000628

08001274 <cliGetPort>:
  }
  return ret;
}

uint8_t cliGetPort(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return cli_node.ch;
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <cliGetPort+0x14>)
 800127a:	781b      	ldrb	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000628 	.word	0x20000628

0800128c <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001294:	4b34      	ldr	r3, [pc, #208]	@ (8001368 <cliShowLog+0xdc>)
 8001296:	7a5b      	ldrb	r3, [r3, #9]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d061      	beq.n	8001360 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7ad8      	ldrb	r0, [r3, #11]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 80012a6:	461a      	mov	r2, r3
 80012a8:	4930      	ldr	r1, [pc, #192]	@ (800136c <cliShowLog+0xe0>)
 80012aa:	f001 fbe1 	bl	8002a70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7ad8      	ldrb	r0, [r3, #11]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 80012b8:	461a      	mov	r2, r3
 80012ba:	492d      	ldr	r1, [pc, #180]	@ (8001370 <cliShowLog+0xe4>)
 80012bc:	f001 fbd8 	bl	8002a70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7ad8      	ldrb	r0, [r3, #11]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4929      	ldr	r1, [pc, #164]	@ (8001374 <cliShowLog+0xe8>)
 80012ce:	f001 fbcf 	bl	8002a70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7ad8      	ldrb	r0, [r3, #11]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 80012dc:	461a      	mov	r2, r3
 80012de:	4926      	ldr	r1, [pc, #152]	@ (8001378 <cliShowLog+0xec>)
 80012e0:	f001 fbc6 	bl	8002a70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7ad8      	ldrb	r0, [r3, #11]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 80012ee:	461a      	mov	r2, r3
 80012f0:	4922      	ldr	r1, [pc, #136]	@ (800137c <cliShowLog+0xf0>)
 80012f2:	f001 fbbd 	bl	8002a70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7ad8      	ldrb	r0, [r3, #11]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001300:	461a      	mov	r2, r3
 8001302:	491f      	ldr	r1, [pc, #124]	@ (8001380 <cliShowLog+0xf4>)
 8001304:	f001 fbb4 	bl	8002a70 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7ad8      	ldrb	r0, [r3, #11]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001312:	461a      	mov	r2, r3
 8001314:	491b      	ldr	r1, [pc, #108]	@ (8001384 <cliShowLog+0xf8>)
 8001316:	f001 fbab 	bl	8002a70 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	e012      	b.n	8001346 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7ad8      	ldrb	r0, [r3, #11]
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	4613      	mov	r3, r2
 8001328:	015b      	lsls	r3, r3, #5
 800132a:	4413      	add	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4913      	ldr	r1, [pc, #76]	@ (8001388 <cliShowLog+0xfc>)
 800133c:	f001 fb98 	bl	8002a70 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3301      	adds	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 800134c:	461a      	mov	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4293      	cmp	r3, r2
 8001352:	dbe5      	blt.n	8001320 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7adb      	ldrb	r3, [r3, #11]
 8001358:	490c      	ldr	r1, [pc, #48]	@ (800138c <cliShowLog+0x100>)
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fb88 	bl	8002a70 <uartPrintf>
  }
}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000628 	.word	0x20000628
 800136c:	08009604 	.word	0x08009604
 8001370:	08009614 	.word	0x08009614
 8001374:	08009624 	.word	0x08009624
 8001378:	08009634 	.word	0x08009634
 800137c:	08009644 	.word	0x08009644
 8001380:	08009654 	.word	0x08009654
 8001384:	08009664 	.word	0x08009664
 8001388:	08009674 	.word	0x08009674
 800138c:	08009684 	.word	0x08009684

08001390 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4906      	ldr	r1, [pc, #24]	@ (80013b8 <cliShowPrompt+0x28>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 fb66 	bl	8002a70 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4904      	ldr	r1, [pc, #16]	@ (80013bc <cliShowPrompt+0x2c>)
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fb60 	bl	8002a70 <uartPrintf>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	08009688 	.word	0x08009688
 80013bc:	0800968c 	.word	0x0800968c

080013c0 <cliMain>:

bool cliMain(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <cliMain+0x40>)
 80013c6:	7a1b      	ldrb	r3, [r3, #8]
 80013c8:	f083 0301 	eor.w	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <cliMain+0x16>
  {
    return false;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e012      	b.n	80013fc <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <cliMain+0x40>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fa84 	bl	80028e8 <uartAvailable>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <cliMain+0x40>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fac2 	bl	8002974 <uartRead>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4619      	mov	r1, r3
 80013f4:	4802      	ldr	r0, [pc, #8]	@ (8001400 <cliMain+0x40>)
 80013f6:	f000 f831 	bl	800145c <cliUpdate>
  }

  return true;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000628 	.word	0x20000628

08001404 <cliAvailable>:

uint32_t cliAvailable(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  return uartAvailable(cli_node.ch);
 8001408:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <cliAvailable+0x14>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f001 fa6b 	bl	80028e8 <uartAvailable>
 8001412:	4603      	mov	r3, r0
}
 8001414:	4618      	mov	r0, r3
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000628 	.word	0x20000628

0800141c <cliRead>:

uint8_t cliRead(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  return uartRead(cli_node.ch);
 8001420:	4b03      	ldr	r3, [pc, #12]	@ (8001430 <cliRead+0x14>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f001 faa5 	bl	8002974 <uartRead>
 800142a:	4603      	mov	r3, r0
}
 800142c:	4618      	mov	r0, r3
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000628 	.word	0x20000628

08001434 <cliWrite>:

uint32_t cliWrite(uint8_t *p_data, uint32_t length)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  return uartWrite(cli_node.ch, p_data, length);
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <cliWrite+0x24>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4618      	mov	r0, r3
 8001448:	f001 face 	bl	80029e8 <uartWrite>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000628 	.word	0x20000628

0800145c <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	@ 0x30
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001468:	2300      	movs	r3, #0
 800146a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8001474:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7c1b      	ldrb	r3, [r3, #16]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 816d 	bne.w	800175a <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	2b7f      	cmp	r3, #127	@ 0x7f
 8001484:	d02a      	beq.n	80014dc <cliUpdate+0x80>
 8001486:	2b7f      	cmp	r3, #127	@ 0x7f
 8001488:	f300 80da 	bgt.w	8001640 <cliUpdate+0x1e4>
 800148c:	2b1b      	cmp	r3, #27
 800148e:	d021      	beq.n	80014d4 <cliUpdate+0x78>
 8001490:	2b1b      	cmp	r3, #27
 8001492:	f300 80d5 	bgt.w	8001640 <cliUpdate+0x1e4>
 8001496:	2b08      	cmp	r3, #8
 8001498:	d062      	beq.n	8001560 <cliUpdate+0x104>
 800149a:	2b0d      	cmp	r3, #13
 800149c:	f040 80d0 	bne.w	8001640 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 fa52 	bl	8001954 <cliLineAdd>
          cliRunCmd(p_cli);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fb1d 	bl	8001af0 <cliRunCmd>
        }

        line->count = 0;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        line->cursor = 0;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        line->buf[0] = 0;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff5f 	bl	8001390 <cliShowPrompt>
        break;
 80014d2:	e142      	b.n	800175a <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	741a      	strb	r2, [r3, #16]
        break;
 80014da:	e13e      	b.n	800175a <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f080 8131 	bcs.w	8001750 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 80014fe:	2301      	movs	r3, #1
 8001500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001502:	e013      	b.n	800152c <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800150a:	461a      	mov	r2, r3
 800150c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800150e:	441a      	add	r2, r3
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001516:	4619      	mov	r1, r3
 8001518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151a:	440b      	add	r3, r1
 800151c:	3b01      	subs	r3, #1
 800151e:	69f9      	ldr	r1, [r7, #28]
 8001520:	5c89      	ldrb	r1, [r1, r2]
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001528:	3301      	adds	r3, #1
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800152c:	7efb      	ldrb	r3, [r7, #27]
 800152e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001530:	429a      	cmp	r2, r3
 8001532:	dbe7      	blt.n	8001504 <cliUpdate+0xa8>
          }

          line->count--;
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800153a:	3b01      	subs	r3, #1
 800153c:	b2da      	uxtb	r2, r3
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          line->buf[line->count] = 0;
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800154a:	461a      	mov	r2, r3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2100      	movs	r1, #0
 8001550:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	498d      	ldr	r1, [pc, #564]	@ (800178c <cliUpdate+0x330>)
 8001558:	4618      	mov	r0, r3
 800155a:	f001 fa89 	bl	8002a70 <uartPrintf>
        }
        break;
 800155e:	e0f7      	b.n	8001750 <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001566:	2b00      	cmp	r3, #0
 8001568:	d055      	beq.n	8001616 <cliUpdate+0x1ba>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001570:	2b00      	cmp	r3, #0
 8001572:	d050      	beq.n	8001616 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001580:	429a      	cmp	r2, r3
 8001582:	d10e      	bne.n	80015a2 <cliUpdate+0x146>
          {
            line->count--;
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800158a:	3b01      	subs	r3, #1
 800158c:	b2da      	uxtb	r2, r3
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800159a:	461a      	mov	r2, r3
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2100      	movs	r1, #0
 80015a0:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d231      	bcs.n	8001616 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015c6:	e013      	b.n	80015f0 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015ce:	461a      	mov	r2, r3
 80015d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d2:	441a      	add	r2, r3
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015da:	4619      	mov	r1, r3
 80015dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015de:	440b      	add	r3, r1
 80015e0:	3b01      	subs	r3, #1
 80015e2:	69f9      	ldr	r1, [r7, #28]
 80015e4:	5c89      	ldrb	r1, [r1, r2]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80015ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ec:	3301      	adds	r3, #1
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015f0:	7ebb      	ldrb	r3, [r7, #26]
 80015f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dbe7      	blt.n	80015c8 <cliUpdate+0x16c>
            }

            line->count--;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80015fe:	3b01      	subs	r3, #1
 8001600:	b2da      	uxtb	r2, r3
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800160e:	461a      	mov	r2, r3
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	2100      	movs	r1, #0
 8001614:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 8099 	beq.w	8001754 <cliUpdate+0x2f8>
        {
          line->cursor--;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001628:	3b01      	subs	r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4956      	ldr	r1, [pc, #344]	@ (8001790 <cliUpdate+0x334>)
 8001638:	4618      	mov	r0, r3
 800163a:	f001 fa19 	bl	8002a70 <uartPrintf>
        }
        break;
 800163e:	e089      	b.n	8001754 <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001646:	3301      	adds	r3, #1
 8001648:	69fa      	ldr	r2, [r7, #28]
 800164a:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 800164e:	4293      	cmp	r3, r2
 8001650:	f280 8082 	bge.w	8001758 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001660:	429a      	cmp	r2, r3
 8001662:	d124      	bne.n	80016ae <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	1cf9      	adds	r1, r7, #3
 800166a:	2201      	movs	r2, #1
 800166c:	4618      	mov	r0, r3
 800166e:	f001 f9bb 	bl	80029e8 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001678:	461a      	mov	r2, r3
 800167a:	78f9      	ldrb	r1, [r7, #3]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001686:	3301      	adds	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001696:	3301      	adds	r3, #1
 8001698:	b2da      	uxtb	r2, r3
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016a6:	461a      	mov	r2, r3
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	2100      	movs	r1, #0
 80016ac:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d24c      	bcs.n	8001758 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d2:	e013      	b.n	80016fc <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016da:	461a      	mov	r2, r3
 80016dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016e8:	4619      	mov	r1, r3
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	1acb      	subs	r3, r1, r3
 80016ee:	69f9      	ldr	r1, [r7, #28]
 80016f0:	5c89      	ldrb	r1, [r1, r2]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	3301      	adds	r3, #1
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80016fc:	7e7b      	ldrb	r3, [r7, #25]
 80016fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001700:	429a      	cmp	r2, r3
 8001702:	dbe7      	blt.n	80016d4 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800170a:	461a      	mov	r2, r3
 800170c:	78f9      	ldrb	r1, [r7, #3]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001718:	3301      	adds	r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001728:	3301      	adds	r3, #1
 800172a:	b2da      	uxtb	r2, r3
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001738:	461a      	mov	r2, r3
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	2100      	movs	r1, #0
 800173e:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	4913      	ldr	r1, [pc, #76]	@ (8001794 <cliUpdate+0x338>)
 8001748:	4618      	mov	r0, r3
 800174a:	f001 f991 	bl	8002a70 <uartPrintf>
          }
        }
        break;
 800174e:	e003      	b.n	8001758 <cliUpdate+0x2fc>
        break;
 8001750:	bf00      	nop
 8001752:	e002      	b.n	800175a <cliUpdate+0x2fe>
        break;
 8001754:	bf00      	nop
 8001756:	e000      	b.n	800175a <cliUpdate+0x2fe>
        break;
 8001758:	bf00      	nop
    }
  }

  switch(p_cli->state)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7c1b      	ldrb	r3, [r3, #16]
 800175e:	3b01      	subs	r3, #1
 8001760:	2b03      	cmp	r3, #3
 8001762:	f200 80d0 	bhi.w	8001906 <cliUpdate+0x4aa>
 8001766:	a201      	add	r2, pc, #4	@ (adr r2, 800176c <cliUpdate+0x310>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	0800177d 	.word	0x0800177d
 8001770:	08001785 	.word	0x08001785
 8001774:	08001799 	.word	0x08001799
 8001778:	080018fd 	.word	0x080018fd
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	741a      	strb	r2, [r3, #16]
      break;
 8001782:	e0c0      	b.n	8001906 <cliUpdate+0x4aa>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2203      	movs	r2, #3
 8001788:	741a      	strb	r2, [r3, #16]
      break;
 800178a:	e0bc      	b.n	8001906 <cliUpdate+0x4aa>
 800178c:	08009694 	.word	0x08009694
 8001790:	0800969c 	.word	0x0800969c
 8001794:	080096a4 	.word	0x080096a4

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	2b44      	cmp	r3, #68	@ 0x44
 80017a2:	d11a      	bne.n	80017da <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d015      	beq.n	80017da <cliUpdate+0x37e>
        {
          line->cursor--;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          tx_buf[0] = 0x1B;
 80017be:	231b      	movs	r3, #27
 80017c0:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80017c2:	235b      	movs	r3, #91	@ 0x5b
 80017c4:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	f107 010c 	add.w	r1, r7, #12
 80017d2:	2203      	movs	r2, #3
 80017d4:	4618      	mov	r0, r3
 80017d6:	f001 f907 	bl	80029e8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	2b43      	cmp	r3, #67	@ 0x43
 80017de:	d11d      	bne.n	800181c <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d215      	bcs.n	800181c <cliUpdate+0x3c0>
        {
          line->cursor++;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017f6:	3301      	adds	r3, #1
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          tx_buf[0] = 0x1B;
 8001800:	231b      	movs	r3, #27
 8001802:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001804:	235b      	movs	r3, #91	@ 0x5b
 8001806:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	f107 010c 	add.w	r1, r7, #12
 8001814:	2203      	movs	r2, #3
 8001816:	4618      	mov	r0, r3
 8001818:	f001 f8e6 	bl	80029e8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	2b41      	cmp	r3, #65	@ 0x41
 8001820:	d10c      	bne.n	800183c <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8001822:	2101      	movs	r1, #1
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f8d9 	bl	80019dc <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	781a      	ldrb	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8001834:	4619      	mov	r1, r3
 8001836:	4610      	mov	r0, r2
 8001838:	f001 f91a 	bl	8002a70 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	2b42      	cmp	r3, #66	@ 0x42
 8001840:	d10c      	bne.n	800185c <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8001842:	2100      	movs	r1, #0
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f8c9 	bl	80019dc <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	781a      	ldrb	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8001854:	4619      	mov	r1, r3
 8001856:	4610      	mov	r0, r2
 8001858:	f001 f90a 	bl	8002a70 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	2b31      	cmp	r3, #49	@ 0x31
 8001860:	d10f      	bne.n	8001882 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7818      	ldrb	r0, [r3, #0]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800186c:	461a      	mov	r2, r3
 800186e:	492a      	ldr	r1, [pc, #168]	@ (8001918 <cliUpdate+0x4bc>)
 8001870:	f001 f8fe 	bl	8002a70 <uartPrintf>
        line->cursor = 0;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        p_cli->state = CLI_RX_SP4;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2204      	movs	r2, #4
 8001880:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	2b34      	cmp	r3, #52	@ 0x34
 8001886:	d13d      	bne.n	8001904 <cliUpdate+0x4a8>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001894:	429a      	cmp	r2, r3
 8001896:	d20f      	bcs.n	80018b8 <cliUpdate+0x45c>
        {
          mov_len = line->count - line->cursor;
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800189e:	461a      	mov	r2, r3
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	8afa      	ldrh	r2, [r7, #22]
 80018b0:	491a      	ldr	r1, [pc, #104]	@ (800191c <cliUpdate+0x4c0>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 f8dc 	bl	8002a70 <uartPrintf>
        }
        if (line->cursor > line->count)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d90f      	bls.n	80018e8 <cliUpdate+0x48c>
        {
          mov_len = line->cursor - line->count;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018ce:	461a      	mov	r2, r3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	8afa      	ldrh	r2, [r7, #22]
 80018e0:	490d      	ldr	r1, [pc, #52]	@ (8001918 <cliUpdate+0x4bc>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f001 f8c4 	bl	8002a70 <uartPrintf>
        }
        line->cursor = line->count;
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        p_cli->state = CLI_RX_SP4;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2204      	movs	r2, #4
 80018f8:	741a      	strb	r2, [r3, #16]
      }
      break;
 80018fa:	e003      	b.n	8001904 <cliUpdate+0x4a8>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	741a      	strb	r2, [r3, #16]
      break;
 8001902:	e000      	b.n	8001906 <cliUpdate+0x4aa>
      break;
 8001904:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fcc0 	bl	800128c <cliShowLog>

  return ret;
 800190c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001910:	4618      	mov	r0, r3
 8001912:	3730      	adds	r7, #48	@ 0x30
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	080096b0 	.word	0x080096b0
 800191c:	080096b8 	.word	0x080096b8

08001920 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
  p_cli->line.cursor  = 0;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	223f      	movs	r2, #63	@ 0x3f
 800193c:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
  p_cli->line.buf[0]  = 0;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001962:	461a      	mov	r2, r3
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	015b      	lsls	r3, r3, #5
 800196a:	4413      	add	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	440b      	add	r3, r1
 8001972:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4610      	mov	r0, r2
 800197a:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 800197e:	2243      	movs	r2, #67	@ 0x43
 8001980:	4619      	mov	r1, r3
 8001982:	f005 fe28 	bl	80075d6 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 800198c:	2b07      	cmp	r3, #7
 800198e:	d807      	bhi.n	80019a0 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001996:	3301      	adds	r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80019a6:	b25a      	sxtb	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80019b4:	3301      	adds	r3, #1
 80019b6:	425a      	negs	r2, r3
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	f002 0207 	and.w	r2, r2, #7
 80019c0:	bf58      	it	pl
 80019c2:	4253      	negpl	r3, r2
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d076      	beq.n	8001ae0 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7818      	ldrb	r0, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8001a06:	461a      	mov	r2, r3
 8001a08:	4937      	ldr	r1, [pc, #220]	@ (8001ae8 <cliLineChange+0x10c>)
 8001a0a:	f001 f831 	bl	8002a70 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7818      	ldrb	r0, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8001a22:	461a      	mov	r2, r3
 8001a24:	4931      	ldr	r1, [pc, #196]	@ (8001aec <cliLineChange+0x110>)
 8001a26:	f001 f823 	bl	8002a70 <uartPrintf>
  }


  if (key_up == true)
 8001a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d125      	bne.n	8001a7e <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001a42:	b25a      	sxtb	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001a50:	461a      	mov	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001a58:	4413      	add	r3, r2
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001a62:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a66:	fb01 f202 	mul.w	r2, r1, r2
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	b25a      	sxtb	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	e013      	b.n	8001aa6 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001a84:	3301      	adds	r3, #1
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001a8c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a90:	fb01 f202 	mul.w	r2, r1, r2
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	b25a      	sxtb	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001aa4:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	015b      	lsls	r3, r3, #5
 8001ab0:	4413      	add	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4403      	add	r3, r0
 8001ab8:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001abc:	f501 736c 	add.w	r3, r1, #944	@ 0x3b0
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	2243      	movs	r2, #67	@ 0x43
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f005 fd86 	bl	80075d6 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 23f2 	ldrb.w	r2, [r3, #1010]	@ 0x3f2
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1

  p_cli->hist_line_new = false;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
 8001ade:	e000      	b.n	8001ae2 <cliLineChange+0x106>
    return;
 8001ae0:	bf00      	nop
}
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	080096b0 	.word	0x080096b0
 8001aec:	080096c0 	.word	0x080096c0

08001af0 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001af8:	2300      	movs	r3, #0
 8001afa:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f857 	bl	8001bb0 <cliParseArgs>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d04b      	beq.n	8001ba0 <cliRunCmd+0xb0>
  {
    cliPrintf("\r\n");
 8001b08:	4828      	ldr	r0, [pc, #160]	@ (8001bac <cliRunCmd+0xbc>)
 8001b0a:	f000 f899 	bl	8001c40 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 f8b7 	bl	8001c88 <cliToUpper>

    p_cli->is_busy = true;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	729a      	strb	r2, [r3, #10]
    for (int i=0; i<p_cli->cmd_count; i++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e032      	b.n	8001b8c <cliRunCmd+0x9c>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f8d3 0114 	ldr.w	r0, [r3, #276]	@ 0x114
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7fe fb6e 	bl	8000220 <strcmp>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d11d      	bne.n	8001b86 <cliRunCmd+0x96>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8a3 2678 	strh.w	r2, [r3, #1656]	@ 0x678
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	f502 62cf 	add.w	r2, r2, #1656	@ 0x678
 8001b80:	4610      	mov	r0, r2
 8001b82:	4798      	blx	r3
        break;
 8001b84:	e009      	b.n	8001b9a <cliRunCmd+0xaa>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001b92:	461a      	mov	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4293      	cmp	r3, r2
 8001b98:	dbc5      	blt.n	8001b26 <cliRunCmd+0x36>
      }
    }
    p_cli->is_busy = false;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	729a      	strb	r2, [r3, #10]
  }

  return ret;
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	080096c8 	.word	0x080096c8

08001bb0 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  cmdline = (char *)p_cli->line.buf;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8001bce:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8001bd6:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8001bd8:	8afb      	ldrh	r3, [r7, #22]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001be4:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <cliParseArgs+0x8c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f107 0208 	add.w	r2, r7, #8
 8001bec:	4619      	mov	r1, r3
 8001bee:	6938      	ldr	r0, [r7, #16]
 8001bf0:	f005 fc72 	bl	80074d8 <strtok_r>
 8001bf4:	61b8      	str	r0, [r7, #24]
 8001bf6:	e010      	b.n	8001c1a <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8001bf8:	8afb      	ldrh	r3, [r7, #22]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	82fa      	strh	r2, [r7, #22]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <cliParseArgs+0x8c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f107 0208 	add.w	r2, r7, #8
 8001c10:	4619      	mov	r1, r3
 8001c12:	2000      	movs	r0, #0
 8001c14:	f005 fc60 	bl	80074d8 <strtok_r>
 8001c18:	61b8      	str	r0, [r7, #24]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1eb      	bne.n	8001bf8 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	8afa      	ldrh	r2, [r7, #22]
 8001c24:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  if (argc > 0)
 8001c28:	8afb      	ldrh	r3, [r7, #22]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <cliParseArgs+0x82>
  {
    ret = true;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8001c32:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000000 	.word	0x20000000

08001c40 <cliPrintf>:
  
  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8001c40:	b40f      	push	{r0, r1, r2, r3}
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <cliPrintf+0x44>)
 8001c50:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f103 0011 	add.w	r0, r3, #17
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c60:	f005 fbea 	bl	8007438 <vsniprintf>
 8001c64:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	7818      	ldrb	r0, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3311      	adds	r3, #17
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f000 feb9 	bl	80029e8 <uartWrite>
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c80:	b004      	add	sp, #16
 8001c82:	4770      	bx	lr
 8001c84:	20000628 	.word	0x20000628

08001c88 <cliToUpper>:
  
  uartWrite(p_cli->ch, &data, 1);
}

void cliToUpper(char *str)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	81fb      	strh	r3, [r7, #14]
 8001c94:	e018      	b.n	8001cc8 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8001c96:	89fb      	ldrh	r3, [r7, #14]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8001ca0:	7b7b      	ldrb	r3, [r7, #13]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d014      	beq.n	8001cd0 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001ca6:	7b7b      	ldrb	r3, [r7, #13]
 8001ca8:	2b60      	cmp	r3, #96	@ 0x60
 8001caa:	d905      	bls.n	8001cb8 <cliToUpper+0x30>
 8001cac:	7b7b      	ldrb	r3, [r7, #13]
 8001cae:	2b7a      	cmp	r3, #122	@ 0x7a
 8001cb0:	d802      	bhi.n	8001cb8 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8001cb2:	7b7b      	ldrb	r3, [r7, #13]
 8001cb4:	3b20      	subs	r3, #32
 8001cb6:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001cb8:	89fb      	ldrh	r3, [r7, #14]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	7b7a      	ldrb	r2, [r7, #13]
 8001cc0:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001cc2:	89fb      	ldrh	r3, [r7, #14]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	81fb      	strh	r3, [r7, #14]
 8001cc8:	89fb      	ldrh	r3, [r7, #14]
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	d9e3      	bls.n	8001c96 <cliToUpper+0xe>
 8001cce:	e000      	b.n	8001cd2 <cliToUpper+0x4a>
      break;
 8001cd0:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8001cd2:	89fb      	ldrh	r3, [r7, #14]
 8001cd4:	2b10      	cmp	r3, #16
 8001cd6:	d105      	bne.n	8001ce4 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001cd8:	89fb      	ldrh	r3, [r7, #14]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <cliArgsGetData+0x4c>)
 8001d00:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d301      	bcc.n	8001d14 <cliArgsGetData+0x24>
  {
    return 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e00e      	b.n	8001d32 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f005 fa18 	bl	800715c <strtoul>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60fb      	str	r3, [r7, #12]

  return ret;
 8001d30:	68fb      	ldr	r3, [r7, #12]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000628 	.word	0x20000628

08001d40 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001d50:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <cliArgsGetFloat+0x54>)
 8001d52:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d302      	bcc.n	8001d68 <cliArgsGetFloat+0x28>
  {
    return 0;
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	e00d      	b.n	8001d84 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f005 f91d 	bl	8006fb8 <strtof>
 8001d7e:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000628 	.word	0x20000628

08001d98 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001da6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <cliArgsGetStr+0x44>)
 8001da8:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d301      	bcc.n	8001dbc <cliArgsGetStr+0x24>
  {
    return 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e008      	b.n	8001dce <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60fb      	str	r3, [r7, #12]

  return ret;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000628 	.word	0x20000628

08001de0 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, const char *p_str)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001dec:	2300      	movs	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <cliArgsIsStr+0x50>)
 8001df2:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d301      	bcc.n	8001e06 <cliArgsIsStr+0x26>
  {
    return 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e010      	b.n	8001e28 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	6838      	ldr	r0, [r7, #0]
 8001e18:	f7fe fa02 	bl	8000220 <strcmp>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <cliArgsIsStr+0x46>
  {
    ret = true;
 8001e22:	2301      	movs	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000628 	.word	0x20000628

08001e34 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8001e3a:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <cliKeepLoop+0x28>)
 8001e3c:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fd50 	bl	80028e8 <uartAvailable>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <cliKeepLoop+0x1e>
  {
    return true;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8001e52:	2300      	movs	r3, #0
  }
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000628 	.word	0x20000628

08001e60 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001eec <cliAdd+0x8c>)
 8001e70:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001e78:	2b1f      	cmp	r3, #31
 8001e7a:	d901      	bls.n	8001e80 <cliAdd+0x20>
  {
    return false;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e030      	b.n	8001ee2 <cliAdd+0x82>
  }

  index = p_cli->cmd_count;
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001e86:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001e88:	89fa      	ldrh	r2, [r7, #14]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 fb92 	bl	80075c6 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8001ea2:	89fa      	ldrh	r2, [r7, #14]
 8001ea4:	6939      	ldr	r1, [r7, #16]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fedc 	bl	8001c88 <cliToUpper>

  p_cli->cmd_count++;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	f8a3 23f4 	strh.w	r2, [r3, #1012]	@ 0x3f4

  return ret;
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000628 	.word	0x20000628

08001ef0 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8001ef8:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <cliShowList+0x60>)
 8001efa:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8001efc:	4815      	ldr	r0, [pc, #84]	@ (8001f54 <cliShowList+0x64>)
 8001efe:	f7ff fe9f 	bl	8001c40 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8001f02:	4815      	ldr	r0, [pc, #84]	@ (8001f58 <cliShowList+0x68>)
 8001f04:	f7ff fe9c 	bl	8001c40 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	e011      	b.n	8001f32 <cliShowList+0x42>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fe8d 	bl	8001c40 <cliPrintf>
    cliPrintf("\r\n");
 8001f26:	480b      	ldr	r0, [pc, #44]	@ (8001f54 <cliShowList+0x64>)
 8001f28:	f7ff fe8a 	bl	8001c40 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	dbe6      	blt.n	8001f0e <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8001f40:	4806      	ldr	r0, [pc, #24]	@ (8001f5c <cliShowList+0x6c>)
 8001f42:	f7ff fe7d 	bl	8001c40 <cliPrintf>
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000628 	.word	0x20000628
 8001f54:	080096c8 	.word	0x080096c8
 8001f58:	080096cc 	.word	0x080096cc
 8001f5c:	080096ec 	.word	0x080096ec

08001f60 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08c      	sub	sp, #48	@ 0x30
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8001f68:	2310      	movs	r3, #16
 8001f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d103      	bne.n	8001f88 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8001f80:	4842      	ldr	r0, [pc, #264]	@ (800208c <cliMemoryDump+0x12c>)
 8001f82:	f7ff fe5d 	bl	8001c40 <cliPrintf>
 8001f86:	e07d      	b.n	8002084 <cliMemoryDump+0x124>
    return;
  }

  if(argc > 1)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	dd09      	ble.n	8001fa2 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	3304      	adds	r3, #4
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2200      	movs	r2, #0
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f005 f8df 	bl	800715c <strtoul>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f005 f8d6 	bl	800715c <strtoul>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  ascptr = (unsigned int *)addr;
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb6:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8001fb8:	4835      	ldr	r0, [pc, #212]	@ (8002090 <cliMemoryDump+0x130>)
 8001fba:	f7ff fe41 	bl	8001c40 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fc2:	e05b      	b.n	800207c <cliMemoryDump+0x11c>
  {
    if((idx%4) == 0)
 8001fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d104      	bne.n	8001fd8 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4830      	ldr	r0, [pc, #192]	@ (8002094 <cliMemoryDump+0x134>)
 8001fd4:	f7ff fe34 	bl	8001c40 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	482e      	ldr	r0, [pc, #184]	@ (8002098 <cliMemoryDump+0x138>)
 8001fe0:	f7ff fe2e 	bl	8001c40 <cliPrintf>

    if ((idx%4) == 3)
 8001fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fe6:	425a      	negs	r2, r3
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	f002 0203 	and.w	r2, r2, #3
 8001ff0:	bf58      	it	pl
 8001ff2:	4253      	negpl	r3, r2
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d13b      	bne.n	8002070 <cliMemoryDump+0x110>
    {
      cliPrintf ("  |");
 8001ff8:	4828      	ldr	r0, [pc, #160]	@ (800209c <cliMemoryDump+0x13c>)
 8001ffa:	f7ff fe21 	bl	8001c40 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
 8002002:	e02c      	b.n	800205e <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	e01d      	b.n	800204c <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8002010:	f107 020c 	add.w	r2, r7, #12
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	4413      	add	r3, r2
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b1f      	cmp	r3, #31
 800201c:	d910      	bls.n	8002040 <cliMemoryDump+0xe0>
 800201e:	f107 020c 	add.w	r2, r7, #12
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	4413      	add	r3, r2
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b7e      	cmp	r3, #126	@ 0x7e
 800202a:	d809      	bhi.n	8002040 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 800202c:	f107 020c 	add.w	r2, r7, #12
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	4413      	add	r3, r2
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	4619      	mov	r1, r3
 8002038:	4819      	ldr	r0, [pc, #100]	@ (80020a0 <cliMemoryDump+0x140>)
 800203a:	f7ff fe01 	bl	8001c40 <cliPrintf>
 800203e:	e002      	b.n	8002046 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8002040:	4818      	ldr	r0, [pc, #96]	@ (80020a4 <cliMemoryDump+0x144>)
 8002042:	f7ff fdfd 	bl	8001c40 <cliPrintf>
        for (i=0;i<4;i++)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3301      	adds	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b03      	cmp	r3, #3
 8002050:	ddde      	ble.n	8002010 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	3304      	adds	r3, #4
 8002056:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	3301      	adds	r3, #1
 800205c:	623b      	str	r3, [r7, #32]
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	2b03      	cmp	r3, #3
 8002062:	ddcf      	ble.n	8002004 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8002064:	4810      	ldr	r0, [pc, #64]	@ (80020a8 <cliMemoryDump+0x148>)
 8002066:	f7ff fdeb 	bl	8001c40 <cliPrintf>
      delay(1);
 800206a:	2001      	movs	r0, #1
 800206c:	f7fe ffe5 	bl	800103a <delay>
    }
    addr++;
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	3304      	adds	r3, #4
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
  for (idx = 0; idx<size; idx++)
 8002076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002078:	3301      	adds	r3, #1
 800207a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800207c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800207e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002080:	429a      	cmp	r2, r3
 8002082:	db9f      	blt.n	8001fc4 <cliMemoryDump+0x64>
  }
}
 8002084:	3730      	adds	r7, #48	@ 0x30
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	0800970c 	.word	0x0800970c
 8002090:	08009720 	.word	0x08009720
 8002094:	08009728 	.word	0x08009728
 8002098:	08009734 	.word	0x08009734
 800209c:	0800973c 	.word	0x0800973c
 80020a0:	08009740 	.word	0x08009740
 80020a4:	08009744 	.word	0x08009744
 80020a8:	08009748 	.word	0x08009748

080020ac <ledInit>:
};



bool ledInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return true;
 80020b0:	2301      	movs	r3, #1
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <ledToggle>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
}

void ledToggle(uint8_t ch)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10d      	bne.n	80020e8 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	4a08      	ldr	r2, [pc, #32]	@ (80020f0 <ledToggle+0x34>)
 80020d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	4906      	ldr	r1, [pc, #24]	@ (80020f0 <ledToggle+0x34>)
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	889b      	ldrh	r3, [r3, #4]
 80020de:	4619      	mov	r1, r3
 80020e0:	4610      	mov	r0, r2
 80020e2:	f001 ffb1 	bl	8004048 <HAL_GPIO_TogglePin>
 80020e6:	e000      	b.n	80020ea <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 80020e8:	bf00      	nop
}
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	0800992c 	.word	0x0800992c

080020f4 <logInit>:




bool logInit(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
#ifdef _USE_HW_RTOS
  mutex_lock = xSemaphoreCreateMutex();
#endif

  log_buf_boot.line_index     = 0;
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <logInit+0x58>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	801a      	strh	r2, [r3, #0]
  log_buf_boot.buf_length     = 0;
 80020fe:	4b13      	ldr	r3, [pc, #76]	@ (800214c <logInit+0x58>)
 8002100:	2200      	movs	r2, #0
 8002102:	805a      	strh	r2, [r3, #2]
  log_buf_boot.buf_length_max = LOG_BOOT_BUF_MAX;
 8002104:	4b11      	ldr	r3, [pc, #68]	@ (800214c <logInit+0x58>)
 8002106:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800210a:	809a      	strh	r2, [r3, #4]
  log_buf_boot.buf_index      = 0;
 800210c:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <logInit+0x58>)
 800210e:	2200      	movs	r2, #0
 8002110:	80da      	strh	r2, [r3, #6]
  log_buf_boot.buf            = buf_boot;
 8002112:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <logInit+0x58>)
 8002114:	4a0e      	ldr	r2, [pc, #56]	@ (8002150 <logInit+0x5c>)
 8002116:	609a      	str	r2, [r3, #8]


  log_buf_list.line_index     = 0;
 8002118:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <logInit+0x60>)
 800211a:	2200      	movs	r2, #0
 800211c:	801a      	strh	r2, [r3, #0]
  log_buf_list.buf_length     = 0;
 800211e:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <logInit+0x60>)
 8002120:	2200      	movs	r2, #0
 8002122:	805a      	strh	r2, [r3, #2]
  log_buf_list.buf_length_max = LOG_LIST_BUF_MAX;
 8002124:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <logInit+0x60>)
 8002126:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800212a:	809a      	strh	r2, [r3, #4]
  log_buf_list.buf_index      = 0;
 800212c:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <logInit+0x60>)
 800212e:	2200      	movs	r2, #0
 8002130:	80da      	strh	r2, [r3, #6]
  log_buf_list.buf            = buf_list;
 8002132:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <logInit+0x60>)
 8002134:	4a08      	ldr	r2, [pc, #32]	@ (8002158 <logInit+0x64>)
 8002136:	609a      	str	r2, [r3, #8]


  is_init = true;
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <logInit+0x68>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("log", cliCmd);
 800213e:	4908      	ldr	r1, [pc, #32]	@ (8002160 <logInit+0x6c>)
 8002140:	4808      	ldr	r0, [pc, #32]	@ (8002164 <logInit+0x70>)
 8002142:	f7ff fe8d 	bl	8001e60 <cliAdd>
#endif

  return true;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000cb8 	.word	0x20000cb8
 8002150:	20000cd0 	.word	0x20000cd0
 8002154:	20000cc4 	.word	0x20000cc4
 8002158:	200014d0 	.word	0x200014d0
 800215c:	200024d0 	.word	0x200024d0
 8002160:	08002339 	.word	0x08002339
 8002164:	08009758 	.word	0x08009758

08002168 <logBoot>:
{
  is_enable = false;
}

void logBoot(uint8_t enable)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  is_boot_log = enable;
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf14      	ite	ne
 8002178:	2301      	movne	r3, #1
 800217a:	2300      	moveq	r3, #0
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <logBoot+0x28>)
 8002180:	701a      	strb	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000004 	.word	0x20000004

08002194 <logOpen>:

bool logOpen(uint8_t ch, uint32_t baud)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  log_ch   = ch;
 80021a0:	4a0b      	ldr	r2, [pc, #44]	@ (80021d0 <logOpen+0x3c>)
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	7013      	strb	r3, [r2, #0]
  log_baud = baud;
 80021a6:	4a0b      	ldr	r2, [pc, #44]	@ (80021d4 <logOpen+0x40>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	6013      	str	r3, [r2, #0]
  is_open  = true;
 80021ac:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <logOpen+0x44>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]

  is_open = uartOpen(ch, baud);
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	6839      	ldr	r1, [r7, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f9c8 	bl	800254c <uartOpen>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <logOpen+0x44>)
 80021c2:	701a      	strb	r2, [r3, #0]

  return is_open;
 80021c4:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <logOpen+0x44>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200024d2 	.word	0x200024d2
 80021d4:	20000008 	.word	0x20000008
 80021d8:	200024d1 	.word	0x200024d1

080021dc <logBufPrintf>:

bool logBufPrintf(log_buf_t *p_log, char *p_data, uint32_t length)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t buf_last;
  uint8_t *p_buf;
  int buf_len;


  buf_last = p_log->buf_index + length + 8;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	88db      	ldrh	r3, [r3, #6]
 80021ec:	461a      	mov	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	3308      	adds	r3, #8
 80021f4:	61fb      	str	r3, [r7, #28]
  if (buf_last > p_log->buf_length_max)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	889b      	ldrh	r3, [r3, #4]
 80021fa:	461a      	mov	r2, r3
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	4293      	cmp	r3, r2
 8002200:	d911      	bls.n	8002226 <logBufPrintf+0x4a>
  {
    p_log->buf_index = 0;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	80da      	strh	r2, [r3, #6]
    buf_last = p_log->buf_index + length + 8;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	88db      	ldrh	r3, [r3, #6]
 800220c:	461a      	mov	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	3308      	adds	r3, #8
 8002214:	61fb      	str	r3, [r7, #28]

    if (buf_last > p_log->buf_length_max)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	889b      	ldrh	r3, [r3, #4]
 800221a:	461a      	mov	r2, r3
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <logBufPrintf+0x4a>
    {
      return false;
 8002222:	2300      	movs	r3, #0
 8002224:	e033      	b.n	800228e <logBufPrintf+0xb2>
    }
  }

  p_buf = &p_log->buf[p_log->buf_index];
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	88d2      	ldrh	r2, [r2, #6]
 800222e:	4413      	add	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]

  buf_len = snprintf((char *)p_buf, length + 8, "%04X\t%s", p_log->line_index, p_data);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f103 0108 	add.w	r1, r3, #8
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	4613      	mov	r3, r2
 8002244:	4a14      	ldr	r2, [pc, #80]	@ (8002298 <logBufPrintf+0xbc>)
 8002246:	69b8      	ldr	r0, [r7, #24]
 8002248:	f005 f854 	bl	80072f4 <sniprintf>
 800224c:	6178      	str	r0, [r7, #20]
  p_log->line_index++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	801a      	strh	r2, [r3, #0]
  p_log->buf_index += buf_len;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	88da      	ldrh	r2, [r3, #6]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	b29b      	uxth	r3, r3
 8002262:	4413      	add	r3, r2
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	80da      	strh	r2, [r3, #6]


  if (buf_len + p_log->buf_length <= p_log->buf_length_max)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	885b      	ldrh	r3, [r3, #2]
 800226e:	461a      	mov	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	4413      	add	r3, r2
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	8892      	ldrh	r2, [r2, #4]
 8002278:	4293      	cmp	r3, r2
 800227a:	dc07      	bgt.n	800228c <logBufPrintf+0xb0>
  {
    p_log->buf_length += buf_len;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	885a      	ldrh	r2, [r3, #2]
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	b29b      	uxth	r3, r3
 8002284:	4413      	add	r3, r2
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	805a      	strh	r2, [r3, #2]
  }

  return true;
 800228c:	2301      	movs	r3, #1
}
 800228e:	4618      	mov	r0, r3
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	0800975c 	.word	0x0800975c

0800229c <logPrintf>:

void logPrintf(const char *fmt, ...)
{
 800229c:	b40f      	push	{r0, r1, r2, r3}
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
#endif

  va_list args;
  int len;

  if (is_init != true) return;
 80022a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <logPrintf+0x7c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	f083 0301 	eor.w	r3, r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d12a      	bne.n	8002308 <logPrintf+0x6c>


  va_start(args, fmt);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	603b      	str	r3, [r7, #0]
  len = vsnprintf(print_buf, 256, fmt, args);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022c0:	4816      	ldr	r0, [pc, #88]	@ (800231c <logPrintf+0x80>)
 80022c2:	f005 f8b9 	bl	8007438 <vsniprintf>
 80022c6:	6078      	str	r0, [r7, #4]

  if (is_open == true && is_enable == true)
 80022c8:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <logPrintf+0x84>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <logPrintf+0x4a>
 80022d0:	4b14      	ldr	r3, [pc, #80]	@ (8002324 <logPrintf+0x88>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <logPrintf+0x4a>
  {
    uartWrite(log_ch, (uint8_t *)print_buf, len);
 80022d8:	4b13      	ldr	r3, [pc, #76]	@ (8002328 <logPrintf+0x8c>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	490f      	ldr	r1, [pc, #60]	@ (800231c <logPrintf+0x80>)
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fb81 	bl	80029e8 <uartWrite>
  }

  if (is_boot_log)
 80022e6:	4b11      	ldr	r3, [pc, #68]	@ (800232c <logPrintf+0x90>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <logPrintf+0x5e>
  {
    logBufPrintf(&log_buf_boot, print_buf, len);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	461a      	mov	r2, r3
 80022f2:	490a      	ldr	r1, [pc, #40]	@ (800231c <logPrintf+0x80>)
 80022f4:	480e      	ldr	r0, [pc, #56]	@ (8002330 <logPrintf+0x94>)
 80022f6:	f7ff ff71 	bl	80021dc <logBufPrintf>
  }
  logBufPrintf(&log_buf_list, print_buf, len);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4907      	ldr	r1, [pc, #28]	@ (800231c <logPrintf+0x80>)
 8002300:	480c      	ldr	r0, [pc, #48]	@ (8002334 <logPrintf+0x98>)
 8002302:	f7ff ff6b 	bl	80021dc <logBufPrintf>
 8002306:	e000      	b.n	800230a <logPrintf+0x6e>
  if (is_init != true) return;
 8002308:	bf00      	nop
  va_end(args);

#ifdef _USE_HW_RTOS
  unLock();
#endif
}
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002312:	b004      	add	sp, #16
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	200024d0 	.word	0x200024d0
 800231c:	200024d4 	.word	0x200024d4
 8002320:	200024d1 	.word	0x200024d1
 8002324:	20000005 	.word	0x20000005
 8002328:	200024d2 	.word	0x200024d2
 800232c:	20000004 	.word	0x20000004
 8002330:	20000cb8 	.word	0x20000cb8
 8002334:	20000cc4 	.word	0x20000cc4

08002338 <cliCmd>:


#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002340:	2300      	movs	r3, #0
 8002342:	77fb      	strb	r3, [r7, #31]



  if (args->argc == 1 && args->isStr(0, "info"))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d124      	bne.n	8002396 <cliCmd+0x5e>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	494c      	ldr	r1, [pc, #304]	@ (8002484 <cliCmd+0x14c>)
 8002352:	2000      	movs	r0, #0
 8002354:	4798      	blx	r3
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01c      	beq.n	8002396 <cliCmd+0x5e>
  {
    cliPrintf("boot.line_index %d\n", log_buf_boot.line_index);
 800235c:	4b4a      	ldr	r3, [pc, #296]	@ (8002488 <cliCmd+0x150>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	484a      	ldr	r0, [pc, #296]	@ (800248c <cliCmd+0x154>)
 8002364:	f7ff fc6c 	bl	8001c40 <cliPrintf>
    cliPrintf("boot.buf_length %d\n", log_buf_boot.buf_length);
 8002368:	4b47      	ldr	r3, [pc, #284]	@ (8002488 <cliCmd+0x150>)
 800236a:	885b      	ldrh	r3, [r3, #2]
 800236c:	4619      	mov	r1, r3
 800236e:	4848      	ldr	r0, [pc, #288]	@ (8002490 <cliCmd+0x158>)
 8002370:	f7ff fc66 	bl	8001c40 <cliPrintf>
    cliPrintf("\n");
 8002374:	4847      	ldr	r0, [pc, #284]	@ (8002494 <cliCmd+0x15c>)
 8002376:	f7ff fc63 	bl	8001c40 <cliPrintf>
    cliPrintf("list.line_index %d\n", log_buf_list.line_index);
 800237a:	4b47      	ldr	r3, [pc, #284]	@ (8002498 <cliCmd+0x160>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	4619      	mov	r1, r3
 8002380:	4846      	ldr	r0, [pc, #280]	@ (800249c <cliCmd+0x164>)
 8002382:	f7ff fc5d 	bl	8001c40 <cliPrintf>
    cliPrintf("list.buf_length %d\n", log_buf_list.buf_length);
 8002386:	4b44      	ldr	r3, [pc, #272]	@ (8002498 <cliCmd+0x160>)
 8002388:	885b      	ldrh	r3, [r3, #2]
 800238a:	4619      	mov	r1, r3
 800238c:	4844      	ldr	r0, [pc, #272]	@ (80024a0 <cliCmd+0x168>)
 800238e:	f7ff fc57 	bl	8001c40 <cliPrintf>

    ret = true;
 8002392:	2301      	movs	r3, #1
 8002394:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "boot"))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d12d      	bne.n	80023fa <cliCmd+0xc2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	4940      	ldr	r1, [pc, #256]	@ (80024a4 <cliCmd+0x16c>)
 80023a4:	2000      	movs	r0, #0
 80023a6:	4798      	blx	r3
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d025      	beq.n	80023fa <cliCmd+0xc2>
  {
    uint32_t index = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]

    while(cliKeepLoop())
 80023b2:	e019      	b.n	80023e8 <cliCmd+0xb0>
    {
      uint32_t buf_len;

      buf_len = log_buf_boot.buf_length - index;
 80023b4:	4b34      	ldr	r3, [pc, #208]	@ (8002488 <cliCmd+0x150>)
 80023b6:	885b      	ldrh	r3, [r3, #2]
 80023b8:	461a      	mov	r2, r3
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	617b      	str	r3, [r7, #20]
      if (buf_len == 0)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <cliCmd+0xbc>
      {
        break;
      }
      if (buf_len > 64)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b40      	cmp	r3, #64	@ 0x40
 80023ca:	d901      	bls.n	80023d0 <cliCmd+0x98>
      {
        buf_len = 64;
 80023cc:	2340      	movs	r3, #64	@ 0x40
 80023ce:	617b      	str	r3, [r7, #20]

      #ifdef _USE_HW_RTOS
      lock();
      #endif

      cliWrite((uint8_t *)&log_buf_boot.buf[index], buf_len);
 80023d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002488 <cliCmd+0x150>)
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	4413      	add	r3, r2
 80023d8:	6979      	ldr	r1, [r7, #20]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff f82a 	bl	8001434 <cliWrite>
      index += buf_len;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	4413      	add	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
    while(cliKeepLoop())
 80023e8:	f7ff fd24 	bl	8001e34 <cliKeepLoop>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1e0      	bne.n	80023b4 <cliCmd+0x7c>
 80023f2:	e000      	b.n	80023f6 <cliCmd+0xbe>
        break;
 80023f4:	bf00      	nop

      #ifdef _USE_HW_RTOS
      unLock();
      #endif
    }
    ret = true;
 80023f6:	2301      	movs	r3, #1
 80023f8:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "list"))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d12d      	bne.n	800245e <cliCmd+0x126>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	4928      	ldr	r1, [pc, #160]	@ (80024a8 <cliCmd+0x170>)
 8002408:	2000      	movs	r0, #0
 800240a:	4798      	blx	r3
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d025      	beq.n	800245e <cliCmd+0x126>
  {
    uint32_t index = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]

    while(cliKeepLoop())
 8002416:	e019      	b.n	800244c <cliCmd+0x114>
    {
      uint32_t buf_len;

      buf_len = log_buf_list.buf_length - index;
 8002418:	4b1f      	ldr	r3, [pc, #124]	@ (8002498 <cliCmd+0x160>)
 800241a:	885b      	ldrh	r3, [r3, #2]
 800241c:	461a      	mov	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	60fb      	str	r3, [r7, #12]
      if (buf_len == 0)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d016      	beq.n	8002458 <cliCmd+0x120>
      {
        break;
      }
      if (buf_len > 64)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b40      	cmp	r3, #64	@ 0x40
 800242e:	d901      	bls.n	8002434 <cliCmd+0xfc>
      {
        buf_len = 64;
 8002430:	2340      	movs	r3, #64	@ 0x40
 8002432:	60fb      	str	r3, [r7, #12]

      #ifdef _USE_HW_RTOS
      lock();
      #endif

      cliWrite((uint8_t *)&log_buf_list.buf[index], buf_len);
 8002434:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <cliCmd+0x160>)
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4413      	add	r3, r2
 800243c:	68f9      	ldr	r1, [r7, #12]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fff8 	bl	8001434 <cliWrite>
      index += buf_len;
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4413      	add	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
    while(cliKeepLoop())
 800244c:	f7ff fcf2 	bl	8001e34 <cliKeepLoop>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1e0      	bne.n	8002418 <cliCmd+0xe0>
 8002456:	e000      	b.n	800245a <cliCmd+0x122>
        break;
 8002458:	bf00      	nop
      #ifdef _USE_HW_RTOS
      unLock();
      #endif

    }
    ret = true;
 800245a:	2301      	movs	r3, #1
 800245c:	77fb      	strb	r3, [r7, #31]
  }

  if (ret == false)
 800245e:	7ffb      	ldrb	r3, [r7, #31]
 8002460:	f083 0301 	eor.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <cliCmd+0x144>
  {
    cliPrintf("log info\n");
 800246a:	4810      	ldr	r0, [pc, #64]	@ (80024ac <cliCmd+0x174>)
 800246c:	f7ff fbe8 	bl	8001c40 <cliPrintf>
    cliPrintf("log boot\n");
 8002470:	480f      	ldr	r0, [pc, #60]	@ (80024b0 <cliCmd+0x178>)
 8002472:	f7ff fbe5 	bl	8001c40 <cliPrintf>
    cliPrintf("log list\n");
 8002476:	480f      	ldr	r0, [pc, #60]	@ (80024b4 <cliCmd+0x17c>)
 8002478:	f7ff fbe2 	bl	8001c40 <cliPrintf>
  }
}
 800247c:	bf00      	nop
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	08009764 	.word	0x08009764
 8002488:	20000cb8 	.word	0x20000cb8
 800248c:	0800976c 	.word	0x0800976c
 8002490:	08009780 	.word	0x08009780
 8002494:	08009794 	.word	0x08009794
 8002498:	20000cc4 	.word	0x20000cc4
 800249c:	08009798 	.word	0x08009798
 80024a0:	080097ac 	.word	0x080097ac
 80024a4:	080097c0 	.word	0x080097c0
 80024a8:	080097c8 	.word	0x080097c8
 80024ac:	080097d0 	.word	0x080097d0
 80024b0:	080097dc 	.word	0x080097dc
 80024b4:	080097e8 	.word	0x080097e8

080024b8 <uartInit>:
  {
    {"USART1 SWD   ", USART1, &huart1, &hdma_usart1_rx, NULL, false},
  };

bool uartInit(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	e02c      	b.n	800251e <uartInit+0x66>
  {
    uart_tbl[i].is_open = false;
 80024c4:	4a1d      	ldr	r2, [pc, #116]	@ (800253c <uartInit+0x84>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f240 412c 	movw	r1, #1068	@ 0x42c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].baud = 115200;
 80024d6:	4a19      	ldr	r2, [pc, #100]	@ (800253c <uartInit+0x84>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f240 412c 	movw	r1, #1068	@ 0x42c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	3304      	adds	r3, #4
 80024e6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024ea:	601a      	str	r2, [r3, #0]
    uart_tbl[i].rx_cnt = 0;
 80024ec:	4a13      	ldr	r2, [pc, #76]	@ (800253c <uartInit+0x84>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f240 412c 	movw	r1, #1068	@ 0x42c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
    uart_tbl[i].tx_cnt = 0;    
 8002502:	4a0e      	ldr	r2, [pc, #56]	@ (800253c <uartInit+0x84>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f240 412c 	movw	r1, #1068	@ 0x42c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3301      	adds	r3, #1
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	ddcf      	ble.n	80024c4 <uartInit+0xc>
  }

  is_init = true;
 8002524:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <uartInit+0x88>)
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("uart", cliUart);
 800252a:	4906      	ldr	r1, [pc, #24]	@ (8002544 <uartInit+0x8c>)
 800252c:	4806      	ldr	r0, [pc, #24]	@ (8002548 <uartInit+0x90>)
 800252e:	f7ff fc97 	bl	8001e60 <cliAdd>
#endif

  return true;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200001e0 	.word	0x200001e0
 8002540:	200025d4 	.word	0x200025d4
 8002544:	08002b21 	.word	0x08002b21
 8002548:	08009804 	.word	0x08009804

0800254c <uartOpen>:
{
  return is_init;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef ret_hal;


  if (ch >= UART_MAX_CH) return false;
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <uartOpen+0x1a>
 8002562:	2300      	movs	r3, #0
 8002564:	e1b9      	b.n	80028da <uartOpen+0x38e>

  if (uart_tbl[ch].is_open == true && uart_tbl[ch].baud == baud)
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	4a94      	ldr	r2, [pc, #592]	@ (80027bc <uartOpen+0x270>)
 800256a:	f240 412c 	movw	r1, #1068	@ 0x42c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00d      	beq.n	8002596 <uartOpen+0x4a>
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	4a8f      	ldr	r2, [pc, #572]	@ (80027bc <uartOpen+0x270>)
 800257e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3304      	adds	r3, #4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d101      	bne.n	8002596 <uartOpen+0x4a>
  {
    return true;
 8002592:	2301      	movs	r3, #1
 8002594:	e1a1      	b.n	80028da <uartOpen+0x38e>
  }


  switch(ch)
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	2b01      	cmp	r3, #1
 800259a:	dc02      	bgt.n	80025a2 <uartOpen+0x56>
 800259c:	2b00      	cmp	r3, #0
 800259e:	da04      	bge.n	80025aa <uartOpen+0x5e>
 80025a0:	e19a      	b.n	80028d8 <uartOpen+0x38c>
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	f000 8181 	beq.w	80028aa <uartOpen+0x35e>
 80025a8:	e196      	b.n	80028d8 <uartOpen+0x38c>
  {
    case _DEF_UART1:
    case _DEF_UART2:
      uart_tbl[ch].baud      = baud;
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	4a83      	ldr	r2, [pc, #524]	@ (80027bc <uartOpen+0x270>)
 80025ae:	f240 412c 	movw	r1, #1068	@ 0x42c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	3304      	adds	r3, #4
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	601a      	str	r2, [r3, #0]

      uart_tbl[ch].p_huart   = uart_hw_tbl[ch].p_huart;
 80025be:	79fa      	ldrb	r2, [r7, #7]
 80025c0:	79f9      	ldrb	r1, [r7, #7]
 80025c2:	487f      	ldr	r0, [pc, #508]	@ (80027c0 <uartOpen+0x274>)
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4403      	add	r3, r0
 80025ce:	3308      	adds	r3, #8
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	487a      	ldr	r0, [pc, #488]	@ (80027bc <uartOpen+0x270>)
 80025d4:	f240 432c 	movw	r3, #1068	@ 0x42c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4403      	add	r3, r0
 80025de:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80025e2:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].p_hdma_rx = uart_hw_tbl[ch].p_hdma_rx;
 80025e4:	79fa      	ldrb	r2, [r7, #7]
 80025e6:	79f9      	ldrb	r1, [r7, #7]
 80025e8:	4875      	ldr	r0, [pc, #468]	@ (80027c0 <uartOpen+0x274>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4403      	add	r3, r0
 80025f4:	330c      	adds	r3, #12
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4870      	ldr	r0, [pc, #448]	@ (80027bc <uartOpen+0x270>)
 80025fa:	f240 432c 	movw	r3, #1068	@ 0x42c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4403      	add	r3, r0
 8002604:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8002608:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].p_huart->Instance = uart_hw_tbl[ch].p_uart;    
 800260a:	79fa      	ldrb	r2, [r7, #7]
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	496b      	ldr	r1, [pc, #428]	@ (80027bc <uartOpen+0x270>)
 8002610:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002614:	fb00 f303 	mul.w	r3, r0, r3
 8002618:	440b      	add	r3, r1
 800261a:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800261e:	6819      	ldr	r1, [r3, #0]
 8002620:	4867      	ldr	r0, [pc, #412]	@ (80027c0 <uartOpen+0x274>)
 8002622:	4613      	mov	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4403      	add	r3, r0
 800262c:	3304      	adds	r3, #4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	600b      	str	r3, [r1, #0]

      uart_tbl[ch].p_huart->Init.BaudRate       = baud;
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	4a61      	ldr	r2, [pc, #388]	@ (80027bc <uartOpen+0x270>)
 8002636:	f240 412c 	movw	r1, #1068	@ 0x42c
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	4413      	add	r3, r2
 8002640:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	605a      	str	r2, [r3, #4]
      uart_tbl[ch].p_huart->Init.WordLength     = UART_WORDLENGTH_8B;
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	4a5b      	ldr	r2, [pc, #364]	@ (80027bc <uartOpen+0x270>)
 800264e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	4413      	add	r3, r2
 8002658:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
      uart_tbl[ch].p_huart->Init.StopBits       = UART_STOPBITS_1;
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	4a55      	ldr	r2, [pc, #340]	@ (80027bc <uartOpen+0x270>)
 8002666:	f240 412c 	movw	r1, #1068	@ 0x42c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2200      	movs	r2, #0
 8002678:	60da      	str	r2, [r3, #12]
      uart_tbl[ch].p_huart->Init.Parity         = UART_PARITY_NONE;
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	4a4f      	ldr	r2, [pc, #316]	@ (80027bc <uartOpen+0x270>)
 800267e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
      uart_tbl[ch].p_huart->Init.Mode           = UART_MODE_TX_RX;
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	4a49      	ldr	r2, [pc, #292]	@ (80027bc <uartOpen+0x270>)
 8002696:	f240 412c 	movw	r1, #1068	@ 0x42c
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	4413      	add	r3, r2
 80026a0:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	220c      	movs	r2, #12
 80026a8:	615a      	str	r2, [r3, #20]
      uart_tbl[ch].p_huart->Init.HwFlowCtl      = UART_HWCONTROL_NONE;
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	4a43      	ldr	r2, [pc, #268]	@ (80027bc <uartOpen+0x270>)
 80026ae:	f240 412c 	movw	r1, #1068	@ 0x42c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	619a      	str	r2, [r3, #24]
      uart_tbl[ch].p_huart->Init.OverSampling   = UART_OVERSAMPLING_16;
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	4a3d      	ldr	r2, [pc, #244]	@ (80027bc <uartOpen+0x270>)
 80026c6:	f240 412c 	movw	r1, #1068	@ 0x42c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
      uart_tbl[ch].p_huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	4a37      	ldr	r2, [pc, #220]	@ (80027bc <uartOpen+0x270>)
 80026de:	f240 412c 	movw	r1, #1068	@ 0x42c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2200      	movs	r2, #0
 80026f0:	621a      	str	r2, [r3, #32]
      uart_tbl[ch].p_huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	4a31      	ldr	r2, [pc, #196]	@ (80027bc <uartOpen+0x270>)
 80026f6:	f240 412c 	movw	r1, #1068	@ 0x42c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2200      	movs	r2, #0
 8002708:	625a      	str	r2, [r3, #36]	@ 0x24
      uart_tbl[ch].p_huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	4a2b      	ldr	r2, [pc, #172]	@ (80027bc <uartOpen+0x270>)
 800270e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2200      	movs	r2, #0
 8002720:	629a      	str	r2, [r3, #40]	@ 0x28


      qbufferCreate(&uart_tbl[ch].qbuffer, &uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH);
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	f240 422c 	movw	r2, #1068	@ 0x42c
 8002728:	fb02 f303 	mul.w	r3, r2, r3
 800272c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002730:	4a22      	ldr	r2, [pc, #136]	@ (80027bc <uartOpen+0x270>)
 8002732:	1898      	adds	r0, r3, r2
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f240 422c 	movw	r2, #1068	@ 0x42c
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	3308      	adds	r3, #8
 8002740:	4a1e      	ldr	r2, [pc, #120]	@ (80027bc <uartOpen+0x270>)
 8002742:	4413      	add	r3, r2
 8002744:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002748:	4619      	mov	r1, r3
 800274a:	f7fe fc88 	bl	800105e <qbufferCreate>


      __HAL_RCC_DMA1_CLK_ENABLE();
 800274e:	4b1d      	ldr	r3, [pc, #116]	@ (80027c4 <uartOpen+0x278>)
 8002750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002752:	4a1c      	ldr	r2, [pc, #112]	@ (80027c4 <uartOpen+0x278>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6493      	str	r3, [r2, #72]	@ 0x48
 800275a:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <uartOpen+0x278>)
 800275c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]

      HAL_UART_DeInit(uart_tbl[ch].p_huart);
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	4a14      	ldr	r2, [pc, #80]	@ (80027bc <uartOpen+0x270>)
 800276a:	f240 412c 	movw	r1, #1068	@ 0x42c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f002 fca0 	bl	80050c0 <HAL_UART_DeInit>

      if (uart_hw_tbl[ch].is_rs485 == true)
 8002780:	79fa      	ldrb	r2, [r7, #7]
 8002782:	490f      	ldr	r1, [pc, #60]	@ (80027c0 <uartOpen+0x274>)
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	3314      	adds	r3, #20
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d018      	beq.n	80027c8 <uartOpen+0x27c>
      {
        ret_hal = HAL_RS485Ex_Init(uart_tbl[ch].p_huart, UART_DE_POLARITY_HIGH, 0, 0);
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	4a08      	ldr	r2, [pc, #32]	@ (80027bc <uartOpen+0x270>)
 800279a:	f240 412c 	movw	r1, #1068	@ 0x42c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	2300      	movs	r3, #0
 80027ac:	2200      	movs	r2, #0
 80027ae:	2100      	movs	r1, #0
 80027b0:	f003 fc92 	bl	80060d8 <HAL_RS485Ex_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	73bb      	strb	r3, [r7, #14]
 80027b8:	e015      	b.n	80027e6 <uartOpen+0x29a>
 80027ba:	bf00      	nop
 80027bc:	200001e0 	.word	0x200001e0
 80027c0:	08009934 	.word	0x08009934
 80027c4:	40021000 	.word	0x40021000
      }
      else
      {
        ret_hal = HAL_UART_Init(uart_tbl[ch].p_huart);
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	4a46      	ldr	r2, [pc, #280]	@ (80028e4 <uartOpen+0x398>)
 80027cc:	f240 412c 	movw	r1, #1068	@ 0x42c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 fc1f 	bl	8005020 <HAL_UART_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	73bb      	strb	r3, [r7, #14]
      }

      if (ret_hal == HAL_OK)
 80027e6:	7bbb      	ldrb	r3, [r7, #14]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d174      	bne.n	80028d6 <uartOpen+0x38a>
      {
        ret = true;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
        uart_tbl[ch].is_open = true;
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	4a3c      	ldr	r2, [pc, #240]	@ (80028e4 <uartOpen+0x398>)
 80027f4:	f240 412c 	movw	r1, #1068	@ 0x42c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]

        if(HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH) != HAL_OK)
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	4a37      	ldr	r2, [pc, #220]	@ (80028e4 <uartOpen+0x398>)
 8002806:	f240 412c 	movw	r1, #1068	@ 0x42c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f240 422c 	movw	r2, #1068	@ 0x42c
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	3308      	adds	r3, #8
 8002822:	4a30      	ldr	r2, [pc, #192]	@ (80028e4 <uartOpen+0x398>)
 8002824:	4413      	add	r3, r2
 8002826:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800282a:	4619      	mov	r1, r3
 800282c:	f002 fd16 	bl	800525c <HAL_UART_Receive_DMA>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <uartOpen+0x2ee>
        {
          ret = false;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
        }

        uart_tbl[ch].qbuffer.in  = uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_huart->hdmarx->Instance)->CNDTR;
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	4a29      	ldr	r2, [pc, #164]	@ (80028e4 <uartOpen+0x398>)
 800283e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4a24      	ldr	r2, [pc, #144]	@ (80028e4 <uartOpen+0x398>)
 8002852:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002856:	fb00 f303 	mul.w	r3, r0, r3
 800285a:	4413      	add	r3, r2
 800285c:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	1a8a      	subs	r2, r1, r2
 800286e:	491d      	ldr	r1, [pc, #116]	@ (80028e4 <uartOpen+0x398>)
 8002870:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002874:	fb00 f303 	mul.w	r3, r0, r3
 8002878:	440b      	add	r3, r1
 800287a:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800287e:	601a      	str	r2, [r3, #0]
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
 8002880:	79fa      	ldrb	r2, [r7, #7]
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	4917      	ldr	r1, [pc, #92]	@ (80028e4 <uartOpen+0x398>)
 8002886:	f240 402c 	movw	r0, #1068	@ 0x42c
 800288a:	fb00 f202 	mul.w	r2, r0, r2
 800288e:	440a      	add	r2, r1
 8002890:	f502 6281 	add.w	r2, r2, #1032	@ 0x408
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	4913      	ldr	r1, [pc, #76]	@ (80028e4 <uartOpen+0x398>)
 8002898:	f240 402c 	movw	r0, #1068	@ 0x42c
 800289c:	fb00 f303 	mul.w	r3, r0, r3
 80028a0:	440b      	add	r3, r1
 80028a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028a6:	601a      	str	r2, [r3, #0]
      }
      break;
 80028a8:	e015      	b.n	80028d6 <uartOpen+0x38a>

    case _DEF_UART3:
      uart_tbl[ch].baud    = baud;
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	4a0d      	ldr	r2, [pc, #52]	@ (80028e4 <uartOpen+0x398>)
 80028ae:	f240 412c 	movw	r1, #1068	@ 0x42c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	3304      	adds	r3, #4
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].is_open = true;
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	4a08      	ldr	r2, [pc, #32]	@ (80028e4 <uartOpen+0x398>)
 80028c2:	f240 412c 	movw	r1, #1068	@ 0x42c
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
      ret = true;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      break;      
 80028d4:	e000      	b.n	80028d8 <uartOpen+0x38c>
      break;
 80028d6:	bf00      	nop
  }

  return ret;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200001e0 	.word	0x200001e0

080028e8 <uartAvailable>:

  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]


  switch(ch)
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	dc02      	bgt.n	8002902 <uartAvailable+0x1a>
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	da02      	bge.n	8002906 <uartAvailable+0x1e>
 8002900:	e030      	b.n	8002964 <uartAvailable+0x7c>
 8002902:	2b02      	cmp	r3, #2

    case _DEF_UART3:
      #ifdef _USE_HW_USB
      ret = cdcAvailable();
      #endif
      break;      
 8002904:	e02e      	b.n	8002964 <uartAvailable+0x7c>
      uart_tbl[ch].qbuffer.in = (uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_hdma_rx->Instance)->CNDTR);
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	4a19      	ldr	r2, [pc, #100]	@ (8002970 <uartAvailable+0x88>)
 800290a:	f240 412c 	movw	r1, #1068	@ 0x42c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8002918:	6819      	ldr	r1, [r3, #0]
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	4a14      	ldr	r2, [pc, #80]	@ (8002970 <uartAvailable+0x88>)
 800291e:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002922:	fb00 f303 	mul.w	r3, r0, r3
 8002926:	4413      	add	r3, r2
 8002928:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	1a8a      	subs	r2, r1, r2
 8002936:	490e      	ldr	r1, [pc, #56]	@ (8002970 <uartAvailable+0x88>)
 8002938:	f240 402c 	movw	r0, #1068	@ 0x42c
 800293c:	fb00 f303 	mul.w	r3, r0, r3
 8002940:	440b      	add	r3, r1
 8002942:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002946:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&uart_tbl[ch].qbuffer);      
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	f240 422c 	movw	r2, #1068	@ 0x42c
 800294e:	fb02 f303 	mul.w	r3, r2, r3
 8002952:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002956:	4a06      	ldr	r2, [pc, #24]	@ (8002970 <uartAvailable+0x88>)
 8002958:	4413      	add	r3, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe fbf5 	bl	800114a <qbufferAvailable>
 8002960:	60f8      	str	r0, [r7, #12]
      break;
 8002962:	bf00      	nop
  }

  return ret;
 8002964:	68fb      	ldr	r3, [r7, #12]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200001e0 	.word	0x200001e0

08002974 <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	2b01      	cmp	r3, #1
 8002986:	dc02      	bgt.n	800298e <uartRead+0x1a>
 8002988:	2b00      	cmp	r3, #0
 800298a:	da02      	bge.n	8002992 <uartRead+0x1e>
 800298c:	e011      	b.n	80029b2 <uartRead+0x3e>
 800298e:	2b02      	cmp	r3, #2

    case _DEF_UART3:
      #ifdef _USE_HW_USB
      ret = cdcRead();
      #endif
      break;      
 8002990:	e00f      	b.n	80029b2 <uartRead+0x3e>
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f240 422c 	movw	r2, #1068	@ 0x42c
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80029a0:	4a10      	ldr	r2, [pc, #64]	@ (80029e4 <uartRead+0x70>)
 80029a2:	4413      	add	r3, r2
 80029a4:	f107 010f 	add.w	r1, r7, #15
 80029a8:	2201      	movs	r2, #1
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fb75 	bl	800109a <qbufferRead>
      break;
 80029b0:	bf00      	nop
  }
  uart_tbl[ch].rx_cnt++;
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	490b      	ldr	r1, [pc, #44]	@ (80029e4 <uartRead+0x70>)
 80029b6:	f240 422c 	movw	r2, #1068	@ 0x42c
 80029ba:	fb03 f202 	mul.w	r2, r3, r2
 80029be:	440a      	add	r2, r1
 80029c0:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	3201      	adds	r2, #1
 80029c8:	4906      	ldr	r1, [pc, #24]	@ (80029e4 <uartRead+0x70>)
 80029ca:	f240 402c 	movw	r0, #1068	@ 0x42c
 80029ce:	fb00 f303 	mul.w	r3, r0, r3
 80029d2:	440b      	add	r3, r1
 80029d4:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 80029d8:	601a      	str	r2, [r3, #0]

  return ret;
 80029da:	7bfb      	ldrb	r3, [r7, #15]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	200001e0 	.word	0x200001e0

080029e8 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]


  switch(ch)
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	dc02      	bgt.n	8002a06 <uartWrite+0x1e>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da02      	bge.n	8002a0a <uartWrite+0x22>
 8002a04:	e017      	b.n	8002a36 <uartWrite+0x4e>
 8002a06:	2b02      	cmp	r3, #2

    case _DEF_UART3:
      #ifdef _USE_HW_USB
      ret = cdcWrite(p_data, length);
      #endif
      break;      
 8002a08:	e015      	b.n	8002a36 <uartWrite+0x4e>
      if (HAL_UART_Transmit(uart_tbl[ch].p_huart, p_data, length, 100) == HAL_OK)
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	4a17      	ldr	r2, [pc, #92]	@ (8002a6c <uartWrite+0x84>)
 8002a0e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	2364      	movs	r3, #100	@ 0x64
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	f002 fb8a 	bl	800513e <HAL_UART_Transmit>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <uartWrite+0x4c>
        ret = length;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	617b      	str	r3, [r7, #20]
      break;
 8002a34:	bf00      	nop
  }
  uart_tbl[ch].tx_cnt += ret;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	4a0c      	ldr	r2, [pc, #48]	@ (8002a6c <uartWrite+0x84>)
 8002a3a:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8002a48:	6819      	ldr	r1, [r3, #0]
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	440a      	add	r2, r1
 8002a50:	4906      	ldr	r1, [pc, #24]	@ (8002a6c <uartWrite+0x84>)
 8002a52:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002a56:	fb00 f303 	mul.w	r3, r0, r3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8002a60:	601a      	str	r2, [r3, #0]

  return ret;
 8002a62:	697b      	ldr	r3, [r7, #20]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200001e0 	.word	0x200001e0

08002a70 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8002a70:	b40e      	push	{r1, r2, r3}
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b0c7      	sub	sp, #284	@ 0x11c
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a7e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002a82:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8002a84:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8002a88:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a90:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8002a92:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a9a:	f107 0010 	add.w	r0, r7, #16
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002aa4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002aa8:	f004 fcc6 	bl	8007438 <vsniprintf>
 8002aac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8002ab0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002ab4:	f107 0110 	add.w	r1, r7, #16
 8002ab8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002abc:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ff90 	bl	80029e8 <uartWrite>
 8002ac8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 8002acc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002adc:	b003      	add	sp, #12
 8002ade:	4770      	bx	lr

08002ae0 <uartGetBaud>:

uint32_t uartGetBaud(uint8_t ch)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]


  if (ch >= UART_MAX_CH) return 0;
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <uartGetBaud+0x18>
 8002af4:	2300      	movs	r3, #0
 8002af6:	e00a      	b.n	8002b0e <uartGetBaud+0x2e>
  if (ch == HW_UART_CH_USB)
    ret = cdcGetBaud();
  else
    ret = uart_tbl[ch].baud;
  #else
  ret = uart_tbl[ch].baud;
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	4a08      	ldr	r2, [pc, #32]	@ (8002b1c <uartGetBaud+0x3c>)
 8002afc:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3304      	adds	r3, #4
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60fb      	str	r3, [r7, #12]
  #endif
  
  return ret;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	200001e0 	.word	0x200001e0

08002b20 <cliUart>:
  return uart_tbl[ch].tx_cnt;
}

#ifdef _USE_HW_CLI
void cliUart(cli_args_t *args)
{
 8002b20:	b5b0      	push	{r4, r5, r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "info"))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d127      	bne.n	8002b84 <cliUart+0x64>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	494d      	ldr	r1, [pc, #308]	@ (8002c70 <cliUart+0x150>)
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	4798      	blx	r3
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01f      	beq.n	8002b84 <cliUart+0x64>
  {
    for (int i=0; i<UART_MAX_CH; i++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	e017      	b.n	8002b7a <cliUart+0x5a>
    {
      cliPrintf("_DEF_UART%d : %s, %d bps\n", i+1, uart_hw_tbl[i].p_msg, uartGetBaud(i));
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1c5c      	adds	r4, r3, #1
 8002b4e:	4949      	ldr	r1, [pc, #292]	@ (8002c74 <cliUart+0x154>)
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	681d      	ldr	r5, [r3, #0]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ffbc 	bl	8002ae0 <uartGetBaud>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	462a      	mov	r2, r5
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	4842      	ldr	r0, [pc, #264]	@ (8002c78 <cliUart+0x158>)
 8002b70:	f7ff f866 	bl	8001c40 <cliPrintf>
    for (int i=0; i<UART_MAX_CH; i++)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	3301      	adds	r3, #1
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	dde4      	ble.n	8002b4a <cliUart+0x2a>
    }
    ret = true;
 8002b80:	2301      	movs	r3, #1
 8002b82:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "test"))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d15f      	bne.n	8002c4c <cliUart+0x12c>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	493a      	ldr	r1, [pc, #232]	@ (8002c7c <cliUart+0x15c>)
 8002b92:	2000      	movs	r0, #0
 8002b94:	4798      	blx	r3
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d057      	beq.n	8002c4c <cliUart+0x12c>
  {
    uint8_t uart_ch;

    uart_ch = constrain(args->getData(1), 1, UART_MAX_CH) - 1;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	4798      	blx	r3
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	dd11      	ble.n	8002bce <cliUart+0xae>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2001      	movs	r0, #1
 8002bb0:	4798      	blx	r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	dc08      	bgt.n	8002bca <cliUart+0xaa>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	4798      	blx	r3
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	e002      	b.n	8002bd0 <cliUart+0xb0>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <cliUart+0xb0>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]

    if (uart_ch != cliGetPort())
 8002bd2:	f7fe fb4f 	bl	8001274 <cliGetPort>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d02e      	beq.n	8002c3e <cliUart+0x11e>
    {
      uint8_t rx_data;

      while(1)
      {
        if (uartAvailable(uart_ch) > 0)
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fe80 	bl	80028e8 <uartAvailable>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00c      	beq.n	8002c08 <cliUart+0xe8>
        {
          rx_data = uartRead(uart_ch);
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff febf 	bl	8002974 <uartRead>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	73bb      	strb	r3, [r7, #14]
          cliPrintf("<- _DEF_UART%d RX : 0x%X\n", uart_ch + 1, rx_data);
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	7bba      	ldrb	r2, [r7, #14]
 8002c00:	4619      	mov	r1, r3
 8002c02:	481f      	ldr	r0, [pc, #124]	@ (8002c80 <cliUart+0x160>)
 8002c04:	f7ff f81c 	bl	8001c40 <cliPrintf>
        }

        if (cliAvailable() > 0)
 8002c08:	f7fe fbfc 	bl	8001404 <cliAvailable>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0e6      	beq.n	8002be0 <cliUart+0xc0>
        {
          rx_data = cliRead();
 8002c12:	f7fe fc03 	bl	800141c <cliRead>
 8002c16:	4603      	mov	r3, r0
 8002c18:	73bb      	strb	r3, [r7, #14]
          if (rx_data == 'q')
 8002c1a:	7bbb      	ldrb	r3, [r7, #14]
 8002c1c:	2b71      	cmp	r3, #113	@ 0x71
 8002c1e:	d012      	beq.n	8002c46 <cliUart+0x126>
          {
            break;
          }
          else
          {
            uartWrite(uart_ch, &rx_data, 1);
 8002c20:	f107 010e 	add.w	r1, r7, #14
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	2201      	movs	r2, #1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fedd 	bl	80029e8 <uartWrite>
            cliPrintf("-> _DEF_UART%d TX : 0x%X\n", uart_ch + 1, rx_data);            
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	3301      	adds	r3, #1
 8002c32:	7bba      	ldrb	r2, [r7, #14]
 8002c34:	4619      	mov	r1, r3
 8002c36:	4813      	ldr	r0, [pc, #76]	@ (8002c84 <cliUart+0x164>)
 8002c38:	f7ff f802 	bl	8001c40 <cliPrintf>
        if (uartAvailable(uart_ch) > 0)
 8002c3c:	e7d0      	b.n	8002be0 <cliUart+0xc0>
        }
      }
    }
    else
    {
      cliPrintf("This is cliPort\n");
 8002c3e:	4812      	ldr	r0, [pc, #72]	@ (8002c88 <cliUart+0x168>)
 8002c40:	f7fe fffe 	bl	8001c40 <cliPrintf>
 8002c44:	e000      	b.n	8002c48 <cliUart+0x128>
            break;
 8002c46:	bf00      	nop
    }
    ret = true;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	75fb      	strb	r3, [r7, #23]
  }

  if (ret == false)
 8002c4c:	7dfb      	ldrb	r3, [r7, #23]
 8002c4e:	f083 0301 	eor.w	r3, r3, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d006      	beq.n	8002c66 <cliUart+0x146>
  {
    cliPrintf("uart info\n");
 8002c58:	480c      	ldr	r0, [pc, #48]	@ (8002c8c <cliUart+0x16c>)
 8002c5a:	f7fe fff1 	bl	8001c40 <cliPrintf>
    cliPrintf("uart test ch[1~%d]\n", HW_UART_MAX_CH);
 8002c5e:	2101      	movs	r1, #1
 8002c60:	480b      	ldr	r0, [pc, #44]	@ (8002c90 <cliUart+0x170>)
 8002c62:	f7fe ffed 	bl	8001c40 <cliPrintf>
  }
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	0800980c 	.word	0x0800980c
 8002c74:	08009934 	.word	0x08009934
 8002c78:	08009814 	.word	0x08009814
 8002c7c:	08009830 	.word	0x08009830
 8002c80:	08009838 	.word	0x08009838
 8002c84:	08009854 	.word	0x08009854
 8002c88:	08009870 	.word	0x08009870
 8002c8c:	08009884 	.word	0x08009884
 8002c90:	08009890 	.word	0x08009890

08002c94 <hwInit>:




bool hwInit(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
  cliInit();
 8002c9a:	f7fe fa71 	bl	8001180 <cliInit>
  logInit();
 8002c9e:	f7ff fa29 	bl	80020f4 <logInit>
  ledInit();
 8002ca2:	f7ff fa03 	bl	80020ac <ledInit>
  uartInit();
 8002ca6:	f7ff fc07 	bl	80024b8 <uartInit>
  for (int i=0; i<HW_UART_MAX_CH; i++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	e009      	b.n	8002cc4 <hwInit+0x30>
  {
    uartOpen(i, 115200);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fc47 	bl	800254c <uartOpen>
  for (int i=0; i<HW_UART_MAX_CH; i++)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	607b      	str	r3, [r7, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	ddf2      	ble.n	8002cb0 <hwInit+0x1c>
  }
  logOpen(HW_LOG_CH, 115200);
 8002cca:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7ff fa60 	bl	8002194 <logOpen>
  logPrintf("\r\n[ Firmware Begwein... ]\r\n");
 8002cd4:	480f      	ldr	r0, [pc, #60]	@ (8002d14 <hwInit+0x80>)
 8002cd6:	f7ff fae1 	bl	800229c <logPrintf>
  logPrintf("Booting..Name \t\t: %s\r\n", _DEF_BOARD_NAME);
 8002cda:	490f      	ldr	r1, [pc, #60]	@ (8002d18 <hwInit+0x84>)
 8002cdc:	480f      	ldr	r0, [pc, #60]	@ (8002d1c <hwInit+0x88>)
 8002cde:	f7ff fadd 	bl	800229c <logPrintf>
  logPrintf("Booting..Ver  \t\t: %s\r\n", _DEF_FIRMWATRE_VERSION);
 8002ce2:	490f      	ldr	r1, [pc, #60]	@ (8002d20 <hwInit+0x8c>)
 8002ce4:	480f      	ldr	r0, [pc, #60]	@ (8002d24 <hwInit+0x90>)
 8002ce6:	f7ff fad9 	bl	800229c <logPrintf>
  logPrintf("Booting..Clock\t\t: %d Mhz\r\n", (int)HAL_RCC_GetSysClockFreq()/1000000);
 8002cea:	f001 fec9 	bl	8004a80 <HAL_RCC_GetSysClockFreq>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d28 <hwInit+0x94>)
 8002cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8002cf6:	1492      	asrs	r2, r2, #18
 8002cf8:	17db      	asrs	r3, r3, #31
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	480b      	ldr	r0, [pc, #44]	@ (8002d2c <hwInit+0x98>)
 8002d00:	f7ff facc 	bl	800229c <logPrintf>
  logPrintf("\n");
 8002d04:	480a      	ldr	r0, [pc, #40]	@ (8002d30 <hwInit+0x9c>)
 8002d06:	f7ff fac9 	bl	800229c <logPrintf>


  return true;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	080098a4 	.word	0x080098a4
 8002d18:	080098c0 	.word	0x080098c0
 8002d1c:	080098d4 	.word	0x080098d4
 8002d20:	080098ec 	.word	0x080098ec
 8002d24:	080098f4 	.word	0x080098f4
 8002d28:	431bde83 	.word	0x431bde83
 8002d2c:	0800990c 	.word	0x0800990c
 8002d30:	08009928 	.word	0x08009928

08002d34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d78 <MX_DMA_Init+0x44>)
 8002d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d78 <MX_DMA_Init+0x44>)
 8002d40:	f043 0304 	orr.w	r3, r3, #4
 8002d44:	6493      	str	r3, [r2, #72]	@ 0x48
 8002d46:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <MX_DMA_Init+0x44>)
 8002d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	607b      	str	r3, [r7, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d52:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <MX_DMA_Init+0x44>)
 8002d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d56:	4a08      	ldr	r2, [pc, #32]	@ (8002d78 <MX_DMA_Init+0x44>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <MX_DMA_Init+0x44>)
 8002d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]

}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000

08002d7c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA4   ------> SPI1_NSS
*/
void MX_GPIO_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
 8002d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d92:	4b2d      	ldr	r3, [pc, #180]	@ (8002e48 <MX_GPIO_Init+0xcc>)
 8002d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d96:	4a2c      	ldr	r2, [pc, #176]	@ (8002e48 <MX_GPIO_Init+0xcc>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e48 <MX_GPIO_Init+0xcc>)
 8002da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002daa:	4b27      	ldr	r3, [pc, #156]	@ (8002e48 <MX_GPIO_Init+0xcc>)
 8002dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dae:	4a26      	ldr	r2, [pc, #152]	@ (8002e48 <MX_GPIO_Init+0xcc>)
 8002db0:	f043 0320 	orr.w	r3, r3, #32
 8002db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002db6:	4b24      	ldr	r3, [pc, #144]	@ (8002e48 <MX_GPIO_Init+0xcc>)
 8002db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc2:	4b21      	ldr	r3, [pc, #132]	@ (8002e48 <MX_GPIO_Init+0xcc>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc6:	4a20      	ldr	r2, [pc, #128]	@ (8002e48 <MX_GPIO_Init+0xcc>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dce:	4b1e      	ldr	r3, [pc, #120]	@ (8002e48 <MX_GPIO_Init+0xcc>)
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dda:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <MX_GPIO_Init+0xcc>)
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dde:	4a1a      	ldr	r2, [pc, #104]	@ (8002e48 <MX_GPIO_Init+0xcc>)
 8002de0:	f043 0302 	orr.w	r3, r3, #2
 8002de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002de6:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <MX_GPIO_Init+0xcc>)
 8002de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002df2:	2200      	movs	r2, #0
 8002df4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002df8:	4814      	ldr	r0, [pc, #80]	@ (8002e4c <MX_GPIO_Init+0xd0>)
 8002dfa:	f001 f90d 	bl	8004018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002dfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e04:	2301      	movs	r3, #1
 8002e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002e10:	f107 0314 	add.w	r3, r7, #20
 8002e14:	4619      	mov	r1, r3
 8002e16:	480d      	ldr	r0, [pc, #52]	@ (8002e4c <MX_GPIO_Init+0xd0>)
 8002e18:	f000 fe9a 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e2c:	2305      	movs	r3, #5
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	4619      	mov	r1, r3
 8002e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e3a:	f000 fe89 	bl	8003b50 <HAL_GPIO_Init>

}
 8002e3e:	bf00      	nop
 8002e40:	3728      	adds	r7, #40	@ 0x28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	48000800 	.word	0x48000800

08002e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e54:	f000 faab 	bl	80033ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e58:	f000 f80e 	bl	8002e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e5c:	f7ff ff8e 	bl	8002d7c <MX_GPIO_Init>
  MX_DMA_Init();
 8002e60:	f7ff ff68 	bl	8002d34 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002e64:	f000 f984 	bl	8003170 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  hwInit();
 8002e68:	f7ff ff14 	bl	8002c94 <hwInit>
  apInit();
 8002e6c:	f7fe f8c2 	bl	8000ff4 <apInit>
  apMain();
 8002e70:	f7fe f8cc 	bl	800100c <apMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <main+0x24>

08002e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b094      	sub	sp, #80	@ 0x50
 8002e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e7e:	f107 0318 	add.w	r3, r7, #24
 8002e82:	2238      	movs	r2, #56	@ 0x38
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f004 fae4 	bl	8007454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	60da      	str	r2, [r3, #12]
 8002e98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e9a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002e9e:	f001 f8ed 	bl	800407c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ea6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002eaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eac:	2302      	movs	r3, #2
 8002eae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8002eb8:	234b      	movs	r3, #75	@ 0x4b
 8002eba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ec8:	f107 0318 	add.w	r3, r7, #24
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 f989 	bl	80041e4 <HAL_RCC_OscConfig>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002ed8:	f000 f818 	bl	8002f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002edc:	230f      	movs	r3, #15
 8002ede:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f001 fc87 	bl	8004808 <HAL_RCC_ClockConfig>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002f00:	f000 f804 	bl	8002f0c <Error_Handler>
  }
}
 8002f04:	bf00      	nop
 8002f06:	3750      	adds	r7, #80	@ 0x50
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f10:	b672      	cpsid	i
}
 8002f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f14:	bf00      	nop
 8002f16:	e7fd      	b.n	8002f14 <Error_Handler+0x8>

08002f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f5c <HAL_MspInit+0x44>)
 8002f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f22:	4a0e      	ldr	r2, [pc, #56]	@ (8002f5c <HAL_MspInit+0x44>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <HAL_MspInit+0x44>)
 8002f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	4b09      	ldr	r3, [pc, #36]	@ (8002f5c <HAL_MspInit+0x44>)
 8002f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3a:	4a08      	ldr	r2, [pc, #32]	@ (8002f5c <HAL_MspInit+0x44>)
 8002f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f42:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <HAL_MspInit+0x44>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002f4e:	f001 f939 	bl	80041c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000

08002f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <NMI_Handler+0x4>

08002f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f6c:	bf00      	nop
 8002f6e:	e7fd      	b.n	8002f6c <HardFault_Handler+0x4>

08002f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <MemManage_Handler+0x4>

08002f78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <BusFault_Handler+0x4>

08002f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <UsageFault_Handler+0x4>

08002f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb6:	f000 fa4d 	bl	8003454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	af00      	add	r7, sp, #0
  return 1;
 8002fc2:	2301      	movs	r3, #1
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <_kill>:

int _kill(int pid, int sig)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fd8:	f004 fac8 	bl	800756c <__errno>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2216      	movs	r2, #22
 8002fe0:	601a      	str	r2, [r3, #0]
  return -1;
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <_exit>:

void _exit (int status)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ff6:	f04f 31ff 	mov.w	r1, #4294967295
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ffe7 	bl	8002fce <_kill>
  while (1) {}    /* Make sure we hang here */
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <_exit+0x12>

08003004 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	e00a      	b.n	800302c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003016:	f3af 8000 	nop.w
 800301a:	4601      	mov	r1, r0
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	60ba      	str	r2, [r7, #8]
 8003022:	b2ca      	uxtb	r2, r1
 8003024:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	3301      	adds	r3, #1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	429a      	cmp	r2, r3
 8003032:	dbf0      	blt.n	8003016 <_read+0x12>
  }

  return len;
 8003034:	687b      	ldr	r3, [r7, #4]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	e009      	b.n	8003064 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	60ba      	str	r2, [r7, #8]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	3301      	adds	r3, #1
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	429a      	cmp	r2, r3
 800306a:	dbf1      	blt.n	8003050 <_write+0x12>
  }
  return len;
 800306c:	687b      	ldr	r3, [r7, #4]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <_close>:

int _close(int file)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800309e:	605a      	str	r2, [r3, #4]
  return 0;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <_isatty>:

int _isatty(int file)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030b6:	2301      	movs	r3, #1
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030e8:	4a14      	ldr	r2, [pc, #80]	@ (800313c <_sbrk+0x5c>)
 80030ea:	4b15      	ldr	r3, [pc, #84]	@ (8003140 <_sbrk+0x60>)
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030f4:	4b13      	ldr	r3, [pc, #76]	@ (8003144 <_sbrk+0x64>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030fc:	4b11      	ldr	r3, [pc, #68]	@ (8003144 <_sbrk+0x64>)
 80030fe:	4a12      	ldr	r2, [pc, #72]	@ (8003148 <_sbrk+0x68>)
 8003100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003102:	4b10      	ldr	r3, [pc, #64]	@ (8003144 <_sbrk+0x64>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	429a      	cmp	r2, r3
 800310e:	d207      	bcs.n	8003120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003110:	f004 fa2c 	bl	800756c <__errno>
 8003114:	4603      	mov	r3, r0
 8003116:	220c      	movs	r2, #12
 8003118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800311a:	f04f 33ff 	mov.w	r3, #4294967295
 800311e:	e009      	b.n	8003134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003120:	4b08      	ldr	r3, [pc, #32]	@ (8003144 <_sbrk+0x64>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003126:	4b07      	ldr	r3, [pc, #28]	@ (8003144 <_sbrk+0x64>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	4a05      	ldr	r2, [pc, #20]	@ (8003144 <_sbrk+0x64>)
 8003130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003132:	68fb      	ldr	r3, [r7, #12]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20008000 	.word	0x20008000
 8003140:	00000400 	.word	0x00000400
 8003144:	200025d8 	.word	0x200025d8
 8003148:	20002820 	.word	0x20002820

0800314c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003150:	4b06      	ldr	r3, [pc, #24]	@ (800316c <SystemInit+0x20>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003156:	4a05      	ldr	r2, [pc, #20]	@ (800316c <SystemInit+0x20>)
 8003158:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800315c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003174:	4b22      	ldr	r3, [pc, #136]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 8003176:	4a23      	ldr	r2, [pc, #140]	@ (8003204 <MX_USART1_UART_Init+0x94>)
 8003178:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800317a:	4b21      	ldr	r3, [pc, #132]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 800317c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003180:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003182:	4b1f      	ldr	r3, [pc, #124]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003188:	4b1d      	ldr	r3, [pc, #116]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 800318a:	2200      	movs	r2, #0
 800318c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800318e:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003194:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 8003196:	220c      	movs	r2, #12
 8003198:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800319a:	4b19      	ldr	r3, [pc, #100]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 800319c:	2200      	movs	r2, #0
 800319e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a0:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031a6:	4b16      	ldr	r3, [pc, #88]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031ac:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031b2:	4b13      	ldr	r3, [pc, #76]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031b8:	4811      	ldr	r0, [pc, #68]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 80031ba:	f001 ff31 	bl	8005020 <HAL_UART_Init>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80031c4:	f7ff fea2 	bl	8002f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031c8:	2100      	movs	r1, #0
 80031ca:	480d      	ldr	r0, [pc, #52]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 80031cc:	f003 f826 	bl	800621c <HAL_UARTEx_SetTxFifoThreshold>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80031d6:	f7ff fe99 	bl	8002f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031da:	2100      	movs	r1, #0
 80031dc:	4808      	ldr	r0, [pc, #32]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 80031de:	f003 f85b 	bl	8006298 <HAL_UARTEx_SetRxFifoThreshold>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80031e8:	f7ff fe90 	bl	8002f0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80031ec:	4804      	ldr	r0, [pc, #16]	@ (8003200 <MX_USART1_UART_Init+0x90>)
 80031ee:	f002 ffdc 	bl	80061aa <HAL_UARTEx_DisableFifoMode>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80031f8:	f7ff fe88 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031fc:	bf00      	nop
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	200025dc 	.word	0x200025dc
 8003204:	40013800 	.word	0x40013800

08003208 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b09a      	sub	sp, #104	@ 0x68
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003220:	f107 0310 	add.w	r3, r7, #16
 8003224:	2244      	movs	r2, #68	@ 0x44
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f004 f913 	bl	8007454 <memset>
  if(uartHandle->Instance==USART1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a33      	ldr	r2, [pc, #204]	@ (8003300 <HAL_UART_MspInit+0xf8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d15f      	bne.n	80032f8 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003238:	2301      	movs	r3, #1
 800323a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003240:	f107 0310 	add.w	r3, r7, #16
 8003244:	4618      	mov	r0, r3
 8003246:	f001 fcfb 	bl	8004c40 <HAL_RCCEx_PeriphCLKConfig>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003250:	f7ff fe5c 	bl	8002f0c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003254:	4b2b      	ldr	r3, [pc, #172]	@ (8003304 <HAL_UART_MspInit+0xfc>)
 8003256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003258:	4a2a      	ldr	r2, [pc, #168]	@ (8003304 <HAL_UART_MspInit+0xfc>)
 800325a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800325e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003260:	4b28      	ldr	r3, [pc, #160]	@ (8003304 <HAL_UART_MspInit+0xfc>)
 8003262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800326c:	4b25      	ldr	r3, [pc, #148]	@ (8003304 <HAL_UART_MspInit+0xfc>)
 800326e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003270:	4a24      	ldr	r2, [pc, #144]	@ (8003304 <HAL_UART_MspInit+0xfc>)
 8003272:	f043 0302 	orr.w	r3, r3, #2
 8003276:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003278:	4b22      	ldr	r3, [pc, #136]	@ (8003304 <HAL_UART_MspInit+0xfc>)
 800327a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003284:	23c0      	movs	r3, #192	@ 0xc0
 8003286:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003288:	2302      	movs	r3, #2
 800328a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	2300      	movs	r3, #0
 800328e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003290:	2300      	movs	r3, #0
 8003292:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003294:	2307      	movs	r3, #7
 8003296:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003298:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800329c:	4619      	mov	r1, r3
 800329e:	481a      	ldr	r0, [pc, #104]	@ (8003308 <HAL_UART_MspInit+0x100>)
 80032a0:	f000 fc56 	bl	8003b50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80032a4:	4b19      	ldr	r3, [pc, #100]	@ (800330c <HAL_UART_MspInit+0x104>)
 80032a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003310 <HAL_UART_MspInit+0x108>)
 80032a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80032aa:	4b18      	ldr	r3, [pc, #96]	@ (800330c <HAL_UART_MspInit+0x104>)
 80032ac:	2218      	movs	r2, #24
 80032ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032b0:	4b16      	ldr	r3, [pc, #88]	@ (800330c <HAL_UART_MspInit+0x104>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032b6:	4b15      	ldr	r3, [pc, #84]	@ (800330c <HAL_UART_MspInit+0x104>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032bc:	4b13      	ldr	r3, [pc, #76]	@ (800330c <HAL_UART_MspInit+0x104>)
 80032be:	2280      	movs	r2, #128	@ 0x80
 80032c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032c2:	4b12      	ldr	r3, [pc, #72]	@ (800330c <HAL_UART_MspInit+0x104>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032c8:	4b10      	ldr	r3, [pc, #64]	@ (800330c <HAL_UART_MspInit+0x104>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80032ce:	4b0f      	ldr	r3, [pc, #60]	@ (800330c <HAL_UART_MspInit+0x104>)
 80032d0:	2220      	movs	r2, #32
 80032d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032d4:	4b0d      	ldr	r3, [pc, #52]	@ (800330c <HAL_UART_MspInit+0x104>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80032da:	480c      	ldr	r0, [pc, #48]	@ (800330c <HAL_UART_MspInit+0x104>)
 80032dc:	f000 f9de 	bl	800369c <HAL_DMA_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80032e6:	f7ff fe11 	bl	8002f0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a07      	ldr	r2, [pc, #28]	@ (800330c <HAL_UART_MspInit+0x104>)
 80032ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80032f2:	4a06      	ldr	r2, [pc, #24]	@ (800330c <HAL_UART_MspInit+0x104>)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80032f8:	bf00      	nop
 80032fa:	3768      	adds	r7, #104	@ 0x68
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40013800 	.word	0x40013800
 8003304:	40021000 	.word	0x40021000
 8003308:	48000400 	.word	0x48000400
 800330c:	20002670 	.word	0x20002670
 8003310:	40020008 	.word	0x40020008

08003314 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0b      	ldr	r2, [pc, #44]	@ (8003350 <HAL_UART_MspDeInit+0x3c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d10f      	bne.n	8003346 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003326:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <HAL_UART_MspDeInit+0x40>)
 8003328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800332a:	4a0a      	ldr	r2, [pc, #40]	@ (8003354 <HAL_UART_MspDeInit+0x40>)
 800332c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003330:	6613      	str	r3, [r2, #96]	@ 0x60

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8003332:	21c0      	movs	r1, #192	@ 0xc0
 8003334:	4808      	ldr	r0, [pc, #32]	@ (8003358 <HAL_UART_MspDeInit+0x44>)
 8003336:	f000 fd8d 	bl	8003e54 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fa53 	bl	80037ec <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40013800 	.word	0x40013800
 8003354:	40021000 	.word	0x40021000
 8003358:	48000400 	.word	0x48000400

0800335c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800335c:	480d      	ldr	r0, [pc, #52]	@ (8003394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800335e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003360:	f7ff fef4 	bl	800314c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003364:	480c      	ldr	r0, [pc, #48]	@ (8003398 <LoopForever+0x6>)
  ldr r1, =_edata
 8003366:	490d      	ldr	r1, [pc, #52]	@ (800339c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003368:	4a0d      	ldr	r2, [pc, #52]	@ (80033a0 <LoopForever+0xe>)
  movs r3, #0
 800336a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800336c:	e002      	b.n	8003374 <LoopCopyDataInit>

0800336e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800336e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003372:	3304      	adds	r3, #4

08003374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003378:	d3f9      	bcc.n	800336e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800337a:	4a0a      	ldr	r2, [pc, #40]	@ (80033a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800337c:	4c0a      	ldr	r4, [pc, #40]	@ (80033a8 <LoopForever+0x16>)
  movs r3, #0
 800337e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003380:	e001      	b.n	8003386 <LoopFillZerobss>

08003382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003384:	3204      	adds	r2, #4

08003386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003388:	d3fb      	bcc.n	8003382 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800338a:	f004 f8f5 	bl	8007578 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800338e:	f7ff fd5f 	bl	8002e50 <main>

08003392 <LoopForever>:

LoopForever:
    b LoopForever
 8003392:	e7fe      	b.n	8003392 <LoopForever>
  ldr   r0, =_estack
 8003394:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800339c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80033a0:	08009d58 	.word	0x08009d58
  ldr r2, =_sbss
 80033a4:	2000060c 	.word	0x2000060c
  ldr r4, =_ebss
 80033a8:	20002820 	.word	0x20002820

080033ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033ac:	e7fe      	b.n	80033ac <ADC1_2_IRQHandler>

080033ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b8:	2003      	movs	r0, #3
 80033ba:	f000 f93d 	bl	8003638 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033be:	200f      	movs	r0, #15
 80033c0:	f000 f80e 	bl	80033e0 <HAL_InitTick>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	71fb      	strb	r3, [r7, #7]
 80033ce:	e001      	b.n	80033d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033d0:	f7ff fda2 	bl	8002f18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033d4:	79fb      	ldrb	r3, [r7, #7]

}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80033ec:	4b16      	ldr	r3, [pc, #88]	@ (8003448 <HAL_InitTick+0x68>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d022      	beq.n	800343a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80033f4:	4b15      	ldr	r3, [pc, #84]	@ (800344c <HAL_InitTick+0x6c>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b13      	ldr	r3, [pc, #76]	@ (8003448 <HAL_InitTick+0x68>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003400:	fbb1 f3f3 	udiv	r3, r1, r3
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	4618      	mov	r0, r3
 800340a:	f000 f93a 	bl	8003682 <HAL_SYSTICK_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10f      	bne.n	8003434 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b0f      	cmp	r3, #15
 8003418:	d809      	bhi.n	800342e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800341a:	2200      	movs	r2, #0
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	f04f 30ff 	mov.w	r0, #4294967295
 8003422:	f000 f914 	bl	800364e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003426:	4a0a      	ldr	r2, [pc, #40]	@ (8003450 <HAL_InitTick+0x70>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e007      	b.n	800343e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
 8003432:	e004      	b.n	800343e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e001      	b.n	800343e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000014 	.word	0x20000014
 800344c:	2000000c 	.word	0x2000000c
 8003450:	20000010 	.word	0x20000010

08003454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <HAL_IncTick+0x1c>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <HAL_IncTick+0x20>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4413      	add	r3, r2
 8003462:	4a03      	ldr	r2, [pc, #12]	@ (8003470 <HAL_IncTick+0x1c>)
 8003464:	6013      	str	r3, [r2, #0]
}
 8003466:	bf00      	nop
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	200026d0 	.word	0x200026d0
 8003474:	20000014 	.word	0x20000014

08003478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return uwTick;
 800347c:	4b03      	ldr	r3, [pc, #12]	@ (800348c <HAL_GetTick+0x14>)
 800347e:	681b      	ldr	r3, [r3, #0]
}
 8003480:	4618      	mov	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	200026d0 	.word	0x200026d0

08003490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003498:	f7ff ffee 	bl	8003478 <HAL_GetTick>
 800349c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d004      	beq.n	80034b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80034aa:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <HAL_Delay+0x40>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4413      	add	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034b4:	bf00      	nop
 80034b6:	f7ff ffdf 	bl	8003478 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d8f7      	bhi.n	80034b6 <HAL_Delay+0x26>
  {
  }
}
 80034c6:	bf00      	nop
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000014 	.word	0x20000014

080034d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003518 <__NVIC_SetPriorityGrouping+0x44>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034f0:	4013      	ands	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003506:	4a04      	ldr	r2, [pc, #16]	@ (8003518 <__NVIC_SetPriorityGrouping+0x44>)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	60d3      	str	r3, [r2, #12]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003520:	4b04      	ldr	r3, [pc, #16]	@ (8003534 <__NVIC_GetPriorityGrouping+0x18>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	f003 0307 	and.w	r3, r3, #7
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	2b00      	cmp	r3, #0
 800354a:	db0a      	blt.n	8003562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	490c      	ldr	r1, [pc, #48]	@ (8003584 <__NVIC_SetPriority+0x4c>)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	440b      	add	r3, r1
 800355c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003560:	e00a      	b.n	8003578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4908      	ldr	r1, [pc, #32]	@ (8003588 <__NVIC_SetPriority+0x50>)
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	3b04      	subs	r3, #4
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	440b      	add	r3, r1
 8003576:	761a      	strb	r2, [r3, #24]
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000e100 	.word	0xe000e100
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	@ 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f1c3 0307 	rsb	r3, r3, #7
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	bf28      	it	cs
 80035aa:	2304      	movcs	r3, #4
 80035ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d902      	bls.n	80035bc <NVIC_EncodePriority+0x30>
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3b03      	subs	r3, #3
 80035ba:	e000      	b.n	80035be <NVIC_EncodePriority+0x32>
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	401a      	ands	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d4:	f04f 31ff 	mov.w	r1, #4294967295
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	43d9      	mvns	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	4313      	orrs	r3, r2
         );
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3724      	adds	r7, #36	@ 0x24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003604:	d301      	bcc.n	800360a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003606:	2301      	movs	r3, #1
 8003608:	e00f      	b.n	800362a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360a:	4a0a      	ldr	r2, [pc, #40]	@ (8003634 <SysTick_Config+0x40>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003612:	210f      	movs	r1, #15
 8003614:	f04f 30ff 	mov.w	r0, #4294967295
 8003618:	f7ff ff8e 	bl	8003538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800361c:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <SysTick_Config+0x40>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003622:	4b04      	ldr	r3, [pc, #16]	@ (8003634 <SysTick_Config+0x40>)
 8003624:	2207      	movs	r2, #7
 8003626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	e000e010 	.word	0xe000e010

08003638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff47 	bl	80034d4 <__NVIC_SetPriorityGrouping>
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800365c:	f7ff ff5e 	bl	800351c <__NVIC_GetPriorityGrouping>
 8003660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	6978      	ldr	r0, [r7, #20]
 8003668:	f7ff ff90 	bl	800358c <NVIC_EncodePriority>
 800366c:	4602      	mov	r2, r0
 800366e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff5f 	bl	8003538 <__NVIC_SetPriority>
}
 800367a:	bf00      	nop
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ffb2 	bl	80035f4 <SysTick_Config>
 8003690:	4603      	mov	r3, r0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e08d      	b.n	80037ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b47      	ldr	r3, [pc, #284]	@ (80037d4 <HAL_DMA_Init+0x138>)
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d80f      	bhi.n	80036da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	4b45      	ldr	r3, [pc, #276]	@ (80037d8 <HAL_DMA_Init+0x13c>)
 80036c2:	4413      	add	r3, r2
 80036c4:	4a45      	ldr	r2, [pc, #276]	@ (80037dc <HAL_DMA_Init+0x140>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	009a      	lsls	r2, r3, #2
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a42      	ldr	r2, [pc, #264]	@ (80037e0 <HAL_DMA_Init+0x144>)
 80036d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80036d8:	e00e      	b.n	80036f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	4b40      	ldr	r3, [pc, #256]	@ (80037e4 <HAL_DMA_Init+0x148>)
 80036e2:	4413      	add	r3, r2
 80036e4:	4a3d      	ldr	r2, [pc, #244]	@ (80037dc <HAL_DMA_Init+0x140>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	009a      	lsls	r2, r3, #2
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a3c      	ldr	r2, [pc, #240]	@ (80037e8 <HAL_DMA_Init+0x14c>)
 80036f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800370e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003712:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800371c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003728:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003734:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f99e 	bl	8003a8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003758:	d102      	bne.n	8003760 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003774:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d010      	beq.n	80037a0 <HAL_DMA_Init+0x104>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b04      	cmp	r3, #4
 8003784:	d80c      	bhi.n	80037a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f9be 	bl	8003b08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	e008      	b.n	80037b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40020407 	.word	0x40020407
 80037d8:	bffdfff8 	.word	0xbffdfff8
 80037dc:	cccccccd 	.word	0xcccccccd
 80037e0:	40020000 	.word	0x40020000
 80037e4:	bffdfbf8 	.word	0xbffdfbf8
 80037e8:	40020400 	.word	0x40020400

080037ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e07b      	b.n	80038f6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	4b3a      	ldr	r3, [pc, #232]	@ (8003900 <HAL_DMA_DeInit+0x114>)
 8003816:	429a      	cmp	r2, r3
 8003818:	d80f      	bhi.n	800383a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	4b38      	ldr	r3, [pc, #224]	@ (8003904 <HAL_DMA_DeInit+0x118>)
 8003822:	4413      	add	r3, r2
 8003824:	4a38      	ldr	r2, [pc, #224]	@ (8003908 <HAL_DMA_DeInit+0x11c>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	009a      	lsls	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a35      	ldr	r2, [pc, #212]	@ (800390c <HAL_DMA_DeInit+0x120>)
 8003836:	641a      	str	r2, [r3, #64]	@ 0x40
 8003838:	e00e      	b.n	8003858 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	4b33      	ldr	r3, [pc, #204]	@ (8003910 <HAL_DMA_DeInit+0x124>)
 8003842:	4413      	add	r3, r2
 8003844:	4a30      	ldr	r2, [pc, #192]	@ (8003908 <HAL_DMA_DeInit+0x11c>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	009a      	lsls	r2, r3, #2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a2f      	ldr	r2, [pc, #188]	@ (8003914 <HAL_DMA_DeInit+0x128>)
 8003856:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003864:	f003 021f 	and.w	r2, r3, #31
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386c:	2101      	movs	r1, #1
 800386e:	fa01 f202 	lsl.w	r2, r1, r2
 8003872:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f909 	bl	8003a8c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800388a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00f      	beq.n	80038b4 <HAL_DMA_DeInit+0xc8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b04      	cmp	r3, #4
 800389a:	d80b      	bhi.n	80038b4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f933 	bl	8003b08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038b2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40020407 	.word	0x40020407
 8003904:	bffdfff8 	.word	0xbffdfff8
 8003908:	cccccccd 	.word	0xcccccccd
 800390c:	40020000 	.word	0x40020000
 8003910:	bffdfbf8 	.word	0xbffdfbf8
 8003914:	40020400 	.word	0x40020400

08003918 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_DMA_Start_IT+0x20>
 8003934:	2302      	movs	r3, #2
 8003936:	e066      	b.n	8003a06 <HAL_DMA_Start_IT+0xee>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	d155      	bne.n	80039f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0201 	bic.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f84c 	bl	8003a0e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 020e 	orr.w	r2, r2, #14
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	e00f      	b.n	80039b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0204 	bic.w	r2, r2, #4
 800399e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 020a 	orr.w	r2, r2, #10
 80039ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0201 	orr.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e005      	b.n	8003a04 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
 8003a02:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
 8003a1a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a24:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d004      	beq.n	8003a38 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a36:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3c:	f003 021f 	and.w	r2, r3, #31
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	2101      	movs	r1, #1
 8003a46:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d108      	bne.n	8003a6e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a6c:	e007      	b.n	8003a7e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	60da      	str	r2, [r3, #12]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b16      	ldr	r3, [pc, #88]	@ (8003af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d802      	bhi.n	8003aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003aa0:	4b15      	ldr	r3, [pc, #84]	@ (8003af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	e001      	b.n	8003aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003aa6:	4b15      	ldr	r3, [pc, #84]	@ (8003afc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003aa8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	3b08      	subs	r3, #8
 8003ab6:	4a12      	ldr	r2, [pc, #72]	@ (8003b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	009a      	lsls	r2, r3, #2
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	461a      	mov	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8003b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ad6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	2201      	movs	r2, #1
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40020407 	.word	0x40020407
 8003af8:	40020800 	.word	0x40020800
 8003afc:	40020820 	.word	0x40020820
 8003b00:	cccccccd 	.word	0xcccccccd
 8003b04:	40020880 	.word	0x40020880

08003b08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	461a      	mov	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a08      	ldr	r2, [pc, #32]	@ (8003b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b2a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2201      	movs	r2, #1
 8003b36:	409a      	lsls	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	1000823f 	.word	0x1000823f
 8003b4c:	40020940 	.word	0x40020940

08003b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b5e:	e15a      	b.n	8003e16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	2101      	movs	r1, #1
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 814c 	beq.w	8003e10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d005      	beq.n	8003b90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d130      	bne.n	8003bf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 0201 	and.w	r2, r3, #1
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d017      	beq.n	8003c2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	2203      	movs	r2, #3
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4013      	ands	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d123      	bne.n	8003c82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	08da      	lsrs	r2, r3, #3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3208      	adds	r2, #8
 8003c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	220f      	movs	r2, #15
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	08da      	lsrs	r2, r3, #3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3208      	adds	r2, #8
 8003c7c:	6939      	ldr	r1, [r7, #16]
 8003c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 0203 	and.w	r2, r3, #3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 80a6 	beq.w	8003e10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc4:	4b5b      	ldr	r3, [pc, #364]	@ (8003e34 <HAL_GPIO_Init+0x2e4>)
 8003cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e34 <HAL_GPIO_Init+0x2e4>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cd0:	4b58      	ldr	r3, [pc, #352]	@ (8003e34 <HAL_GPIO_Init+0x2e4>)
 8003cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cdc:	4a56      	ldr	r2, [pc, #344]	@ (8003e38 <HAL_GPIO_Init+0x2e8>)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	089b      	lsrs	r3, r3, #2
 8003ce2:	3302      	adds	r3, #2
 8003ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	220f      	movs	r2, #15
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d06:	d01f      	beq.n	8003d48 <HAL_GPIO_Init+0x1f8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a4c      	ldr	r2, [pc, #304]	@ (8003e3c <HAL_GPIO_Init+0x2ec>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d019      	beq.n	8003d44 <HAL_GPIO_Init+0x1f4>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a4b      	ldr	r2, [pc, #300]	@ (8003e40 <HAL_GPIO_Init+0x2f0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d013      	beq.n	8003d40 <HAL_GPIO_Init+0x1f0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e44 <HAL_GPIO_Init+0x2f4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00d      	beq.n	8003d3c <HAL_GPIO_Init+0x1ec>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a49      	ldr	r2, [pc, #292]	@ (8003e48 <HAL_GPIO_Init+0x2f8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d007      	beq.n	8003d38 <HAL_GPIO_Init+0x1e8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a48      	ldr	r2, [pc, #288]	@ (8003e4c <HAL_GPIO_Init+0x2fc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d101      	bne.n	8003d34 <HAL_GPIO_Init+0x1e4>
 8003d30:	2305      	movs	r3, #5
 8003d32:	e00a      	b.n	8003d4a <HAL_GPIO_Init+0x1fa>
 8003d34:	2306      	movs	r3, #6
 8003d36:	e008      	b.n	8003d4a <HAL_GPIO_Init+0x1fa>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	e006      	b.n	8003d4a <HAL_GPIO_Init+0x1fa>
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e004      	b.n	8003d4a <HAL_GPIO_Init+0x1fa>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e002      	b.n	8003d4a <HAL_GPIO_Init+0x1fa>
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <HAL_GPIO_Init+0x1fa>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	f002 0203 	and.w	r2, r2, #3
 8003d50:	0092      	lsls	r2, r2, #2
 8003d52:	4093      	lsls	r3, r2
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d5a:	4937      	ldr	r1, [pc, #220]	@ (8003e38 <HAL_GPIO_Init+0x2e8>)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	089b      	lsrs	r3, r3, #2
 8003d60:	3302      	adds	r3, #2
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d68:	4b39      	ldr	r3, [pc, #228]	@ (8003e50 <HAL_GPIO_Init+0x300>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4013      	ands	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d8c:	4a30      	ldr	r2, [pc, #192]	@ (8003e50 <HAL_GPIO_Init+0x300>)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d92:	4b2f      	ldr	r3, [pc, #188]	@ (8003e50 <HAL_GPIO_Init+0x300>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003db6:	4a26      	ldr	r2, [pc, #152]	@ (8003e50 <HAL_GPIO_Init+0x300>)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003dbc:	4b24      	ldr	r3, [pc, #144]	@ (8003e50 <HAL_GPIO_Init+0x300>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003de0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e50 <HAL_GPIO_Init+0x300>)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003de6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e50 <HAL_GPIO_Init+0x300>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4013      	ands	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e0a:	4a11      	ldr	r2, [pc, #68]	@ (8003e50 <HAL_GPIO_Init+0x300>)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	3301      	adds	r3, #1
 8003e14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f47f ae9d 	bne.w	8003b60 <HAL_GPIO_Init+0x10>
  }
}
 8003e26:	bf00      	nop
 8003e28:	bf00      	nop
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40010000 	.word	0x40010000
 8003e3c:	48000400 	.word	0x48000400
 8003e40:	48000800 	.word	0x48000800
 8003e44:	48000c00 	.word	0x48000c00
 8003e48:	48001000 	.word	0x48001000
 8003e4c:	48001400 	.word	0x48001400
 8003e50:	40010400 	.word	0x40010400

08003e54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003e62:	e0bd      	b.n	8003fe0 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003e64:	2201      	movs	r2, #1
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 80b0 	beq.w	8003fda <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8003e7a:	4a60      	ldr	r2, [pc, #384]	@ (8003ffc <HAL_GPIO_DeInit+0x1a8>)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	3302      	adds	r3, #2
 8003e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e86:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	220f      	movs	r2, #15
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ea2:	d01f      	beq.n	8003ee4 <HAL_GPIO_DeInit+0x90>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a56      	ldr	r2, [pc, #344]	@ (8004000 <HAL_GPIO_DeInit+0x1ac>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d019      	beq.n	8003ee0 <HAL_GPIO_DeInit+0x8c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a55      	ldr	r2, [pc, #340]	@ (8004004 <HAL_GPIO_DeInit+0x1b0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <HAL_GPIO_DeInit+0x88>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a54      	ldr	r2, [pc, #336]	@ (8004008 <HAL_GPIO_DeInit+0x1b4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00d      	beq.n	8003ed8 <HAL_GPIO_DeInit+0x84>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a53      	ldr	r2, [pc, #332]	@ (800400c <HAL_GPIO_DeInit+0x1b8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d007      	beq.n	8003ed4 <HAL_GPIO_DeInit+0x80>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a52      	ldr	r2, [pc, #328]	@ (8004010 <HAL_GPIO_DeInit+0x1bc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d101      	bne.n	8003ed0 <HAL_GPIO_DeInit+0x7c>
 8003ecc:	2305      	movs	r3, #5
 8003ece:	e00a      	b.n	8003ee6 <HAL_GPIO_DeInit+0x92>
 8003ed0:	2306      	movs	r3, #6
 8003ed2:	e008      	b.n	8003ee6 <HAL_GPIO_DeInit+0x92>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	e006      	b.n	8003ee6 <HAL_GPIO_DeInit+0x92>
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e004      	b.n	8003ee6 <HAL_GPIO_DeInit+0x92>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e002      	b.n	8003ee6 <HAL_GPIO_DeInit+0x92>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e000      	b.n	8003ee6 <HAL_GPIO_DeInit+0x92>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	f002 0203 	and.w	r2, r2, #3
 8003eec:	0092      	lsls	r2, r2, #2
 8003eee:	4093      	lsls	r3, r2
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d132      	bne.n	8003f5c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003ef6:	4b47      	ldr	r3, [pc, #284]	@ (8004014 <HAL_GPIO_DeInit+0x1c0>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	43db      	mvns	r3, r3
 8003efe:	4945      	ldr	r1, [pc, #276]	@ (8004014 <HAL_GPIO_DeInit+0x1c0>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003f04:	4b43      	ldr	r3, [pc, #268]	@ (8004014 <HAL_GPIO_DeInit+0x1c0>)
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	4941      	ldr	r1, [pc, #260]	@ (8004014 <HAL_GPIO_DeInit+0x1c0>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003f12:	4b40      	ldr	r3, [pc, #256]	@ (8004014 <HAL_GPIO_DeInit+0x1c0>)
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	493e      	ldr	r1, [pc, #248]	@ (8004014 <HAL_GPIO_DeInit+0x1c0>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003f20:	4b3c      	ldr	r3, [pc, #240]	@ (8004014 <HAL_GPIO_DeInit+0x1c0>)
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	43db      	mvns	r3, r3
 8003f28:	493a      	ldr	r1, [pc, #232]	@ (8004014 <HAL_GPIO_DeInit+0x1c0>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	220f      	movs	r2, #15
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8003ffc <HAL_GPIO_DeInit+0x1a8>)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	089b      	lsrs	r3, r3, #2
 8003f44:	3302      	adds	r3, #2
 8003f46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	43da      	mvns	r2, r3
 8003f4e:	482b      	ldr	r0, [pc, #172]	@ (8003ffc <HAL_GPIO_DeInit+0x1a8>)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	400a      	ands	r2, r1
 8003f56:	3302      	adds	r3, #2
 8003f58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	2103      	movs	r1, #3
 8003f66:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	08da      	lsrs	r2, r3, #3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3208      	adds	r2, #8
 8003f78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	220f      	movs	r2, #15
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	08d2      	lsrs	r2, r2, #3
 8003f90:	4019      	ands	r1, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3208      	adds	r2, #8
 8003f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	2103      	movs	r1, #3
 8003fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	401a      	ands	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	2103      	movs	r1, #3
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	401a      	ands	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f47f af3b 	bne.w	8003e64 <HAL_GPIO_DeInit+0x10>
  }
}
 8003fee:	bf00      	nop
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40010000 	.word	0x40010000
 8004000:	48000400 	.word	0x48000400
 8004004:	48000800 	.word	0x48000800
 8004008:	48000c00 	.word	0x48000c00
 800400c:	48001000 	.word	0x48001000
 8004010:	48001400 	.word	0x48001400
 8004014:	40010400 	.word	0x40010400

08004018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	807b      	strh	r3, [r7, #2]
 8004024:	4613      	mov	r3, r2
 8004026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004028:	787b      	ldrb	r3, [r7, #1]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800402e:	887a      	ldrh	r2, [r7, #2]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004034:	e002      	b.n	800403c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004036:	887a      	ldrh	r2, [r7, #2]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800405a:	887a      	ldrh	r2, [r7, #2]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4013      	ands	r3, r2
 8004060:	041a      	lsls	r2, r3, #16
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	43d9      	mvns	r1, r3
 8004066:	887b      	ldrh	r3, [r7, #2]
 8004068:	400b      	ands	r3, r1
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	619a      	str	r2, [r3, #24]
}
 8004070:	bf00      	nop
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d141      	bne.n	800410e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800408a:	4b4b      	ldr	r3, [pc, #300]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004096:	d131      	bne.n	80040fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004098:	4b47      	ldr	r3, [pc, #284]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800409e:	4a46      	ldr	r2, [pc, #280]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040a8:	4b43      	ldr	r3, [pc, #268]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040b0:	4a41      	ldr	r2, [pc, #260]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040b8:	4b40      	ldr	r3, [pc, #256]	@ (80041bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2232      	movs	r2, #50	@ 0x32
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	4a3f      	ldr	r2, [pc, #252]	@ (80041c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	0c9b      	lsrs	r3, r3, #18
 80040ca:	3301      	adds	r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ce:	e002      	b.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040d6:	4b38      	ldr	r3, [pc, #224]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e2:	d102      	bne.n	80040ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f2      	bne.n	80040d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040ea:	4b33      	ldr	r3, [pc, #204]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f6:	d158      	bne.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e057      	b.n	80041ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040fc:	4b2e      	ldr	r3, [pc, #184]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004102:	4a2d      	ldr	r2, [pc, #180]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004108:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800410c:	e04d      	b.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004114:	d141      	bne.n	800419a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004116:	4b28      	ldr	r3, [pc, #160]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800411e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004122:	d131      	bne.n	8004188 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004124:	4b24      	ldr	r3, [pc, #144]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800412a:	4a23      	ldr	r2, [pc, #140]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004130:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004134:	4b20      	ldr	r3, [pc, #128]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800413c:	4a1e      	ldr	r2, [pc, #120]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004142:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004144:	4b1d      	ldr	r3, [pc, #116]	@ (80041bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2232      	movs	r2, #50	@ 0x32
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	4a1c      	ldr	r2, [pc, #112]	@ (80041c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	0c9b      	lsrs	r3, r3, #18
 8004156:	3301      	adds	r3, #1
 8004158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800415a:	e002      	b.n	8004162 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3b01      	subs	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004162:	4b15      	ldr	r3, [pc, #84]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800416e:	d102      	bne.n	8004176 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f2      	bne.n	800415c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004176:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800417e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004182:	d112      	bne.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e011      	b.n	80041ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004188:	4b0b      	ldr	r3, [pc, #44]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800418e:	4a0a      	ldr	r2, [pc, #40]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004194:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004198:	e007      	b.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800419a:	4b07      	ldr	r3, [pc, #28]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041a2:	4a05      	ldr	r2, [pc, #20]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	40007000 	.word	0x40007000
 80041bc:	2000000c 	.word	0x2000000c
 80041c0:	431bde83 	.word	0x431bde83

080041c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80041c8:	4b05      	ldr	r3, [pc, #20]	@ (80041e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4a04      	ldr	r2, [pc, #16]	@ (80041e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041d2:	6093      	str	r3, [r2, #8]
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40007000 	.word	0x40007000

080041e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e2fe      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d075      	beq.n	80042ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004202:	4b97      	ldr	r3, [pc, #604]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800420c:	4b94      	ldr	r3, [pc, #592]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b0c      	cmp	r3, #12
 800421a:	d102      	bne.n	8004222 <HAL_RCC_OscConfig+0x3e>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b03      	cmp	r3, #3
 8004220:	d002      	beq.n	8004228 <HAL_RCC_OscConfig+0x44>
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d10b      	bne.n	8004240 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004228:	4b8d      	ldr	r3, [pc, #564]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d05b      	beq.n	80042ec <HAL_RCC_OscConfig+0x108>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d157      	bne.n	80042ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e2d9      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004248:	d106      	bne.n	8004258 <HAL_RCC_OscConfig+0x74>
 800424a:	4b85      	ldr	r3, [pc, #532]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a84      	ldr	r2, [pc, #528]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e01d      	b.n	8004294 <HAL_RCC_OscConfig+0xb0>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x98>
 8004262:	4b7f      	ldr	r3, [pc, #508]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a7e      	ldr	r2, [pc, #504]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 8004268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	4b7c      	ldr	r3, [pc, #496]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a7b      	ldr	r2, [pc, #492]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e00b      	b.n	8004294 <HAL_RCC_OscConfig+0xb0>
 800427c:	4b78      	ldr	r3, [pc, #480]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a77      	ldr	r2, [pc, #476]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 8004282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	4b75      	ldr	r3, [pc, #468]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a74      	ldr	r2, [pc, #464]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 800428e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d013      	beq.n	80042c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7ff f8ec 	bl	8003478 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a4:	f7ff f8e8 	bl	8003478 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	@ 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e29e      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0xc0>
 80042c2:	e014      	b.n	80042ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7ff f8d8 	bl	8003478 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042cc:	f7ff f8d4 	bl	8003478 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	@ 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e28a      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042de:	4b60      	ldr	r3, [pc, #384]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0xe8>
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d075      	beq.n	80043e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042fa:	4b59      	ldr	r3, [pc, #356]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004304:	4b56      	ldr	r3, [pc, #344]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b0c      	cmp	r3, #12
 8004312:	d102      	bne.n	800431a <HAL_RCC_OscConfig+0x136>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d002      	beq.n	8004320 <HAL_RCC_OscConfig+0x13c>
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b04      	cmp	r3, #4
 800431e:	d11f      	bne.n	8004360 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004320:	4b4f      	ldr	r3, [pc, #316]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_RCC_OscConfig+0x154>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e25d      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004338:	4b49      	ldr	r3, [pc, #292]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	061b      	lsls	r3, r3, #24
 8004346:	4946      	ldr	r1, [pc, #280]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 8004348:	4313      	orrs	r3, r2
 800434a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800434c:	4b45      	ldr	r3, [pc, #276]	@ (8004464 <HAL_RCC_OscConfig+0x280>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff f845 	bl	80033e0 <HAL_InitTick>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d043      	beq.n	80043e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e249      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d023      	beq.n	80043b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004368:	4b3d      	ldr	r3, [pc, #244]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a3c      	ldr	r2, [pc, #240]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 800436e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7ff f880 	bl	8003478 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800437c:	f7ff f87c 	bl	8003478 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e232      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800438e:	4b34      	ldr	r3, [pc, #208]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439a:	4b31      	ldr	r3, [pc, #196]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	061b      	lsls	r3, r3, #24
 80043a8:	492d      	ldr	r1, [pc, #180]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	604b      	str	r3, [r1, #4]
 80043ae:	e01a      	b.n	80043e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 80043b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7ff f85c 	bl	8003478 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c4:	f7ff f858 	bl	8003478 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e20e      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043d6:	4b22      	ldr	r3, [pc, #136]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x1e0>
 80043e2:	e000      	b.n	80043e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d041      	beq.n	8004476 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01c      	beq.n	8004434 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fa:	4b19      	ldr	r3, [pc, #100]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 80043fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004400:	4a17      	ldr	r2, [pc, #92]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440a:	f7ff f835 	bl	8003478 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004412:	f7ff f831 	bl	8003478 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e1e7      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004424:	4b0e      	ldr	r3, [pc, #56]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 8004426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0ef      	beq.n	8004412 <HAL_RCC_OscConfig+0x22e>
 8004432:	e020      	b.n	8004476 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004434:	4b0a      	ldr	r3, [pc, #40]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 8004436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800443a:	4a09      	ldr	r2, [pc, #36]	@ (8004460 <HAL_RCC_OscConfig+0x27c>)
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7ff f818 	bl	8003478 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800444a:	e00d      	b.n	8004468 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800444c:	f7ff f814 	bl	8003478 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d906      	bls.n	8004468 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e1ca      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000
 8004464:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004468:	4b8c      	ldr	r3, [pc, #560]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 800446a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1ea      	bne.n	800444c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 80a6 	beq.w	80045d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004484:	2300      	movs	r3, #0
 8004486:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004488:	4b84      	ldr	r3, [pc, #528]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 800448a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_OscConfig+0x2b4>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <HAL_RCC_OscConfig+0x2b6>
 8004498:	2300      	movs	r3, #0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00d      	beq.n	80044ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800449e:	4b7f      	ldr	r3, [pc, #508]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 80044a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a2:	4a7e      	ldr	r2, [pc, #504]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80044aa:	4b7c      	ldr	r3, [pc, #496]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 80044ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044b6:	2301      	movs	r3, #1
 80044b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ba:	4b79      	ldr	r3, [pc, #484]	@ (80046a0 <HAL_RCC_OscConfig+0x4bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d118      	bne.n	80044f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044c6:	4b76      	ldr	r3, [pc, #472]	@ (80046a0 <HAL_RCC_OscConfig+0x4bc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a75      	ldr	r2, [pc, #468]	@ (80046a0 <HAL_RCC_OscConfig+0x4bc>)
 80044cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d2:	f7fe ffd1 	bl	8003478 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044da:	f7fe ffcd 	bl	8003478 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e183      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ec:	4b6c      	ldr	r3, [pc, #432]	@ (80046a0 <HAL_RCC_OscConfig+0x4bc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d108      	bne.n	8004512 <HAL_RCC_OscConfig+0x32e>
 8004500:	4b66      	ldr	r3, [pc, #408]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004506:	4a65      	ldr	r2, [pc, #404]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004510:	e024      	b.n	800455c <HAL_RCC_OscConfig+0x378>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b05      	cmp	r3, #5
 8004518:	d110      	bne.n	800453c <HAL_RCC_OscConfig+0x358>
 800451a:	4b60      	ldr	r3, [pc, #384]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 800451c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004520:	4a5e      	ldr	r2, [pc, #376]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 8004522:	f043 0304 	orr.w	r3, r3, #4
 8004526:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800452a:	4b5c      	ldr	r3, [pc, #368]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 800452c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004530:	4a5a      	ldr	r2, [pc, #360]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800453a:	e00f      	b.n	800455c <HAL_RCC_OscConfig+0x378>
 800453c:	4b57      	ldr	r3, [pc, #348]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004542:	4a56      	ldr	r2, [pc, #344]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800454c:	4b53      	ldr	r3, [pc, #332]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004552:	4a52      	ldr	r2, [pc, #328]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 8004554:	f023 0304 	bic.w	r3, r3, #4
 8004558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d016      	beq.n	8004592 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fe ff88 	bl	8003478 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800456a:	e00a      	b.n	8004582 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456c:	f7fe ff84 	bl	8003478 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e138      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004582:	4b46      	ldr	r3, [pc, #280]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0ed      	beq.n	800456c <HAL_RCC_OscConfig+0x388>
 8004590:	e015      	b.n	80045be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004592:	f7fe ff71 	bl	8003478 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004598:	e00a      	b.n	80045b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459a:	f7fe ff6d 	bl	8003478 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e121      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045b0:	4b3a      	ldr	r3, [pc, #232]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1ed      	bne.n	800459a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045be:	7ffb      	ldrb	r3, [r7, #31]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d105      	bne.n	80045d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c4:	4b35      	ldr	r3, [pc, #212]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c8:	4a34      	ldr	r2, [pc, #208]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 80045ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d03c      	beq.n	8004656 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01c      	beq.n	800461e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045e4:	4b2d      	ldr	r3, [pc, #180]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 80045e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045ea:	4a2c      	ldr	r2, [pc, #176]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f4:	f7fe ff40 	bl	8003478 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045fc:	f7fe ff3c 	bl	8003478 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e0f2      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800460e:	4b23      	ldr	r3, [pc, #140]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 8004610:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0ef      	beq.n	80045fc <HAL_RCC_OscConfig+0x418>
 800461c:	e01b      	b.n	8004656 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800461e:	4b1f      	ldr	r3, [pc, #124]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 8004620:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004624:	4a1d      	ldr	r2, [pc, #116]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462e:	f7fe ff23 	bl	8003478 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004636:	f7fe ff1f 	bl	8003478 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e0d5      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004648:	4b14      	ldr	r3, [pc, #80]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 800464a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1ef      	bne.n	8004636 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80c9 	beq.w	80047f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004660:	4b0e      	ldr	r3, [pc, #56]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	2b0c      	cmp	r3, #12
 800466a:	f000 8083 	beq.w	8004774 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d15e      	bne.n	8004734 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004676:	4b09      	ldr	r3, [pc, #36]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a08      	ldr	r2, [pc, #32]	@ (800469c <HAL_RCC_OscConfig+0x4b8>)
 800467c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004682:	f7fe fef9 	bl	8003478 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004688:	e00c      	b.n	80046a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468a:	f7fe fef5 	bl	8003478 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d905      	bls.n	80046a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e0ab      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
 800469c:	40021000 	.word	0x40021000
 80046a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a4:	4b55      	ldr	r3, [pc, #340]	@ (80047fc <HAL_RCC_OscConfig+0x618>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ec      	bne.n	800468a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046b0:	4b52      	ldr	r3, [pc, #328]	@ (80047fc <HAL_RCC_OscConfig+0x618>)
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	4b52      	ldr	r3, [pc, #328]	@ (8004800 <HAL_RCC_OscConfig+0x61c>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6a11      	ldr	r1, [r2, #32]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046c0:	3a01      	subs	r2, #1
 80046c2:	0112      	lsls	r2, r2, #4
 80046c4:	4311      	orrs	r1, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80046ca:	0212      	lsls	r2, r2, #8
 80046cc:	4311      	orrs	r1, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80046d2:	0852      	lsrs	r2, r2, #1
 80046d4:	3a01      	subs	r2, #1
 80046d6:	0552      	lsls	r2, r2, #21
 80046d8:	4311      	orrs	r1, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046de:	0852      	lsrs	r2, r2, #1
 80046e0:	3a01      	subs	r2, #1
 80046e2:	0652      	lsls	r2, r2, #25
 80046e4:	4311      	orrs	r1, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046ea:	06d2      	lsls	r2, r2, #27
 80046ec:	430a      	orrs	r2, r1
 80046ee:	4943      	ldr	r1, [pc, #268]	@ (80047fc <HAL_RCC_OscConfig+0x618>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046f4:	4b41      	ldr	r3, [pc, #260]	@ (80047fc <HAL_RCC_OscConfig+0x618>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a40      	ldr	r2, [pc, #256]	@ (80047fc <HAL_RCC_OscConfig+0x618>)
 80046fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004700:	4b3e      	ldr	r3, [pc, #248]	@ (80047fc <HAL_RCC_OscConfig+0x618>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4a3d      	ldr	r2, [pc, #244]	@ (80047fc <HAL_RCC_OscConfig+0x618>)
 8004706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800470a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fe feb4 	bl	8003478 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004714:	f7fe feb0 	bl	8003478 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e066      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004726:	4b35      	ldr	r3, [pc, #212]	@ (80047fc <HAL_RCC_OscConfig+0x618>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x530>
 8004732:	e05e      	b.n	80047f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004734:	4b31      	ldr	r3, [pc, #196]	@ (80047fc <HAL_RCC_OscConfig+0x618>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a30      	ldr	r2, [pc, #192]	@ (80047fc <HAL_RCC_OscConfig+0x618>)
 800473a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800473e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fe fe9a 	bl	8003478 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004748:	f7fe fe96 	bl	8003478 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e04c      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800475a:	4b28      	ldr	r3, [pc, #160]	@ (80047fc <HAL_RCC_OscConfig+0x618>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004766:	4b25      	ldr	r3, [pc, #148]	@ (80047fc <HAL_RCC_OscConfig+0x618>)
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	4924      	ldr	r1, [pc, #144]	@ (80047fc <HAL_RCC_OscConfig+0x618>)
 800476c:	4b25      	ldr	r3, [pc, #148]	@ (8004804 <HAL_RCC_OscConfig+0x620>)
 800476e:	4013      	ands	r3, r2
 8004770:	60cb      	str	r3, [r1, #12]
 8004772:	e03e      	b.n	80047f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e039      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004780:	4b1e      	ldr	r3, [pc, #120]	@ (80047fc <HAL_RCC_OscConfig+0x618>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f003 0203 	and.w	r2, r3, #3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	429a      	cmp	r2, r3
 8004792:	d12c      	bne.n	80047ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479e:	3b01      	subs	r3, #1
 80047a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d123      	bne.n	80047ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d11b      	bne.n	80047ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d113      	bne.n	80047ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d0:	085b      	lsrs	r3, r3, #1
 80047d2:	3b01      	subs	r3, #1
 80047d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d109      	bne.n	80047ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	3b01      	subs	r3, #1
 80047e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d001      	beq.n	80047f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40021000 	.word	0x40021000
 8004800:	019f800c 	.word	0x019f800c
 8004804:	feeefffc 	.word	0xfeeefffc

08004808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e11e      	b.n	8004a5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004820:	4b91      	ldr	r3, [pc, #580]	@ (8004a68 <HAL_RCC_ClockConfig+0x260>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d910      	bls.n	8004850 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b8e      	ldr	r3, [pc, #568]	@ (8004a68 <HAL_RCC_ClockConfig+0x260>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 020f 	bic.w	r2, r3, #15
 8004836:	498c      	ldr	r1, [pc, #560]	@ (8004a68 <HAL_RCC_ClockConfig+0x260>)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b8a      	ldr	r3, [pc, #552]	@ (8004a68 <HAL_RCC_ClockConfig+0x260>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e106      	b.n	8004a5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d073      	beq.n	8004944 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d129      	bne.n	80048b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004864:	4b81      	ldr	r3, [pc, #516]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0f4      	b.n	8004a5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004874:	f000 f99e 	bl	8004bb4 <RCC_GetSysClockFreqFromPLLSource>
 8004878:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4a7c      	ldr	r2, [pc, #496]	@ (8004a70 <HAL_RCC_ClockConfig+0x268>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d93f      	bls.n	8004902 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004882:	4b7a      	ldr	r3, [pc, #488]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004896:	2b00      	cmp	r3, #0
 8004898:	d033      	beq.n	8004902 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d12f      	bne.n	8004902 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048a2:	4b72      	ldr	r3, [pc, #456]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048aa:	4a70      	ldr	r2, [pc, #448]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 80048ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048b2:	2380      	movs	r3, #128	@ 0x80
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	e024      	b.n	8004902 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d107      	bne.n	80048d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048c0:	4b6a      	ldr	r3, [pc, #424]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d109      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0c6      	b.n	8004a5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048d0:	4b66      	ldr	r3, [pc, #408]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0be      	b.n	8004a5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048e0:	f000 f8ce 	bl	8004a80 <HAL_RCC_GetSysClockFreq>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4a61      	ldr	r2, [pc, #388]	@ (8004a70 <HAL_RCC_ClockConfig+0x268>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d909      	bls.n	8004902 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ee:	4b5f      	ldr	r3, [pc, #380]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048f6:	4a5d      	ldr	r2, [pc, #372]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 80048f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048fe:	2380      	movs	r3, #128	@ 0x80
 8004900:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004902:	4b5a      	ldr	r3, [pc, #360]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f023 0203 	bic.w	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4957      	ldr	r1, [pc, #348]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 8004910:	4313      	orrs	r3, r2
 8004912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004914:	f7fe fdb0 	bl	8003478 <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	e00a      	b.n	8004932 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491c:	f7fe fdac 	bl	8003478 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e095      	b.n	8004a5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	4b4e      	ldr	r3, [pc, #312]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 020c 	and.w	r2, r3, #12
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	429a      	cmp	r2, r3
 8004942:	d1eb      	bne.n	800491c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d023      	beq.n	8004998 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800495c:	4b43      	ldr	r3, [pc, #268]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4a42      	ldr	r2, [pc, #264]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 8004962:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004966:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d007      	beq.n	8004984 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004974:	4b3d      	ldr	r3, [pc, #244]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800497c:	4a3b      	ldr	r2, [pc, #236]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 800497e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004982:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004984:	4b39      	ldr	r3, [pc, #228]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4936      	ldr	r1, [pc, #216]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
 8004996:	e008      	b.n	80049aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2b80      	cmp	r3, #128	@ 0x80
 800499c:	d105      	bne.n	80049aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800499e:	4b33      	ldr	r3, [pc, #204]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	4a32      	ldr	r2, [pc, #200]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 80049a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004a68 <HAL_RCC_ClockConfig+0x260>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d21d      	bcs.n	80049f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004a68 <HAL_RCC_ClockConfig+0x260>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f023 020f 	bic.w	r2, r3, #15
 80049c0:	4929      	ldr	r1, [pc, #164]	@ (8004a68 <HAL_RCC_ClockConfig+0x260>)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049c8:	f7fe fd56 	bl	8003478 <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d0:	f7fe fd52 	bl	8003478 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e03b      	b.n	8004a5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	4b20      	ldr	r3, [pc, #128]	@ (8004a68 <HAL_RCC_ClockConfig+0x260>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d1ed      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a00:	4b1a      	ldr	r3, [pc, #104]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4917      	ldr	r1, [pc, #92]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d009      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a1e:	4b13      	ldr	r3, [pc, #76]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	490f      	ldr	r1, [pc, #60]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a32:	f000 f825 	bl	8004a80 <HAL_RCC_GetSysClockFreq>
 8004a36:	4602      	mov	r2, r0
 8004a38:	4b0c      	ldr	r3, [pc, #48]	@ (8004a6c <HAL_RCC_ClockConfig+0x264>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	490c      	ldr	r1, [pc, #48]	@ (8004a74 <HAL_RCC_ClockConfig+0x26c>)
 8004a44:	5ccb      	ldrb	r3, [r1, r3]
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a78 <HAL_RCC_ClockConfig+0x270>)
 8004a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a52:	4b0a      	ldr	r3, [pc, #40]	@ (8004a7c <HAL_RCC_ClockConfig+0x274>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fcc2 	bl	80033e0 <HAL_InitTick>
 8004a5c:	4603      	mov	r3, r0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40022000 	.word	0x40022000
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	04c4b400 	.word	0x04c4b400
 8004a74:	0800994c 	.word	0x0800994c
 8004a78:	2000000c 	.word	0x2000000c
 8004a7c:	20000010 	.word	0x20000010

08004a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a86:	4b2c      	ldr	r3, [pc, #176]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d102      	bne.n	8004a98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a92:	4b2a      	ldr	r3, [pc, #168]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	e047      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a98:	4b27      	ldr	r3, [pc, #156]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 030c 	and.w	r3, r3, #12
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d102      	bne.n	8004aaa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004aa4:	4b26      	ldr	r3, [pc, #152]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	e03e      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004aaa:	4b23      	ldr	r3, [pc, #140]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b0c      	cmp	r3, #12
 8004ab4:	d136      	bne.n	8004b24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ab6:	4b20      	ldr	r3, [pc, #128]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	3301      	adds	r3, #1
 8004acc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d10c      	bne.n	8004aee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	4a16      	ldr	r2, [pc, #88]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ade:	68d2      	ldr	r2, [r2, #12]
 8004ae0:	0a12      	lsrs	r2, r2, #8
 8004ae2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	617b      	str	r3, [r7, #20]
      break;
 8004aec:	e00c      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004aee:	4a13      	ldr	r2, [pc, #76]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af6:	4a10      	ldr	r2, [pc, #64]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004af8:	68d2      	ldr	r2, [r2, #12]
 8004afa:	0a12      	lsrs	r2, r2, #8
 8004afc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b00:	fb02 f303 	mul.w	r3, r2, r3
 8004b04:	617b      	str	r3, [r7, #20]
      break;
 8004b06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b08:	4b0b      	ldr	r3, [pc, #44]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	0e5b      	lsrs	r3, r3, #25
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	3301      	adds	r3, #1
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	e001      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b28:	693b      	ldr	r3, [r7, #16]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	007a1200 	.word	0x007a1200

08004b44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b48:	4b03      	ldr	r3, [pc, #12]	@ (8004b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	2000000c 	.word	0x2000000c

08004b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b60:	f7ff fff0 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4904      	ldr	r1, [pc, #16]	@ (8004b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000
 8004b84:	0800995c 	.word	0x0800995c

08004b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b8c:	f7ff ffda 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0adb      	lsrs	r3, r3, #11
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4904      	ldr	r1, [pc, #16]	@ (8004bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	0800995c 	.word	0x0800995c

08004bb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bba:	4b1e      	ldr	r3, [pc, #120]	@ (8004c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	091b      	lsrs	r3, r3, #4
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	3301      	adds	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d10c      	bne.n	8004bf2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bd8:	4a17      	ldr	r2, [pc, #92]	@ (8004c38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	4a14      	ldr	r2, [pc, #80]	@ (8004c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004be2:	68d2      	ldr	r2, [r2, #12]
 8004be4:	0a12      	lsrs	r2, r2, #8
 8004be6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bea:	fb02 f303 	mul.w	r3, r2, r3
 8004bee:	617b      	str	r3, [r7, #20]
    break;
 8004bf0:	e00c      	b.n	8004c0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bf2:	4a12      	ldr	r2, [pc, #72]	@ (8004c3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8004c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bfc:	68d2      	ldr	r2, [r2, #12]
 8004bfe:	0a12      	lsrs	r2, r2, #8
 8004c00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c04:	fb02 f303 	mul.w	r3, r2, r3
 8004c08:	617b      	str	r3, [r7, #20]
    break;
 8004c0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c0c:	4b09      	ldr	r3, [pc, #36]	@ (8004c34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	0e5b      	lsrs	r3, r3, #25
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	3301      	adds	r3, #1
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c26:	687b      	ldr	r3, [r7, #4]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40021000 	.word	0x40021000
 8004c38:	007a1200 	.word	0x007a1200
 8004c3c:	00f42400 	.word	0x00f42400

08004c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c48:	2300      	movs	r3, #0
 8004c4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8098 	beq.w	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c62:	4b43      	ldr	r3, [pc, #268]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10d      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6e:	4b40      	ldr	r3, [pc, #256]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c72:	4a3f      	ldr	r2, [pc, #252]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c82:	60bb      	str	r3, [r7, #8]
 8004c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c86:	2301      	movs	r3, #1
 8004c88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c8a:	4b3a      	ldr	r3, [pc, #232]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a39      	ldr	r2, [pc, #228]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c96:	f7fe fbef 	bl	8003478 <HAL_GetTick>
 8004c9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c9c:	e009      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9e:	f7fe fbeb 	bl	8003478 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d902      	bls.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	74fb      	strb	r3, [r7, #19]
        break;
 8004cb0:	e005      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cb2:	4b30      	ldr	r3, [pc, #192]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0ef      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004cbe:	7cfb      	ldrb	r3, [r7, #19]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d159      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d01e      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d019      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ce0:	4b23      	ldr	r3, [pc, #140]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cec:	4b20      	ldr	r3, [pc, #128]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d02:	4a1b      	ldr	r2, [pc, #108]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d0c:	4a18      	ldr	r2, [pc, #96]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d016      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1e:	f7fe fbab 	bl	8003478 <HAL_GetTick>
 8004d22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d24:	e00b      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d26:	f7fe fba7 	bl	8003478 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d902      	bls.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	74fb      	strb	r3, [r7, #19]
            break;
 8004d3c:	e006      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0ec      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d4c:	7cfb      	ldrb	r3, [r7, #19]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10b      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d52:	4b07      	ldr	r3, [pc, #28]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	4903      	ldr	r1, [pc, #12]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d68:	e008      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d6a:	7cfb      	ldrb	r3, [r7, #19]
 8004d6c:	74bb      	strb	r3, [r7, #18]
 8004d6e:	e005      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d70:	40021000 	.word	0x40021000
 8004d74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d78:	7cfb      	ldrb	r3, [r7, #19]
 8004d7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d7c:	7c7b      	ldrb	r3, [r7, #17]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d105      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d82:	4ba6      	ldr	r3, [pc, #664]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d86:	4aa5      	ldr	r2, [pc, #660]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d9a:	4ba0      	ldr	r3, [pc, #640]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da0:	f023 0203 	bic.w	r2, r3, #3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	499c      	ldr	r1, [pc, #624]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dbc:	4b97      	ldr	r3, [pc, #604]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc2:	f023 020c 	bic.w	r2, r3, #12
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	4994      	ldr	r1, [pc, #592]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dde:	4b8f      	ldr	r3, [pc, #572]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	498b      	ldr	r1, [pc, #556]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e00:	4b86      	ldr	r3, [pc, #536]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	4983      	ldr	r1, [pc, #524]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e22:	4b7e      	ldr	r3, [pc, #504]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e28:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	497a      	ldr	r1, [pc, #488]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e44:	4b75      	ldr	r3, [pc, #468]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e4a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	4972      	ldr	r1, [pc, #456]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e66:	4b6d      	ldr	r3, [pc, #436]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	4969      	ldr	r1, [pc, #420]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e88:	4b64      	ldr	r3, [pc, #400]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	4961      	ldr	r1, [pc, #388]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eaa:	4b5c      	ldr	r3, [pc, #368]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	4958      	ldr	r1, [pc, #352]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d015      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ecc:	4b53      	ldr	r3, [pc, #332]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eda:	4950      	ldr	r1, [pc, #320]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004eea:	d105      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eec:	4b4b      	ldr	r3, [pc, #300]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4a4a      	ldr	r2, [pc, #296]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ef6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d015      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f04:	4b45      	ldr	r3, [pc, #276]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f12:	4942      	ldr	r1, [pc, #264]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f22:	d105      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f24:	4b3d      	ldr	r3, [pc, #244]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	4a3c      	ldr	r2, [pc, #240]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d015      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f3c:	4b37      	ldr	r3, [pc, #220]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4a:	4934      	ldr	r1, [pc, #208]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	4a2e      	ldr	r2, [pc, #184]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d015      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f74:	4b29      	ldr	r3, [pc, #164]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f82:	4926      	ldr	r1, [pc, #152]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f94:	4b21      	ldr	r3, [pc, #132]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4a20      	ldr	r2, [pc, #128]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d015      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fac:	4b1b      	ldr	r3, [pc, #108]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fba:	4918      	ldr	r1, [pc, #96]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fca:	d105      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fcc:	4b13      	ldr	r3, [pc, #76]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4a12      	ldr	r2, [pc, #72]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d015      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff2:	490a      	ldr	r1, [pc, #40]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ffe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005002:	d105      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005004:	4b05      	ldr	r3, [pc, #20]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4a04      	ldr	r2, [pc, #16]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800500e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005010:	7cbb      	ldrb	r3, [r7, #18]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40021000 	.word	0x40021000

08005020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e042      	b.n	80050b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005038:	2b00      	cmp	r3, #0
 800503a:	d106      	bne.n	800504a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7fe f8df 	bl	8003208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2224      	movs	r2, #36	@ 0x24
 800504e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fc38 	bl	80058e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f969 	bl	8005348 <UART_SetConfig>
 8005076:	4603      	mov	r3, r0
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e01b      	b.n	80050b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800508e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800509e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fcb7 	bl	8005a24 <UART_CheckIdleState>
 80050b6:	4603      	mov	r3, r0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e031      	b.n	8005136 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2224      	movs	r2, #36	@ 0x24
 80050d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0201 	bic.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2200      	movs	r2, #0
 80050f8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2200      	movs	r2, #0
 8005100:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fe f906 	bl	8003314 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b08a      	sub	sp, #40	@ 0x28
 8005142:	af02      	add	r7, sp, #8
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005154:	2b20      	cmp	r3, #32
 8005156:	d17b      	bne.n	8005250 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_UART_Transmit+0x26>
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e074      	b.n	8005252 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2221      	movs	r2, #33	@ 0x21
 8005174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005178:	f7fe f97e 	bl	8003478 <HAL_GetTick>
 800517c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	88fa      	ldrh	r2, [r7, #6]
 8005182:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005196:	d108      	bne.n	80051aa <HAL_UART_Transmit+0x6c>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d104      	bne.n	80051aa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051a0:	2300      	movs	r3, #0
 80051a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	61bb      	str	r3, [r7, #24]
 80051a8:	e003      	b.n	80051b2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051b2:	e030      	b.n	8005216 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2200      	movs	r2, #0
 80051bc:	2180      	movs	r1, #128	@ 0x80
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fcda 	bl	8005b78 <UART_WaitOnFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e03d      	b.n	8005252 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10b      	bne.n	80051f4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	3302      	adds	r3, #2
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	e007      	b.n	8005204 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	781a      	ldrb	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	3301      	adds	r3, #1
 8005202:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1c8      	bne.n	80051b4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2200      	movs	r2, #0
 800522a:	2140      	movs	r1, #64	@ 0x40
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 fca3 	bl	8005b78 <UART_WaitOnFlagUntilTimeout>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e006      	b.n	8005252 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	e000      	b.n	8005252 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08a      	sub	sp, #40	@ 0x28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	4613      	mov	r3, r2
 8005268:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005270:	2b20      	cmp	r3, #32
 8005272:	d137      	bne.n	80052e4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <HAL_UART_Receive_DMA+0x24>
 800527a:	88fb      	ldrh	r3, [r7, #6]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e030      	b.n	80052e6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a18      	ldr	r2, [pc, #96]	@ (80052f0 <HAL_UART_Receive_DMA+0x94>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d01f      	beq.n	80052d4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d018      	beq.n	80052d4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	613b      	str	r3, [r7, #16]
   return(result);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	623b      	str	r3, [r7, #32]
 80052c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	69f9      	ldr	r1, [r7, #28]
 80052c6:	6a3a      	ldr	r2, [r7, #32]
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e6      	bne.n	80052a2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80052d4:	88fb      	ldrh	r3, [r7, #6]
 80052d6:	461a      	mov	r2, r3
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 fcba 	bl	8005c54 <UART_Start_Receive_DMA>
 80052e0:	4603      	mov	r3, r0
 80052e2:	e000      	b.n	80052e6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052e4:	2302      	movs	r3, #2
  }
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3728      	adds	r7, #40	@ 0x28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40008000 	.word	0x40008000

080052f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800534c:	b08c      	sub	sp, #48	@ 0x30
 800534e:	af00      	add	r7, sp, #0
 8005350:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	431a      	orrs	r2, r3
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	431a      	orrs	r2, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	4313      	orrs	r3, r2
 800536e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4bab      	ldr	r3, [pc, #684]	@ (8005624 <UART_SetConfig+0x2dc>)
 8005378:	4013      	ands	r3, r2
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005380:	430b      	orrs	r3, r1
 8005382:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4aa0      	ldr	r2, [pc, #640]	@ (8005628 <UART_SetConfig+0x2e0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d004      	beq.n	80053b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053b0:	4313      	orrs	r3, r2
 80053b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80053be:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	6812      	ldr	r2, [r2, #0]
 80053c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053c8:	430b      	orrs	r3, r1
 80053ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d2:	f023 010f 	bic.w	r1, r3, #15
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a91      	ldr	r2, [pc, #580]	@ (800562c <UART_SetConfig+0x2e4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d125      	bne.n	8005438 <UART_SetConfig+0xf0>
 80053ec:	4b90      	ldr	r3, [pc, #576]	@ (8005630 <UART_SetConfig+0x2e8>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d81a      	bhi.n	8005430 <UART_SetConfig+0xe8>
 80053fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005400 <UART_SetConfig+0xb8>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005411 	.word	0x08005411
 8005404:	08005421 	.word	0x08005421
 8005408:	08005419 	.word	0x08005419
 800540c:	08005429 	.word	0x08005429
 8005410:	2301      	movs	r3, #1
 8005412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005416:	e0d6      	b.n	80055c6 <UART_SetConfig+0x27e>
 8005418:	2302      	movs	r3, #2
 800541a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800541e:	e0d2      	b.n	80055c6 <UART_SetConfig+0x27e>
 8005420:	2304      	movs	r3, #4
 8005422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005426:	e0ce      	b.n	80055c6 <UART_SetConfig+0x27e>
 8005428:	2308      	movs	r3, #8
 800542a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800542e:	e0ca      	b.n	80055c6 <UART_SetConfig+0x27e>
 8005430:	2310      	movs	r3, #16
 8005432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005436:	e0c6      	b.n	80055c6 <UART_SetConfig+0x27e>
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a7d      	ldr	r2, [pc, #500]	@ (8005634 <UART_SetConfig+0x2ec>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d138      	bne.n	80054b4 <UART_SetConfig+0x16c>
 8005442:	4b7b      	ldr	r3, [pc, #492]	@ (8005630 <UART_SetConfig+0x2e8>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005448:	f003 030c 	and.w	r3, r3, #12
 800544c:	2b0c      	cmp	r3, #12
 800544e:	d82d      	bhi.n	80054ac <UART_SetConfig+0x164>
 8005450:	a201      	add	r2, pc, #4	@ (adr r2, 8005458 <UART_SetConfig+0x110>)
 8005452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005456:	bf00      	nop
 8005458:	0800548d 	.word	0x0800548d
 800545c:	080054ad 	.word	0x080054ad
 8005460:	080054ad 	.word	0x080054ad
 8005464:	080054ad 	.word	0x080054ad
 8005468:	0800549d 	.word	0x0800549d
 800546c:	080054ad 	.word	0x080054ad
 8005470:	080054ad 	.word	0x080054ad
 8005474:	080054ad 	.word	0x080054ad
 8005478:	08005495 	.word	0x08005495
 800547c:	080054ad 	.word	0x080054ad
 8005480:	080054ad 	.word	0x080054ad
 8005484:	080054ad 	.word	0x080054ad
 8005488:	080054a5 	.word	0x080054a5
 800548c:	2300      	movs	r3, #0
 800548e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005492:	e098      	b.n	80055c6 <UART_SetConfig+0x27e>
 8005494:	2302      	movs	r3, #2
 8005496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800549a:	e094      	b.n	80055c6 <UART_SetConfig+0x27e>
 800549c:	2304      	movs	r3, #4
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054a2:	e090      	b.n	80055c6 <UART_SetConfig+0x27e>
 80054a4:	2308      	movs	r3, #8
 80054a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054aa:	e08c      	b.n	80055c6 <UART_SetConfig+0x27e>
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054b2:	e088      	b.n	80055c6 <UART_SetConfig+0x27e>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a5f      	ldr	r2, [pc, #380]	@ (8005638 <UART_SetConfig+0x2f0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d125      	bne.n	800550a <UART_SetConfig+0x1c2>
 80054be:	4b5c      	ldr	r3, [pc, #368]	@ (8005630 <UART_SetConfig+0x2e8>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80054c8:	2b30      	cmp	r3, #48	@ 0x30
 80054ca:	d016      	beq.n	80054fa <UART_SetConfig+0x1b2>
 80054cc:	2b30      	cmp	r3, #48	@ 0x30
 80054ce:	d818      	bhi.n	8005502 <UART_SetConfig+0x1ba>
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d00a      	beq.n	80054ea <UART_SetConfig+0x1a2>
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d814      	bhi.n	8005502 <UART_SetConfig+0x1ba>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <UART_SetConfig+0x19a>
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d008      	beq.n	80054f2 <UART_SetConfig+0x1aa>
 80054e0:	e00f      	b.n	8005502 <UART_SetConfig+0x1ba>
 80054e2:	2300      	movs	r3, #0
 80054e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e8:	e06d      	b.n	80055c6 <UART_SetConfig+0x27e>
 80054ea:	2302      	movs	r3, #2
 80054ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054f0:	e069      	b.n	80055c6 <UART_SetConfig+0x27e>
 80054f2:	2304      	movs	r3, #4
 80054f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054f8:	e065      	b.n	80055c6 <UART_SetConfig+0x27e>
 80054fa:	2308      	movs	r3, #8
 80054fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005500:	e061      	b.n	80055c6 <UART_SetConfig+0x27e>
 8005502:	2310      	movs	r3, #16
 8005504:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005508:	e05d      	b.n	80055c6 <UART_SetConfig+0x27e>
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a4b      	ldr	r2, [pc, #300]	@ (800563c <UART_SetConfig+0x2f4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d125      	bne.n	8005560 <UART_SetConfig+0x218>
 8005514:	4b46      	ldr	r3, [pc, #280]	@ (8005630 <UART_SetConfig+0x2e8>)
 8005516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800551a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800551e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005520:	d016      	beq.n	8005550 <UART_SetConfig+0x208>
 8005522:	2bc0      	cmp	r3, #192	@ 0xc0
 8005524:	d818      	bhi.n	8005558 <UART_SetConfig+0x210>
 8005526:	2b80      	cmp	r3, #128	@ 0x80
 8005528:	d00a      	beq.n	8005540 <UART_SetConfig+0x1f8>
 800552a:	2b80      	cmp	r3, #128	@ 0x80
 800552c:	d814      	bhi.n	8005558 <UART_SetConfig+0x210>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <UART_SetConfig+0x1f0>
 8005532:	2b40      	cmp	r3, #64	@ 0x40
 8005534:	d008      	beq.n	8005548 <UART_SetConfig+0x200>
 8005536:	e00f      	b.n	8005558 <UART_SetConfig+0x210>
 8005538:	2300      	movs	r3, #0
 800553a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800553e:	e042      	b.n	80055c6 <UART_SetConfig+0x27e>
 8005540:	2302      	movs	r3, #2
 8005542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005546:	e03e      	b.n	80055c6 <UART_SetConfig+0x27e>
 8005548:	2304      	movs	r3, #4
 800554a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800554e:	e03a      	b.n	80055c6 <UART_SetConfig+0x27e>
 8005550:	2308      	movs	r3, #8
 8005552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005556:	e036      	b.n	80055c6 <UART_SetConfig+0x27e>
 8005558:	2310      	movs	r3, #16
 800555a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800555e:	e032      	b.n	80055c6 <UART_SetConfig+0x27e>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a30      	ldr	r2, [pc, #192]	@ (8005628 <UART_SetConfig+0x2e0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d12a      	bne.n	80055c0 <UART_SetConfig+0x278>
 800556a:	4b31      	ldr	r3, [pc, #196]	@ (8005630 <UART_SetConfig+0x2e8>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005570:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005574:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005578:	d01a      	beq.n	80055b0 <UART_SetConfig+0x268>
 800557a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800557e:	d81b      	bhi.n	80055b8 <UART_SetConfig+0x270>
 8005580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005584:	d00c      	beq.n	80055a0 <UART_SetConfig+0x258>
 8005586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800558a:	d815      	bhi.n	80055b8 <UART_SetConfig+0x270>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <UART_SetConfig+0x250>
 8005590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005594:	d008      	beq.n	80055a8 <UART_SetConfig+0x260>
 8005596:	e00f      	b.n	80055b8 <UART_SetConfig+0x270>
 8005598:	2300      	movs	r3, #0
 800559a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800559e:	e012      	b.n	80055c6 <UART_SetConfig+0x27e>
 80055a0:	2302      	movs	r3, #2
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a6:	e00e      	b.n	80055c6 <UART_SetConfig+0x27e>
 80055a8:	2304      	movs	r3, #4
 80055aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ae:	e00a      	b.n	80055c6 <UART_SetConfig+0x27e>
 80055b0:	2308      	movs	r3, #8
 80055b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055b6:	e006      	b.n	80055c6 <UART_SetConfig+0x27e>
 80055b8:	2310      	movs	r3, #16
 80055ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055be:	e002      	b.n	80055c6 <UART_SetConfig+0x27e>
 80055c0:	2310      	movs	r3, #16
 80055c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a17      	ldr	r2, [pc, #92]	@ (8005628 <UART_SetConfig+0x2e0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	f040 80a8 	bne.w	8005722 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d834      	bhi.n	8005644 <UART_SetConfig+0x2fc>
 80055da:	a201      	add	r2, pc, #4	@ (adr r2, 80055e0 <UART_SetConfig+0x298>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	08005605 	.word	0x08005605
 80055e4:	08005645 	.word	0x08005645
 80055e8:	0800560d 	.word	0x0800560d
 80055ec:	08005645 	.word	0x08005645
 80055f0:	08005613 	.word	0x08005613
 80055f4:	08005645 	.word	0x08005645
 80055f8:	08005645 	.word	0x08005645
 80055fc:	08005645 	.word	0x08005645
 8005600:	0800561b 	.word	0x0800561b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005604:	f7ff faaa 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 8005608:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800560a:	e021      	b.n	8005650 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800560c:	4b0c      	ldr	r3, [pc, #48]	@ (8005640 <UART_SetConfig+0x2f8>)
 800560e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005610:	e01e      	b.n	8005650 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005612:	f7ff fa35 	bl	8004a80 <HAL_RCC_GetSysClockFreq>
 8005616:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005618:	e01a      	b.n	8005650 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800561e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005620:	e016      	b.n	8005650 <UART_SetConfig+0x308>
 8005622:	bf00      	nop
 8005624:	cfff69f3 	.word	0xcfff69f3
 8005628:	40008000 	.word	0x40008000
 800562c:	40013800 	.word	0x40013800
 8005630:	40021000 	.word	0x40021000
 8005634:	40004400 	.word	0x40004400
 8005638:	40004800 	.word	0x40004800
 800563c:	40004c00 	.word	0x40004c00
 8005640:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800564e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 812a 	beq.w	80058ac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	4a9e      	ldr	r2, [pc, #632]	@ (80058d8 <UART_SetConfig+0x590>)
 800565e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005662:	461a      	mov	r2, r3
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	fbb3 f3f2 	udiv	r3, r3, r2
 800566a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	4613      	mov	r3, r2
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	4413      	add	r3, r2
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	429a      	cmp	r2, r3
 800567a:	d305      	bcc.n	8005688 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	429a      	cmp	r2, r3
 8005686:	d903      	bls.n	8005690 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800568e:	e10d      	b.n	80058ac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005692:	2200      	movs	r2, #0
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	60fa      	str	r2, [r7, #12]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569c:	4a8e      	ldr	r2, [pc, #568]	@ (80058d8 <UART_SetConfig+0x590>)
 800569e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	2200      	movs	r2, #0
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	607a      	str	r2, [r7, #4]
 80056aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056b2:	f7fb faf1 	bl	8000c98 <__aeabi_uldivmod>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	4610      	mov	r0, r2
 80056bc:	4619      	mov	r1, r3
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	020b      	lsls	r3, r1, #8
 80056c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056cc:	0202      	lsls	r2, r0, #8
 80056ce:	6979      	ldr	r1, [r7, #20]
 80056d0:	6849      	ldr	r1, [r1, #4]
 80056d2:	0849      	lsrs	r1, r1, #1
 80056d4:	2000      	movs	r0, #0
 80056d6:	460c      	mov	r4, r1
 80056d8:	4605      	mov	r5, r0
 80056da:	eb12 0804 	adds.w	r8, r2, r4
 80056de:	eb43 0905 	adc.w	r9, r3, r5
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	469a      	mov	sl, r3
 80056ea:	4693      	mov	fp, r2
 80056ec:	4652      	mov	r2, sl
 80056ee:	465b      	mov	r3, fp
 80056f0:	4640      	mov	r0, r8
 80056f2:	4649      	mov	r1, r9
 80056f4:	f7fb fad0 	bl	8000c98 <__aeabi_uldivmod>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4613      	mov	r3, r2
 80056fe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005706:	d308      	bcc.n	800571a <UART_SetConfig+0x3d2>
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800570e:	d204      	bcs.n	800571a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6a3a      	ldr	r2, [r7, #32]
 8005716:	60da      	str	r2, [r3, #12]
 8005718:	e0c8      	b.n	80058ac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005720:	e0c4      	b.n	80058ac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800572a:	d167      	bne.n	80057fc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800572c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005730:	2b08      	cmp	r3, #8
 8005732:	d828      	bhi.n	8005786 <UART_SetConfig+0x43e>
 8005734:	a201      	add	r2, pc, #4	@ (adr r2, 800573c <UART_SetConfig+0x3f4>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	08005761 	.word	0x08005761
 8005740:	08005769 	.word	0x08005769
 8005744:	08005771 	.word	0x08005771
 8005748:	08005787 	.word	0x08005787
 800574c:	08005777 	.word	0x08005777
 8005750:	08005787 	.word	0x08005787
 8005754:	08005787 	.word	0x08005787
 8005758:	08005787 	.word	0x08005787
 800575c:	0800577f 	.word	0x0800577f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005760:	f7ff f9fc 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 8005764:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005766:	e014      	b.n	8005792 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005768:	f7ff fa0e 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 800576c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800576e:	e010      	b.n	8005792 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005770:	4b5a      	ldr	r3, [pc, #360]	@ (80058dc <UART_SetConfig+0x594>)
 8005772:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005774:	e00d      	b.n	8005792 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005776:	f7ff f983 	bl	8004a80 <HAL_RCC_GetSysClockFreq>
 800577a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800577c:	e009      	b.n	8005792 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005782:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005784:	e005      	b.n	8005792 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005790:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 8089 	beq.w	80058ac <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579e:	4a4e      	ldr	r2, [pc, #312]	@ (80058d8 <UART_SetConfig+0x590>)
 80057a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057a4:	461a      	mov	r2, r3
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ac:	005a      	lsls	r2, r3, #1
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	085b      	lsrs	r3, r3, #1
 80057b4:	441a      	add	r2, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80057be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	2b0f      	cmp	r3, #15
 80057c4:	d916      	bls.n	80057f4 <UART_SetConfig+0x4ac>
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057cc:	d212      	bcs.n	80057f4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f023 030f 	bic.w	r3, r3, #15
 80057d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	085b      	lsrs	r3, r3, #1
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	8bfb      	ldrh	r3, [r7, #30]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	8bfa      	ldrh	r2, [r7, #30]
 80057f0:	60da      	str	r2, [r3, #12]
 80057f2:	e05b      	b.n	80058ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057fa:	e057      	b.n	80058ac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005800:	2b08      	cmp	r3, #8
 8005802:	d828      	bhi.n	8005856 <UART_SetConfig+0x50e>
 8005804:	a201      	add	r2, pc, #4	@ (adr r2, 800580c <UART_SetConfig+0x4c4>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	08005831 	.word	0x08005831
 8005810:	08005839 	.word	0x08005839
 8005814:	08005841 	.word	0x08005841
 8005818:	08005857 	.word	0x08005857
 800581c:	08005847 	.word	0x08005847
 8005820:	08005857 	.word	0x08005857
 8005824:	08005857 	.word	0x08005857
 8005828:	08005857 	.word	0x08005857
 800582c:	0800584f 	.word	0x0800584f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005830:	f7ff f994 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 8005834:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005836:	e014      	b.n	8005862 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005838:	f7ff f9a6 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 800583c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800583e:	e010      	b.n	8005862 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005840:	4b26      	ldr	r3, [pc, #152]	@ (80058dc <UART_SetConfig+0x594>)
 8005842:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005844:	e00d      	b.n	8005862 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005846:	f7ff f91b 	bl	8004a80 <HAL_RCC_GetSysClockFreq>
 800584a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800584c:	e009      	b.n	8005862 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005852:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005854:	e005      	b.n	8005862 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005860:	bf00      	nop
    }

    if (pclk != 0U)
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	2b00      	cmp	r3, #0
 8005866:	d021      	beq.n	80058ac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	4a1a      	ldr	r2, [pc, #104]	@ (80058d8 <UART_SetConfig+0x590>)
 800586e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005872:	461a      	mov	r2, r3
 8005874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005876:	fbb3 f2f2 	udiv	r2, r3, r2
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	441a      	add	r2, r3
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	fbb2 f3f3 	udiv	r3, r2, r3
 800588a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	2b0f      	cmp	r3, #15
 8005890:	d909      	bls.n	80058a6 <UART_SetConfig+0x55e>
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005898:	d205      	bcs.n	80058a6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	b29a      	uxth	r2, r3
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60da      	str	r2, [r3, #12]
 80058a4:	e002      	b.n	80058ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2200      	movs	r2, #0
 80058c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2200      	movs	r2, #0
 80058c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80058c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3730      	adds	r7, #48	@ 0x30
 80058d0:	46bd      	mov	sp, r7
 80058d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058d6:	bf00      	nop
 80058d8:	08009964 	.word	0x08009964
 80058dc:	00f42400 	.word	0x00f42400

080058e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01a      	beq.n	80059f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059de:	d10a      	bne.n	80059f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	605a      	str	r2, [r3, #4]
  }
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b098      	sub	sp, #96	@ 0x60
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a34:	f7fd fd20 	bl	8003478 <HAL_GetTick>
 8005a38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d12f      	bne.n	8005aa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a50:	2200      	movs	r2, #0
 8005a52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f88e 	bl	8005b78 <UART_WaitOnFlagUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d022      	beq.n	8005aa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e6      	bne.n	8005a62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e063      	b.n	8005b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d149      	bne.n	8005b4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f857 	bl	8005b78 <UART_WaitOnFlagUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d03c      	beq.n	8005b4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8005af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e6      	bne.n	8005ad0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3308      	adds	r3, #8
 8005b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b22:	61fa      	str	r2, [r7, #28]
 8005b24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	69b9      	ldr	r1, [r7, #24]
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e5      	bne.n	8005b02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e012      	b.n	8005b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3758      	adds	r7, #88	@ 0x58
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b88:	e04f      	b.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b90:	d04b      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b92:	f7fd fc71 	bl	8003478 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d302      	bcc.n	8005ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e04e      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d037      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b80      	cmp	r3, #128	@ 0x80
 8005bbe:	d034      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b40      	cmp	r3, #64	@ 0x40
 8005bc4:	d031      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d110      	bne.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2208      	movs	r2, #8
 8005bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f920 	bl	8005e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2208      	movs	r2, #8
 8005be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e029      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c04:	d111      	bne.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f906 	bl	8005e22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e00f      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4013      	ands	r3, r2
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	bf0c      	ite	eq
 8005c3a:	2301      	moveq	r3, #1
 8005c3c:	2300      	movne	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d0a0      	beq.n	8005b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b096      	sub	sp, #88	@ 0x58
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	88fa      	ldrh	r2, [r7, #6]
 8005c6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2222      	movs	r2, #34	@ 0x22
 8005c7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d02d      	beq.n	8005ce6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c90:	4a40      	ldr	r2, [pc, #256]	@ (8005d94 <UART_Start_Receive_DMA+0x140>)
 8005c92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c9a:	4a3f      	ldr	r2, [pc, #252]	@ (8005d98 <UART_Start_Receive_DMA+0x144>)
 8005c9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ca4:	4a3d      	ldr	r2, [pc, #244]	@ (8005d9c <UART_Start_Receive_DMA+0x148>)
 8005ca6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cae:	2200      	movs	r2, #0
 8005cb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3324      	adds	r3, #36	@ 0x24
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	88fb      	ldrh	r3, [r7, #6]
 8005cc8:	f7fd fe26 	bl	8003918 <HAL_DMA_Start_IT>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d009      	beq.n	8005ce6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2210      	movs	r2, #16
 8005cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e051      	b.n	8005d8a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d018      	beq.n	8005d20 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d02:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d0e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e6      	bne.n	8005cee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3308      	adds	r3, #8
 8005d26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d40:	637a      	str	r2, [r7, #52]	@ 0x34
 8005d42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e5      	bne.n	8005d20 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3308      	adds	r3, #8
 8005d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	613b      	str	r3, [r7, #16]
   return(result);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3308      	adds	r3, #8
 8005d72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d74:	623a      	str	r2, [r7, #32]
 8005d76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	69f9      	ldr	r1, [r7, #28]
 8005d7a:	6a3a      	ldr	r2, [r7, #32]
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e5      	bne.n	8005d54 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3758      	adds	r7, #88	@ 0x58
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	08005eef 	.word	0x08005eef
 8005d98:	0800601b 	.word	0x0800601b
 8005d9c:	08006059 	.word	0x08006059

08005da0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b08f      	sub	sp, #60	@ 0x3c
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dc8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e6      	bne.n	8005da8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3308      	adds	r3, #8
 8005de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3308      	adds	r3, #8
 8005df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dfa:	61ba      	str	r2, [r7, #24]
 8005dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	6979      	ldr	r1, [r7, #20]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	613b      	str	r3, [r7, #16]
   return(result);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e5      	bne.n	8005dda <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005e16:	bf00      	nop
 8005e18:	373c      	adds	r7, #60	@ 0x3c
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b095      	sub	sp, #84	@ 0x54
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	461a      	mov	r2, r3
 8005e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e48:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e6      	bne.n	8005e2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3308      	adds	r3, #8
 8005e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e72:	f023 0301 	bic.w	r3, r3, #1
 8005e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e3      	bne.n	8005e5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d118      	bne.n	8005ece <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f023 0310 	bic.w	r3, r3, #16
 8005eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eba:	61bb      	str	r3, [r7, #24]
 8005ebc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	6979      	ldr	r1, [r7, #20]
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e6      	bne.n	8005e9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ee2:	bf00      	nop
 8005ee4:	3754      	adds	r7, #84	@ 0x54
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b09c      	sub	sp, #112	@ 0x70
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d171      	bne.n	8005fee <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005f0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f32:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e6      	bne.n	8005f12 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3308      	adds	r3, #8
 8005f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f56:	f023 0301 	bic.w	r3, r3, #1
 8005f5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3308      	adds	r3, #8
 8005f62:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f64:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f66:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e5      	bne.n	8005f44 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	623b      	str	r3, [r7, #32]
   return(result);
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3308      	adds	r3, #8
 8005f96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f98:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e5      	bne.n	8005f78 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d118      	bne.n	8005fee <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f023 0310 	bic.w	r3, r3, #16
 8005fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fda:	61fb      	str	r3, [r7, #28]
 8005fdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	69b9      	ldr	r1, [r7, #24]
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e6      	bne.n	8005fbc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d107      	bne.n	800600c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ffc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ffe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006002:	4619      	mov	r1, r3
 8006004:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006006:	f7ff f993 	bl	8005330 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800600a:	e002      	b.n	8006012 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800600c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800600e:	f7ff f971 	bl	80052f4 <HAL_UART_RxCpltCallback>
}
 8006012:	bf00      	nop
 8006014:	3770      	adds	r7, #112	@ 0x70
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006026:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006032:	2b01      	cmp	r3, #1
 8006034:	d109      	bne.n	800604a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800603c:	085b      	lsrs	r3, r3, #1
 800603e:	b29b      	uxth	r3, r3
 8006040:	4619      	mov	r1, r3
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7ff f974 	bl	8005330 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006048:	e002      	b.n	8006050 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff f95c 	bl	8005308 <HAL_UART_RxHalfCpltCallback>
}
 8006050:	bf00      	nop
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006064:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800606c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006074:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006080:	2b80      	cmp	r3, #128	@ 0x80
 8006082:	d109      	bne.n	8006098 <UART_DMAError+0x40>
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b21      	cmp	r3, #33	@ 0x21
 8006088:	d106      	bne.n	8006098 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2200      	movs	r2, #0
 800608e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006092:	6978      	ldr	r0, [r7, #20]
 8006094:	f7ff fe84 	bl	8005da0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a2:	2b40      	cmp	r3, #64	@ 0x40
 80060a4:	d109      	bne.n	80060ba <UART_DMAError+0x62>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b22      	cmp	r3, #34	@ 0x22
 80060aa:	d106      	bne.n	80060ba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80060b4:	6978      	ldr	r0, [r7, #20]
 80060b6:	f7ff feb4 	bl	8005e22 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c0:	f043 0210 	orr.w	r2, r3, #16
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060ca:	6978      	ldr	r0, [r7, #20]
 80060cc:	f7ff f926 	bl	800531c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060d0:	bf00      	nop
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e058      	b.n	80061a2 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7fd f880 	bl	8003208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2224      	movs	r2, #36	@ 0x24
 800610c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0201 	bic.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff fbd9 	bl	80058e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f7ff f90a 	bl	8005348 <UART_SetConfig>
 8006134:	4603      	mov	r3, r0
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e031      	b.n	80061a2 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800614c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	430a      	orrs	r2, r1
 8006160:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	055b      	lsls	r3, r3, #21
 8006166:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	041b      	lsls	r3, r3, #16
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 800617c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	6812      	ldr	r2, [r2, #0]
 8006184:	6979      	ldr	r1, [r7, #20]
 8006186:	430b      	orrs	r3, r1
 8006188:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f042 0201 	orr.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fc42 	bl	8005a24 <UART_CheckIdleState>
 80061a0:	4603      	mov	r3, r0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80061bc:	2302      	movs	r3, #2
 80061be:	e027      	b.n	8006210 <HAL_UARTEx_DisableFifoMode+0x66>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	@ 0x24
 80061cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0201 	bic.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80061ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006230:	2302      	movs	r3, #2
 8006232:	e02d      	b.n	8006290 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2224      	movs	r2, #36	@ 0x24
 8006240:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0201 	bic.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f84f 	bl	8006314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e02d      	b.n	800630c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2224      	movs	r2, #36	@ 0x24
 80062bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0201 	bic.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f811 	bl	8006314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006320:	2b00      	cmp	r3, #0
 8006322:	d108      	bne.n	8006336 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006334:	e031      	b.n	800639a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006336:	2308      	movs	r3, #8
 8006338:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800633a:	2308      	movs	r3, #8
 800633c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	0e5b      	lsrs	r3, r3, #25
 8006346:	b2db      	uxtb	r3, r3
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	0f5b      	lsrs	r3, r3, #29
 8006356:	b2db      	uxtb	r3, r3
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	7b3a      	ldrb	r2, [r7, #12]
 8006362:	4911      	ldr	r1, [pc, #68]	@ (80063a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006364:	5c8a      	ldrb	r2, [r1, r2]
 8006366:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800636a:	7b3a      	ldrb	r2, [r7, #12]
 800636c:	490f      	ldr	r1, [pc, #60]	@ (80063ac <UARTEx_SetNbDataToProcess+0x98>)
 800636e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006370:	fb93 f3f2 	sdiv	r3, r3, r2
 8006374:	b29a      	uxth	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	7b7a      	ldrb	r2, [r7, #13]
 8006380:	4909      	ldr	r1, [pc, #36]	@ (80063a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006382:	5c8a      	ldrb	r2, [r1, r2]
 8006384:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006388:	7b7a      	ldrb	r2, [r7, #13]
 800638a:	4908      	ldr	r1, [pc, #32]	@ (80063ac <UARTEx_SetNbDataToProcess+0x98>)
 800638c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800638e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006392:	b29a      	uxth	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	0800997c 	.word	0x0800997c
 80063ac:	08009984 	.word	0x08009984

080063b0 <sulp>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	4604      	mov	r4, r0
 80063b4:	460d      	mov	r5, r1
 80063b6:	ec45 4b10 	vmov	d0, r4, r5
 80063ba:	4616      	mov	r6, r2
 80063bc:	f002 f8e2 	bl	8008584 <__ulp>
 80063c0:	ec51 0b10 	vmov	r0, r1, d0
 80063c4:	b17e      	cbz	r6, 80063e6 <sulp+0x36>
 80063c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80063ca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	dd09      	ble.n	80063e6 <sulp+0x36>
 80063d2:	051b      	lsls	r3, r3, #20
 80063d4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80063d8:	2400      	movs	r4, #0
 80063da:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80063de:	4622      	mov	r2, r4
 80063e0:	462b      	mov	r3, r5
 80063e2:	f7fa f939 	bl	8000658 <__aeabi_dmul>
 80063e6:	ec41 0b10 	vmov	d0, r0, r1
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	0000      	movs	r0, r0
	...

080063f0 <_strtod_l>:
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	b09f      	sub	sp, #124	@ 0x7c
 80063f6:	460c      	mov	r4, r1
 80063f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80063fa:	2200      	movs	r2, #0
 80063fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80063fe:	9005      	str	r0, [sp, #20]
 8006400:	f04f 0a00 	mov.w	sl, #0
 8006404:	f04f 0b00 	mov.w	fp, #0
 8006408:	460a      	mov	r2, r1
 800640a:	9219      	str	r2, [sp, #100]	@ 0x64
 800640c:	7811      	ldrb	r1, [r2, #0]
 800640e:	292b      	cmp	r1, #43	@ 0x2b
 8006410:	d04a      	beq.n	80064a8 <_strtod_l+0xb8>
 8006412:	d838      	bhi.n	8006486 <_strtod_l+0x96>
 8006414:	290d      	cmp	r1, #13
 8006416:	d832      	bhi.n	800647e <_strtod_l+0x8e>
 8006418:	2908      	cmp	r1, #8
 800641a:	d832      	bhi.n	8006482 <_strtod_l+0x92>
 800641c:	2900      	cmp	r1, #0
 800641e:	d03b      	beq.n	8006498 <_strtod_l+0xa8>
 8006420:	2200      	movs	r2, #0
 8006422:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006424:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006426:	782a      	ldrb	r2, [r5, #0]
 8006428:	2a30      	cmp	r2, #48	@ 0x30
 800642a:	f040 80b3 	bne.w	8006594 <_strtod_l+0x1a4>
 800642e:	786a      	ldrb	r2, [r5, #1]
 8006430:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006434:	2a58      	cmp	r2, #88	@ 0x58
 8006436:	d16e      	bne.n	8006516 <_strtod_l+0x126>
 8006438:	9302      	str	r3, [sp, #8]
 800643a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	4a8e      	ldr	r2, [pc, #568]	@ (800667c <_strtod_l+0x28c>)
 8006444:	9805      	ldr	r0, [sp, #20]
 8006446:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006448:	a919      	add	r1, sp, #100	@ 0x64
 800644a:	f001 f995 	bl	8007778 <__gethex>
 800644e:	f010 060f 	ands.w	r6, r0, #15
 8006452:	4604      	mov	r4, r0
 8006454:	d005      	beq.n	8006462 <_strtod_l+0x72>
 8006456:	2e06      	cmp	r6, #6
 8006458:	d128      	bne.n	80064ac <_strtod_l+0xbc>
 800645a:	3501      	adds	r5, #1
 800645c:	2300      	movs	r3, #0
 800645e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006462:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006464:	2b00      	cmp	r3, #0
 8006466:	f040 858e 	bne.w	8006f86 <_strtod_l+0xb96>
 800646a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800646c:	b1cb      	cbz	r3, 80064a2 <_strtod_l+0xb2>
 800646e:	4652      	mov	r2, sl
 8006470:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006474:	ec43 2b10 	vmov	d0, r2, r3
 8006478:	b01f      	add	sp, #124	@ 0x7c
 800647a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800647e:	2920      	cmp	r1, #32
 8006480:	d1ce      	bne.n	8006420 <_strtod_l+0x30>
 8006482:	3201      	adds	r2, #1
 8006484:	e7c1      	b.n	800640a <_strtod_l+0x1a>
 8006486:	292d      	cmp	r1, #45	@ 0x2d
 8006488:	d1ca      	bne.n	8006420 <_strtod_l+0x30>
 800648a:	2101      	movs	r1, #1
 800648c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800648e:	1c51      	adds	r1, r2, #1
 8006490:	9119      	str	r1, [sp, #100]	@ 0x64
 8006492:	7852      	ldrb	r2, [r2, #1]
 8006494:	2a00      	cmp	r2, #0
 8006496:	d1c5      	bne.n	8006424 <_strtod_l+0x34>
 8006498:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800649a:	9419      	str	r4, [sp, #100]	@ 0x64
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 8570 	bne.w	8006f82 <_strtod_l+0xb92>
 80064a2:	4652      	mov	r2, sl
 80064a4:	465b      	mov	r3, fp
 80064a6:	e7e5      	b.n	8006474 <_strtod_l+0x84>
 80064a8:	2100      	movs	r1, #0
 80064aa:	e7ef      	b.n	800648c <_strtod_l+0x9c>
 80064ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80064ae:	b13a      	cbz	r2, 80064c0 <_strtod_l+0xd0>
 80064b0:	2135      	movs	r1, #53	@ 0x35
 80064b2:	a81c      	add	r0, sp, #112	@ 0x70
 80064b4:	f002 f960 	bl	8008778 <__copybits>
 80064b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80064ba:	9805      	ldr	r0, [sp, #20]
 80064bc:	f001 fd2e 	bl	8007f1c <_Bfree>
 80064c0:	3e01      	subs	r6, #1
 80064c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80064c4:	2e04      	cmp	r6, #4
 80064c6:	d806      	bhi.n	80064d6 <_strtod_l+0xe6>
 80064c8:	e8df f006 	tbb	[pc, r6]
 80064cc:	201d0314 	.word	0x201d0314
 80064d0:	14          	.byte	0x14
 80064d1:	00          	.byte	0x00
 80064d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80064d6:	05e1      	lsls	r1, r4, #23
 80064d8:	bf48      	it	mi
 80064da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80064de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80064e2:	0d1b      	lsrs	r3, r3, #20
 80064e4:	051b      	lsls	r3, r3, #20
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1bb      	bne.n	8006462 <_strtod_l+0x72>
 80064ea:	f001 f83f 	bl	800756c <__errno>
 80064ee:	2322      	movs	r3, #34	@ 0x22
 80064f0:	6003      	str	r3, [r0, #0]
 80064f2:	e7b6      	b.n	8006462 <_strtod_l+0x72>
 80064f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80064f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80064fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006500:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006504:	e7e7      	b.n	80064d6 <_strtod_l+0xe6>
 8006506:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006684 <_strtod_l+0x294>
 800650a:	e7e4      	b.n	80064d6 <_strtod_l+0xe6>
 800650c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006510:	f04f 3aff 	mov.w	sl, #4294967295
 8006514:	e7df      	b.n	80064d6 <_strtod_l+0xe6>
 8006516:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	9219      	str	r2, [sp, #100]	@ 0x64
 800651c:	785b      	ldrb	r3, [r3, #1]
 800651e:	2b30      	cmp	r3, #48	@ 0x30
 8006520:	d0f9      	beq.n	8006516 <_strtod_l+0x126>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d09d      	beq.n	8006462 <_strtod_l+0x72>
 8006526:	2301      	movs	r3, #1
 8006528:	9309      	str	r3, [sp, #36]	@ 0x24
 800652a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800652c:	930c      	str	r3, [sp, #48]	@ 0x30
 800652e:	2300      	movs	r3, #0
 8006530:	9308      	str	r3, [sp, #32]
 8006532:	930a      	str	r3, [sp, #40]	@ 0x28
 8006534:	461f      	mov	r7, r3
 8006536:	220a      	movs	r2, #10
 8006538:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800653a:	7805      	ldrb	r5, [r0, #0]
 800653c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006540:	b2d9      	uxtb	r1, r3
 8006542:	2909      	cmp	r1, #9
 8006544:	d928      	bls.n	8006598 <_strtod_l+0x1a8>
 8006546:	494e      	ldr	r1, [pc, #312]	@ (8006680 <_strtod_l+0x290>)
 8006548:	2201      	movs	r2, #1
 800654a:	f000 ff8b 	bl	8007464 <strncmp>
 800654e:	2800      	cmp	r0, #0
 8006550:	d032      	beq.n	80065b8 <_strtod_l+0x1c8>
 8006552:	2000      	movs	r0, #0
 8006554:	462a      	mov	r2, r5
 8006556:	4681      	mov	r9, r0
 8006558:	463d      	mov	r5, r7
 800655a:	4603      	mov	r3, r0
 800655c:	2a65      	cmp	r2, #101	@ 0x65
 800655e:	d001      	beq.n	8006564 <_strtod_l+0x174>
 8006560:	2a45      	cmp	r2, #69	@ 0x45
 8006562:	d114      	bne.n	800658e <_strtod_l+0x19e>
 8006564:	b91d      	cbnz	r5, 800656e <_strtod_l+0x17e>
 8006566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006568:	4302      	orrs	r2, r0
 800656a:	d095      	beq.n	8006498 <_strtod_l+0xa8>
 800656c:	2500      	movs	r5, #0
 800656e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006570:	1c62      	adds	r2, r4, #1
 8006572:	9219      	str	r2, [sp, #100]	@ 0x64
 8006574:	7862      	ldrb	r2, [r4, #1]
 8006576:	2a2b      	cmp	r2, #43	@ 0x2b
 8006578:	d077      	beq.n	800666a <_strtod_l+0x27a>
 800657a:	2a2d      	cmp	r2, #45	@ 0x2d
 800657c:	d07b      	beq.n	8006676 <_strtod_l+0x286>
 800657e:	f04f 0c00 	mov.w	ip, #0
 8006582:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006586:	2909      	cmp	r1, #9
 8006588:	f240 8082 	bls.w	8006690 <_strtod_l+0x2a0>
 800658c:	9419      	str	r4, [sp, #100]	@ 0x64
 800658e:	f04f 0800 	mov.w	r8, #0
 8006592:	e0a2      	b.n	80066da <_strtod_l+0x2ea>
 8006594:	2300      	movs	r3, #0
 8006596:	e7c7      	b.n	8006528 <_strtod_l+0x138>
 8006598:	2f08      	cmp	r7, #8
 800659a:	bfd5      	itete	le
 800659c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800659e:	9908      	ldrgt	r1, [sp, #32]
 80065a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80065a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80065a8:	f100 0001 	add.w	r0, r0, #1
 80065ac:	bfd4      	ite	le
 80065ae:	930a      	strle	r3, [sp, #40]	@ 0x28
 80065b0:	9308      	strgt	r3, [sp, #32]
 80065b2:	3701      	adds	r7, #1
 80065b4:	9019      	str	r0, [sp, #100]	@ 0x64
 80065b6:	e7bf      	b.n	8006538 <_strtod_l+0x148>
 80065b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80065be:	785a      	ldrb	r2, [r3, #1]
 80065c0:	b37f      	cbz	r7, 8006622 <_strtod_l+0x232>
 80065c2:	4681      	mov	r9, r0
 80065c4:	463d      	mov	r5, r7
 80065c6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80065ca:	2b09      	cmp	r3, #9
 80065cc:	d912      	bls.n	80065f4 <_strtod_l+0x204>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e7c4      	b.n	800655c <_strtod_l+0x16c>
 80065d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	9219      	str	r2, [sp, #100]	@ 0x64
 80065d8:	785a      	ldrb	r2, [r3, #1]
 80065da:	3001      	adds	r0, #1
 80065dc:	2a30      	cmp	r2, #48	@ 0x30
 80065de:	d0f8      	beq.n	80065d2 <_strtod_l+0x1e2>
 80065e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	f200 84d3 	bhi.w	8006f90 <_strtod_l+0xba0>
 80065ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80065ee:	4681      	mov	r9, r0
 80065f0:	2000      	movs	r0, #0
 80065f2:	4605      	mov	r5, r0
 80065f4:	3a30      	subs	r2, #48	@ 0x30
 80065f6:	f100 0301 	add.w	r3, r0, #1
 80065fa:	d02a      	beq.n	8006652 <_strtod_l+0x262>
 80065fc:	4499      	add	r9, r3
 80065fe:	eb00 0c05 	add.w	ip, r0, r5
 8006602:	462b      	mov	r3, r5
 8006604:	210a      	movs	r1, #10
 8006606:	4563      	cmp	r3, ip
 8006608:	d10d      	bne.n	8006626 <_strtod_l+0x236>
 800660a:	1c69      	adds	r1, r5, #1
 800660c:	4401      	add	r1, r0
 800660e:	4428      	add	r0, r5
 8006610:	2808      	cmp	r0, #8
 8006612:	dc16      	bgt.n	8006642 <_strtod_l+0x252>
 8006614:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006616:	230a      	movs	r3, #10
 8006618:	fb03 2300 	mla	r3, r3, r0, r2
 800661c:	930a      	str	r3, [sp, #40]	@ 0x28
 800661e:	2300      	movs	r3, #0
 8006620:	e018      	b.n	8006654 <_strtod_l+0x264>
 8006622:	4638      	mov	r0, r7
 8006624:	e7da      	b.n	80065dc <_strtod_l+0x1ec>
 8006626:	2b08      	cmp	r3, #8
 8006628:	f103 0301 	add.w	r3, r3, #1
 800662c:	dc03      	bgt.n	8006636 <_strtod_l+0x246>
 800662e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006630:	434e      	muls	r6, r1
 8006632:	960a      	str	r6, [sp, #40]	@ 0x28
 8006634:	e7e7      	b.n	8006606 <_strtod_l+0x216>
 8006636:	2b10      	cmp	r3, #16
 8006638:	bfde      	ittt	le
 800663a:	9e08      	ldrle	r6, [sp, #32]
 800663c:	434e      	mulle	r6, r1
 800663e:	9608      	strle	r6, [sp, #32]
 8006640:	e7e1      	b.n	8006606 <_strtod_l+0x216>
 8006642:	280f      	cmp	r0, #15
 8006644:	dceb      	bgt.n	800661e <_strtod_l+0x22e>
 8006646:	9808      	ldr	r0, [sp, #32]
 8006648:	230a      	movs	r3, #10
 800664a:	fb03 2300 	mla	r3, r3, r0, r2
 800664e:	9308      	str	r3, [sp, #32]
 8006650:	e7e5      	b.n	800661e <_strtod_l+0x22e>
 8006652:	4629      	mov	r1, r5
 8006654:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006656:	1c50      	adds	r0, r2, #1
 8006658:	9019      	str	r0, [sp, #100]	@ 0x64
 800665a:	7852      	ldrb	r2, [r2, #1]
 800665c:	4618      	mov	r0, r3
 800665e:	460d      	mov	r5, r1
 8006660:	e7b1      	b.n	80065c6 <_strtod_l+0x1d6>
 8006662:	f04f 0900 	mov.w	r9, #0
 8006666:	2301      	movs	r3, #1
 8006668:	e77d      	b.n	8006566 <_strtod_l+0x176>
 800666a:	f04f 0c00 	mov.w	ip, #0
 800666e:	1ca2      	adds	r2, r4, #2
 8006670:	9219      	str	r2, [sp, #100]	@ 0x64
 8006672:	78a2      	ldrb	r2, [r4, #2]
 8006674:	e785      	b.n	8006582 <_strtod_l+0x192>
 8006676:	f04f 0c01 	mov.w	ip, #1
 800667a:	e7f8      	b.n	800666e <_strtod_l+0x27e>
 800667c:	080099b0 	.word	0x080099b0
 8006680:	0800998c 	.word	0x0800998c
 8006684:	7ff00000 	.word	0x7ff00000
 8006688:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800668a:	1c51      	adds	r1, r2, #1
 800668c:	9119      	str	r1, [sp, #100]	@ 0x64
 800668e:	7852      	ldrb	r2, [r2, #1]
 8006690:	2a30      	cmp	r2, #48	@ 0x30
 8006692:	d0f9      	beq.n	8006688 <_strtod_l+0x298>
 8006694:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006698:	2908      	cmp	r1, #8
 800669a:	f63f af78 	bhi.w	800658e <_strtod_l+0x19e>
 800669e:	3a30      	subs	r2, #48	@ 0x30
 80066a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80066a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80066a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80066a6:	f04f 080a 	mov.w	r8, #10
 80066aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80066ac:	1c56      	adds	r6, r2, #1
 80066ae:	9619      	str	r6, [sp, #100]	@ 0x64
 80066b0:	7852      	ldrb	r2, [r2, #1]
 80066b2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80066b6:	f1be 0f09 	cmp.w	lr, #9
 80066ba:	d939      	bls.n	8006730 <_strtod_l+0x340>
 80066bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80066be:	1a76      	subs	r6, r6, r1
 80066c0:	2e08      	cmp	r6, #8
 80066c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80066c6:	dc03      	bgt.n	80066d0 <_strtod_l+0x2e0>
 80066c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80066ca:	4588      	cmp	r8, r1
 80066cc:	bfa8      	it	ge
 80066ce:	4688      	movge	r8, r1
 80066d0:	f1bc 0f00 	cmp.w	ip, #0
 80066d4:	d001      	beq.n	80066da <_strtod_l+0x2ea>
 80066d6:	f1c8 0800 	rsb	r8, r8, #0
 80066da:	2d00      	cmp	r5, #0
 80066dc:	d14e      	bne.n	800677c <_strtod_l+0x38c>
 80066de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066e0:	4308      	orrs	r0, r1
 80066e2:	f47f aebe 	bne.w	8006462 <_strtod_l+0x72>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f47f aed6 	bne.w	8006498 <_strtod_l+0xa8>
 80066ec:	2a69      	cmp	r2, #105	@ 0x69
 80066ee:	d028      	beq.n	8006742 <_strtod_l+0x352>
 80066f0:	dc25      	bgt.n	800673e <_strtod_l+0x34e>
 80066f2:	2a49      	cmp	r2, #73	@ 0x49
 80066f4:	d025      	beq.n	8006742 <_strtod_l+0x352>
 80066f6:	2a4e      	cmp	r2, #78	@ 0x4e
 80066f8:	f47f aece 	bne.w	8006498 <_strtod_l+0xa8>
 80066fc:	499b      	ldr	r1, [pc, #620]	@ (800696c <_strtod_l+0x57c>)
 80066fe:	a819      	add	r0, sp, #100	@ 0x64
 8006700:	f001 fa5c 	bl	8007bbc <__match>
 8006704:	2800      	cmp	r0, #0
 8006706:	f43f aec7 	beq.w	8006498 <_strtod_l+0xa8>
 800670a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b28      	cmp	r3, #40	@ 0x28
 8006710:	d12e      	bne.n	8006770 <_strtod_l+0x380>
 8006712:	4997      	ldr	r1, [pc, #604]	@ (8006970 <_strtod_l+0x580>)
 8006714:	aa1c      	add	r2, sp, #112	@ 0x70
 8006716:	a819      	add	r0, sp, #100	@ 0x64
 8006718:	f001 fa64 	bl	8007be4 <__hexnan>
 800671c:	2805      	cmp	r0, #5
 800671e:	d127      	bne.n	8006770 <_strtod_l+0x380>
 8006720:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006722:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006726:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800672a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800672e:	e698      	b.n	8006462 <_strtod_l+0x72>
 8006730:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006732:	fb08 2101 	mla	r1, r8, r1, r2
 8006736:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800673a:	920e      	str	r2, [sp, #56]	@ 0x38
 800673c:	e7b5      	b.n	80066aa <_strtod_l+0x2ba>
 800673e:	2a6e      	cmp	r2, #110	@ 0x6e
 8006740:	e7da      	b.n	80066f8 <_strtod_l+0x308>
 8006742:	498c      	ldr	r1, [pc, #560]	@ (8006974 <_strtod_l+0x584>)
 8006744:	a819      	add	r0, sp, #100	@ 0x64
 8006746:	f001 fa39 	bl	8007bbc <__match>
 800674a:	2800      	cmp	r0, #0
 800674c:	f43f aea4 	beq.w	8006498 <_strtod_l+0xa8>
 8006750:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006752:	4989      	ldr	r1, [pc, #548]	@ (8006978 <_strtod_l+0x588>)
 8006754:	3b01      	subs	r3, #1
 8006756:	a819      	add	r0, sp, #100	@ 0x64
 8006758:	9319      	str	r3, [sp, #100]	@ 0x64
 800675a:	f001 fa2f 	bl	8007bbc <__match>
 800675e:	b910      	cbnz	r0, 8006766 <_strtod_l+0x376>
 8006760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006762:	3301      	adds	r3, #1
 8006764:	9319      	str	r3, [sp, #100]	@ 0x64
 8006766:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006988 <_strtod_l+0x598>
 800676a:	f04f 0a00 	mov.w	sl, #0
 800676e:	e678      	b.n	8006462 <_strtod_l+0x72>
 8006770:	4882      	ldr	r0, [pc, #520]	@ (800697c <_strtod_l+0x58c>)
 8006772:	f000 ff41 	bl	80075f8 <nan>
 8006776:	ec5b ab10 	vmov	sl, fp, d0
 800677a:	e672      	b.n	8006462 <_strtod_l+0x72>
 800677c:	eba8 0309 	sub.w	r3, r8, r9
 8006780:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006782:	9309      	str	r3, [sp, #36]	@ 0x24
 8006784:	2f00      	cmp	r7, #0
 8006786:	bf08      	it	eq
 8006788:	462f      	moveq	r7, r5
 800678a:	2d10      	cmp	r5, #16
 800678c:	462c      	mov	r4, r5
 800678e:	bfa8      	it	ge
 8006790:	2410      	movge	r4, #16
 8006792:	f7f9 fee7 	bl	8000564 <__aeabi_ui2d>
 8006796:	2d09      	cmp	r5, #9
 8006798:	4682      	mov	sl, r0
 800679a:	468b      	mov	fp, r1
 800679c:	dc13      	bgt.n	80067c6 <_strtod_l+0x3d6>
 800679e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f43f ae5e 	beq.w	8006462 <_strtod_l+0x72>
 80067a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a8:	dd78      	ble.n	800689c <_strtod_l+0x4ac>
 80067aa:	2b16      	cmp	r3, #22
 80067ac:	dc5f      	bgt.n	800686e <_strtod_l+0x47e>
 80067ae:	4974      	ldr	r1, [pc, #464]	@ (8006980 <_strtod_l+0x590>)
 80067b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80067b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067b8:	4652      	mov	r2, sl
 80067ba:	465b      	mov	r3, fp
 80067bc:	f7f9 ff4c 	bl	8000658 <__aeabi_dmul>
 80067c0:	4682      	mov	sl, r0
 80067c2:	468b      	mov	fp, r1
 80067c4:	e64d      	b.n	8006462 <_strtod_l+0x72>
 80067c6:	4b6e      	ldr	r3, [pc, #440]	@ (8006980 <_strtod_l+0x590>)
 80067c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80067d0:	f7f9 ff42 	bl	8000658 <__aeabi_dmul>
 80067d4:	4682      	mov	sl, r0
 80067d6:	9808      	ldr	r0, [sp, #32]
 80067d8:	468b      	mov	fp, r1
 80067da:	f7f9 fec3 	bl	8000564 <__aeabi_ui2d>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4650      	mov	r0, sl
 80067e4:	4659      	mov	r1, fp
 80067e6:	f7f9 fd81 	bl	80002ec <__adddf3>
 80067ea:	2d0f      	cmp	r5, #15
 80067ec:	4682      	mov	sl, r0
 80067ee:	468b      	mov	fp, r1
 80067f0:	ddd5      	ble.n	800679e <_strtod_l+0x3ae>
 80067f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f4:	1b2c      	subs	r4, r5, r4
 80067f6:	441c      	add	r4, r3
 80067f8:	2c00      	cmp	r4, #0
 80067fa:	f340 8096 	ble.w	800692a <_strtod_l+0x53a>
 80067fe:	f014 030f 	ands.w	r3, r4, #15
 8006802:	d00a      	beq.n	800681a <_strtod_l+0x42a>
 8006804:	495e      	ldr	r1, [pc, #376]	@ (8006980 <_strtod_l+0x590>)
 8006806:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800680a:	4652      	mov	r2, sl
 800680c:	465b      	mov	r3, fp
 800680e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006812:	f7f9 ff21 	bl	8000658 <__aeabi_dmul>
 8006816:	4682      	mov	sl, r0
 8006818:	468b      	mov	fp, r1
 800681a:	f034 040f 	bics.w	r4, r4, #15
 800681e:	d073      	beq.n	8006908 <_strtod_l+0x518>
 8006820:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006824:	dd48      	ble.n	80068b8 <_strtod_l+0x4c8>
 8006826:	2400      	movs	r4, #0
 8006828:	46a0      	mov	r8, r4
 800682a:	940a      	str	r4, [sp, #40]	@ 0x28
 800682c:	46a1      	mov	r9, r4
 800682e:	9a05      	ldr	r2, [sp, #20]
 8006830:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006988 <_strtod_l+0x598>
 8006834:	2322      	movs	r3, #34	@ 0x22
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	f04f 0a00 	mov.w	sl, #0
 800683c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800683e:	2b00      	cmp	r3, #0
 8006840:	f43f ae0f 	beq.w	8006462 <_strtod_l+0x72>
 8006844:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006846:	9805      	ldr	r0, [sp, #20]
 8006848:	f001 fb68 	bl	8007f1c <_Bfree>
 800684c:	9805      	ldr	r0, [sp, #20]
 800684e:	4649      	mov	r1, r9
 8006850:	f001 fb64 	bl	8007f1c <_Bfree>
 8006854:	9805      	ldr	r0, [sp, #20]
 8006856:	4641      	mov	r1, r8
 8006858:	f001 fb60 	bl	8007f1c <_Bfree>
 800685c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800685e:	9805      	ldr	r0, [sp, #20]
 8006860:	f001 fb5c 	bl	8007f1c <_Bfree>
 8006864:	9805      	ldr	r0, [sp, #20]
 8006866:	4621      	mov	r1, r4
 8006868:	f001 fb58 	bl	8007f1c <_Bfree>
 800686c:	e5f9      	b.n	8006462 <_strtod_l+0x72>
 800686e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006870:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006874:	4293      	cmp	r3, r2
 8006876:	dbbc      	blt.n	80067f2 <_strtod_l+0x402>
 8006878:	4c41      	ldr	r4, [pc, #260]	@ (8006980 <_strtod_l+0x590>)
 800687a:	f1c5 050f 	rsb	r5, r5, #15
 800687e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006882:	4652      	mov	r2, sl
 8006884:	465b      	mov	r3, fp
 8006886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800688a:	f7f9 fee5 	bl	8000658 <__aeabi_dmul>
 800688e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006890:	1b5d      	subs	r5, r3, r5
 8006892:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006896:	e9d4 2300 	ldrd	r2, r3, [r4]
 800689a:	e78f      	b.n	80067bc <_strtod_l+0x3cc>
 800689c:	3316      	adds	r3, #22
 800689e:	dba8      	blt.n	80067f2 <_strtod_l+0x402>
 80068a0:	4b37      	ldr	r3, [pc, #220]	@ (8006980 <_strtod_l+0x590>)
 80068a2:	eba9 0808 	sub.w	r8, r9, r8
 80068a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80068aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80068ae:	4650      	mov	r0, sl
 80068b0:	4659      	mov	r1, fp
 80068b2:	f7f9 fffb 	bl	80008ac <__aeabi_ddiv>
 80068b6:	e783      	b.n	80067c0 <_strtod_l+0x3d0>
 80068b8:	4b32      	ldr	r3, [pc, #200]	@ (8006984 <_strtod_l+0x594>)
 80068ba:	9308      	str	r3, [sp, #32]
 80068bc:	2300      	movs	r3, #0
 80068be:	1124      	asrs	r4, r4, #4
 80068c0:	4650      	mov	r0, sl
 80068c2:	4659      	mov	r1, fp
 80068c4:	461e      	mov	r6, r3
 80068c6:	2c01      	cmp	r4, #1
 80068c8:	dc21      	bgt.n	800690e <_strtod_l+0x51e>
 80068ca:	b10b      	cbz	r3, 80068d0 <_strtod_l+0x4e0>
 80068cc:	4682      	mov	sl, r0
 80068ce:	468b      	mov	fp, r1
 80068d0:	492c      	ldr	r1, [pc, #176]	@ (8006984 <_strtod_l+0x594>)
 80068d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80068d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80068da:	4652      	mov	r2, sl
 80068dc:	465b      	mov	r3, fp
 80068de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068e2:	f7f9 feb9 	bl	8000658 <__aeabi_dmul>
 80068e6:	4b28      	ldr	r3, [pc, #160]	@ (8006988 <_strtod_l+0x598>)
 80068e8:	460a      	mov	r2, r1
 80068ea:	400b      	ands	r3, r1
 80068ec:	4927      	ldr	r1, [pc, #156]	@ (800698c <_strtod_l+0x59c>)
 80068ee:	428b      	cmp	r3, r1
 80068f0:	4682      	mov	sl, r0
 80068f2:	d898      	bhi.n	8006826 <_strtod_l+0x436>
 80068f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80068f8:	428b      	cmp	r3, r1
 80068fa:	bf86      	itte	hi
 80068fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006990 <_strtod_l+0x5a0>
 8006900:	f04f 3aff 	movhi.w	sl, #4294967295
 8006904:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006908:	2300      	movs	r3, #0
 800690a:	9308      	str	r3, [sp, #32]
 800690c:	e07a      	b.n	8006a04 <_strtod_l+0x614>
 800690e:	07e2      	lsls	r2, r4, #31
 8006910:	d505      	bpl.n	800691e <_strtod_l+0x52e>
 8006912:	9b08      	ldr	r3, [sp, #32]
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	f7f9 fe9e 	bl	8000658 <__aeabi_dmul>
 800691c:	2301      	movs	r3, #1
 800691e:	9a08      	ldr	r2, [sp, #32]
 8006920:	3208      	adds	r2, #8
 8006922:	3601      	adds	r6, #1
 8006924:	1064      	asrs	r4, r4, #1
 8006926:	9208      	str	r2, [sp, #32]
 8006928:	e7cd      	b.n	80068c6 <_strtod_l+0x4d6>
 800692a:	d0ed      	beq.n	8006908 <_strtod_l+0x518>
 800692c:	4264      	negs	r4, r4
 800692e:	f014 020f 	ands.w	r2, r4, #15
 8006932:	d00a      	beq.n	800694a <_strtod_l+0x55a>
 8006934:	4b12      	ldr	r3, [pc, #72]	@ (8006980 <_strtod_l+0x590>)
 8006936:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800693a:	4650      	mov	r0, sl
 800693c:	4659      	mov	r1, fp
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	f7f9 ffb3 	bl	80008ac <__aeabi_ddiv>
 8006946:	4682      	mov	sl, r0
 8006948:	468b      	mov	fp, r1
 800694a:	1124      	asrs	r4, r4, #4
 800694c:	d0dc      	beq.n	8006908 <_strtod_l+0x518>
 800694e:	2c1f      	cmp	r4, #31
 8006950:	dd20      	ble.n	8006994 <_strtod_l+0x5a4>
 8006952:	2400      	movs	r4, #0
 8006954:	46a0      	mov	r8, r4
 8006956:	940a      	str	r4, [sp, #40]	@ 0x28
 8006958:	46a1      	mov	r9, r4
 800695a:	9a05      	ldr	r2, [sp, #20]
 800695c:	2322      	movs	r3, #34	@ 0x22
 800695e:	f04f 0a00 	mov.w	sl, #0
 8006962:	f04f 0b00 	mov.w	fp, #0
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	e768      	b.n	800683c <_strtod_l+0x44c>
 800696a:	bf00      	nop
 800696c:	08009997 	.word	0x08009997
 8006970:	0800999c 	.word	0x0800999c
 8006974:	0800998e 	.word	0x0800998e
 8006978:	08009991 	.word	0x08009991
 800697c:	08009d46 	.word	0x08009d46
 8006980:	08009c10 	.word	0x08009c10
 8006984:	08009be8 	.word	0x08009be8
 8006988:	7ff00000 	.word	0x7ff00000
 800698c:	7ca00000 	.word	0x7ca00000
 8006990:	7fefffff 	.word	0x7fefffff
 8006994:	f014 0310 	ands.w	r3, r4, #16
 8006998:	bf18      	it	ne
 800699a:	236a      	movne	r3, #106	@ 0x6a
 800699c:	4ea9      	ldr	r6, [pc, #676]	@ (8006c44 <_strtod_l+0x854>)
 800699e:	9308      	str	r3, [sp, #32]
 80069a0:	4650      	mov	r0, sl
 80069a2:	4659      	mov	r1, fp
 80069a4:	2300      	movs	r3, #0
 80069a6:	07e2      	lsls	r2, r4, #31
 80069a8:	d504      	bpl.n	80069b4 <_strtod_l+0x5c4>
 80069aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069ae:	f7f9 fe53 	bl	8000658 <__aeabi_dmul>
 80069b2:	2301      	movs	r3, #1
 80069b4:	1064      	asrs	r4, r4, #1
 80069b6:	f106 0608 	add.w	r6, r6, #8
 80069ba:	d1f4      	bne.n	80069a6 <_strtod_l+0x5b6>
 80069bc:	b10b      	cbz	r3, 80069c2 <_strtod_l+0x5d2>
 80069be:	4682      	mov	sl, r0
 80069c0:	468b      	mov	fp, r1
 80069c2:	9b08      	ldr	r3, [sp, #32]
 80069c4:	b1b3      	cbz	r3, 80069f4 <_strtod_l+0x604>
 80069c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80069ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	4659      	mov	r1, fp
 80069d2:	dd0f      	ble.n	80069f4 <_strtod_l+0x604>
 80069d4:	2b1f      	cmp	r3, #31
 80069d6:	dd55      	ble.n	8006a84 <_strtod_l+0x694>
 80069d8:	2b34      	cmp	r3, #52	@ 0x34
 80069da:	bfde      	ittt	le
 80069dc:	f04f 33ff 	movle.w	r3, #4294967295
 80069e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80069e4:	4093      	lslle	r3, r2
 80069e6:	f04f 0a00 	mov.w	sl, #0
 80069ea:	bfcc      	ite	gt
 80069ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80069f0:	ea03 0b01 	andle.w	fp, r3, r1
 80069f4:	2200      	movs	r2, #0
 80069f6:	2300      	movs	r3, #0
 80069f8:	4650      	mov	r0, sl
 80069fa:	4659      	mov	r1, fp
 80069fc:	f7fa f894 	bl	8000b28 <__aeabi_dcmpeq>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d1a6      	bne.n	8006952 <_strtod_l+0x562>
 8006a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006a0a:	9805      	ldr	r0, [sp, #20]
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	463a      	mov	r2, r7
 8006a10:	f001 faec 	bl	8007fec <__s2b>
 8006a14:	900a      	str	r0, [sp, #40]	@ 0x28
 8006a16:	2800      	cmp	r0, #0
 8006a18:	f43f af05 	beq.w	8006826 <_strtod_l+0x436>
 8006a1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a1e:	2a00      	cmp	r2, #0
 8006a20:	eba9 0308 	sub.w	r3, r9, r8
 8006a24:	bfa8      	it	ge
 8006a26:	2300      	movge	r3, #0
 8006a28:	9312      	str	r3, [sp, #72]	@ 0x48
 8006a2a:	2400      	movs	r4, #0
 8006a2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006a30:	9316      	str	r3, [sp, #88]	@ 0x58
 8006a32:	46a0      	mov	r8, r4
 8006a34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a36:	9805      	ldr	r0, [sp, #20]
 8006a38:	6859      	ldr	r1, [r3, #4]
 8006a3a:	f001 fa2f 	bl	8007e9c <_Balloc>
 8006a3e:	4681      	mov	r9, r0
 8006a40:	2800      	cmp	r0, #0
 8006a42:	f43f aef4 	beq.w	800682e <_strtod_l+0x43e>
 8006a46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a48:	691a      	ldr	r2, [r3, #16]
 8006a4a:	3202      	adds	r2, #2
 8006a4c:	f103 010c 	add.w	r1, r3, #12
 8006a50:	0092      	lsls	r2, r2, #2
 8006a52:	300c      	adds	r0, #12
 8006a54:	f000 fdbf 	bl	80075d6 <memcpy>
 8006a58:	ec4b ab10 	vmov	d0, sl, fp
 8006a5c:	9805      	ldr	r0, [sp, #20]
 8006a5e:	aa1c      	add	r2, sp, #112	@ 0x70
 8006a60:	a91b      	add	r1, sp, #108	@ 0x6c
 8006a62:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006a66:	f001 fdfd 	bl	8008664 <__d2b>
 8006a6a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	f43f aede 	beq.w	800682e <_strtod_l+0x43e>
 8006a72:	9805      	ldr	r0, [sp, #20]
 8006a74:	2101      	movs	r1, #1
 8006a76:	f001 fb4f 	bl	8008118 <__i2b>
 8006a7a:	4680      	mov	r8, r0
 8006a7c:	b948      	cbnz	r0, 8006a92 <_strtod_l+0x6a2>
 8006a7e:	f04f 0800 	mov.w	r8, #0
 8006a82:	e6d4      	b.n	800682e <_strtod_l+0x43e>
 8006a84:	f04f 32ff 	mov.w	r2, #4294967295
 8006a88:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8c:	ea03 0a0a 	and.w	sl, r3, sl
 8006a90:	e7b0      	b.n	80069f4 <_strtod_l+0x604>
 8006a92:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006a94:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006a96:	2d00      	cmp	r5, #0
 8006a98:	bfab      	itete	ge
 8006a9a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006a9c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006a9e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006aa0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006aa2:	bfac      	ite	ge
 8006aa4:	18ef      	addge	r7, r5, r3
 8006aa6:	1b5e      	sublt	r6, r3, r5
 8006aa8:	9b08      	ldr	r3, [sp, #32]
 8006aaa:	1aed      	subs	r5, r5, r3
 8006aac:	4415      	add	r5, r2
 8006aae:	4b66      	ldr	r3, [pc, #408]	@ (8006c48 <_strtod_l+0x858>)
 8006ab0:	3d01      	subs	r5, #1
 8006ab2:	429d      	cmp	r5, r3
 8006ab4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006ab8:	da50      	bge.n	8006b5c <_strtod_l+0x76c>
 8006aba:	1b5b      	subs	r3, r3, r5
 8006abc:	2b1f      	cmp	r3, #31
 8006abe:	eba2 0203 	sub.w	r2, r2, r3
 8006ac2:	f04f 0101 	mov.w	r1, #1
 8006ac6:	dc3d      	bgt.n	8006b44 <_strtod_l+0x754>
 8006ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8006acc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ace:	2300      	movs	r3, #0
 8006ad0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ad2:	18bd      	adds	r5, r7, r2
 8006ad4:	9b08      	ldr	r3, [sp, #32]
 8006ad6:	42af      	cmp	r7, r5
 8006ad8:	4416      	add	r6, r2
 8006ada:	441e      	add	r6, r3
 8006adc:	463b      	mov	r3, r7
 8006ade:	bfa8      	it	ge
 8006ae0:	462b      	movge	r3, r5
 8006ae2:	42b3      	cmp	r3, r6
 8006ae4:	bfa8      	it	ge
 8006ae6:	4633      	movge	r3, r6
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	bfc2      	ittt	gt
 8006aec:	1aed      	subgt	r5, r5, r3
 8006aee:	1af6      	subgt	r6, r6, r3
 8006af0:	1aff      	subgt	r7, r7, r3
 8006af2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	dd16      	ble.n	8006b26 <_strtod_l+0x736>
 8006af8:	4641      	mov	r1, r8
 8006afa:	9805      	ldr	r0, [sp, #20]
 8006afc:	461a      	mov	r2, r3
 8006afe:	f001 fbcb 	bl	8008298 <__pow5mult>
 8006b02:	4680      	mov	r8, r0
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d0ba      	beq.n	8006a7e <_strtod_l+0x68e>
 8006b08:	4601      	mov	r1, r0
 8006b0a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006b0c:	9805      	ldr	r0, [sp, #20]
 8006b0e:	f001 fb19 	bl	8008144 <__multiply>
 8006b12:	900e      	str	r0, [sp, #56]	@ 0x38
 8006b14:	2800      	cmp	r0, #0
 8006b16:	f43f ae8a 	beq.w	800682e <_strtod_l+0x43e>
 8006b1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b1c:	9805      	ldr	r0, [sp, #20]
 8006b1e:	f001 f9fd 	bl	8007f1c <_Bfree>
 8006b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b24:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	dc1d      	bgt.n	8006b66 <_strtod_l+0x776>
 8006b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dd23      	ble.n	8006b78 <_strtod_l+0x788>
 8006b30:	4649      	mov	r1, r9
 8006b32:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006b34:	9805      	ldr	r0, [sp, #20]
 8006b36:	f001 fbaf 	bl	8008298 <__pow5mult>
 8006b3a:	4681      	mov	r9, r0
 8006b3c:	b9e0      	cbnz	r0, 8006b78 <_strtod_l+0x788>
 8006b3e:	f04f 0900 	mov.w	r9, #0
 8006b42:	e674      	b.n	800682e <_strtod_l+0x43e>
 8006b44:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006b48:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006b4c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006b50:	35e2      	adds	r5, #226	@ 0xe2
 8006b52:	fa01 f305 	lsl.w	r3, r1, r5
 8006b56:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b58:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006b5a:	e7ba      	b.n	8006ad2 <_strtod_l+0x6e2>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b60:	2301      	movs	r3, #1
 8006b62:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b64:	e7b5      	b.n	8006ad2 <_strtod_l+0x6e2>
 8006b66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b68:	9805      	ldr	r0, [sp, #20]
 8006b6a:	462a      	mov	r2, r5
 8006b6c:	f001 fbee 	bl	800834c <__lshift>
 8006b70:	901a      	str	r0, [sp, #104]	@ 0x68
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d1d9      	bne.n	8006b2a <_strtod_l+0x73a>
 8006b76:	e65a      	b.n	800682e <_strtod_l+0x43e>
 8006b78:	2e00      	cmp	r6, #0
 8006b7a:	dd07      	ble.n	8006b8c <_strtod_l+0x79c>
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	9805      	ldr	r0, [sp, #20]
 8006b80:	4632      	mov	r2, r6
 8006b82:	f001 fbe3 	bl	800834c <__lshift>
 8006b86:	4681      	mov	r9, r0
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	d0d8      	beq.n	8006b3e <_strtod_l+0x74e>
 8006b8c:	2f00      	cmp	r7, #0
 8006b8e:	dd08      	ble.n	8006ba2 <_strtod_l+0x7b2>
 8006b90:	4641      	mov	r1, r8
 8006b92:	9805      	ldr	r0, [sp, #20]
 8006b94:	463a      	mov	r2, r7
 8006b96:	f001 fbd9 	bl	800834c <__lshift>
 8006b9a:	4680      	mov	r8, r0
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f43f ae46 	beq.w	800682e <_strtod_l+0x43e>
 8006ba2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ba4:	9805      	ldr	r0, [sp, #20]
 8006ba6:	464a      	mov	r2, r9
 8006ba8:	f001 fc58 	bl	800845c <__mdiff>
 8006bac:	4604      	mov	r4, r0
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	f43f ae3d 	beq.w	800682e <_strtod_l+0x43e>
 8006bb4:	68c3      	ldr	r3, [r0, #12]
 8006bb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60c3      	str	r3, [r0, #12]
 8006bbc:	4641      	mov	r1, r8
 8006bbe:	f001 fc31 	bl	8008424 <__mcmp>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	da46      	bge.n	8006c54 <_strtod_l+0x864>
 8006bc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bc8:	ea53 030a 	orrs.w	r3, r3, sl
 8006bcc:	d16c      	bne.n	8006ca8 <_strtod_l+0x8b8>
 8006bce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d168      	bne.n	8006ca8 <_strtod_l+0x8b8>
 8006bd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006bda:	0d1b      	lsrs	r3, r3, #20
 8006bdc:	051b      	lsls	r3, r3, #20
 8006bde:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006be2:	d961      	bls.n	8006ca8 <_strtod_l+0x8b8>
 8006be4:	6963      	ldr	r3, [r4, #20]
 8006be6:	b913      	cbnz	r3, 8006bee <_strtod_l+0x7fe>
 8006be8:	6923      	ldr	r3, [r4, #16]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	dd5c      	ble.n	8006ca8 <_strtod_l+0x8b8>
 8006bee:	4621      	mov	r1, r4
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	9805      	ldr	r0, [sp, #20]
 8006bf4:	f001 fbaa 	bl	800834c <__lshift>
 8006bf8:	4641      	mov	r1, r8
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	f001 fc12 	bl	8008424 <__mcmp>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	dd51      	ble.n	8006ca8 <_strtod_l+0x8b8>
 8006c04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c08:	9a08      	ldr	r2, [sp, #32]
 8006c0a:	0d1b      	lsrs	r3, r3, #20
 8006c0c:	051b      	lsls	r3, r3, #20
 8006c0e:	2a00      	cmp	r2, #0
 8006c10:	d06b      	beq.n	8006cea <_strtod_l+0x8fa>
 8006c12:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006c16:	d868      	bhi.n	8006cea <_strtod_l+0x8fa>
 8006c18:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006c1c:	f67f ae9d 	bls.w	800695a <_strtod_l+0x56a>
 8006c20:	4b0a      	ldr	r3, [pc, #40]	@ (8006c4c <_strtod_l+0x85c>)
 8006c22:	4650      	mov	r0, sl
 8006c24:	4659      	mov	r1, fp
 8006c26:	2200      	movs	r2, #0
 8006c28:	f7f9 fd16 	bl	8000658 <__aeabi_dmul>
 8006c2c:	4b08      	ldr	r3, [pc, #32]	@ (8006c50 <_strtod_l+0x860>)
 8006c2e:	400b      	ands	r3, r1
 8006c30:	4682      	mov	sl, r0
 8006c32:	468b      	mov	fp, r1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f47f ae05 	bne.w	8006844 <_strtod_l+0x454>
 8006c3a:	9a05      	ldr	r2, [sp, #20]
 8006c3c:	2322      	movs	r3, #34	@ 0x22
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	e600      	b.n	8006844 <_strtod_l+0x454>
 8006c42:	bf00      	nop
 8006c44:	080099c8 	.word	0x080099c8
 8006c48:	fffffc02 	.word	0xfffffc02
 8006c4c:	39500000 	.word	0x39500000
 8006c50:	7ff00000 	.word	0x7ff00000
 8006c54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006c58:	d165      	bne.n	8006d26 <_strtod_l+0x936>
 8006c5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006c5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c60:	b35a      	cbz	r2, 8006cba <_strtod_l+0x8ca>
 8006c62:	4a9f      	ldr	r2, [pc, #636]	@ (8006ee0 <_strtod_l+0xaf0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d12b      	bne.n	8006cc0 <_strtod_l+0x8d0>
 8006c68:	9b08      	ldr	r3, [sp, #32]
 8006c6a:	4651      	mov	r1, sl
 8006c6c:	b303      	cbz	r3, 8006cb0 <_strtod_l+0x8c0>
 8006c6e:	4b9d      	ldr	r3, [pc, #628]	@ (8006ee4 <_strtod_l+0xaf4>)
 8006c70:	465a      	mov	r2, fp
 8006c72:	4013      	ands	r3, r2
 8006c74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006c78:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7c:	d81b      	bhi.n	8006cb6 <_strtod_l+0x8c6>
 8006c7e:	0d1b      	lsrs	r3, r3, #20
 8006c80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006c84:	fa02 f303 	lsl.w	r3, r2, r3
 8006c88:	4299      	cmp	r1, r3
 8006c8a:	d119      	bne.n	8006cc0 <_strtod_l+0x8d0>
 8006c8c:	4b96      	ldr	r3, [pc, #600]	@ (8006ee8 <_strtod_l+0xaf8>)
 8006c8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d102      	bne.n	8006c9a <_strtod_l+0x8aa>
 8006c94:	3101      	adds	r1, #1
 8006c96:	f43f adca 	beq.w	800682e <_strtod_l+0x43e>
 8006c9a:	4b92      	ldr	r3, [pc, #584]	@ (8006ee4 <_strtod_l+0xaf4>)
 8006c9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c9e:	401a      	ands	r2, r3
 8006ca0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006ca4:	f04f 0a00 	mov.w	sl, #0
 8006ca8:	9b08      	ldr	r3, [sp, #32]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1b8      	bne.n	8006c20 <_strtod_l+0x830>
 8006cae:	e5c9      	b.n	8006844 <_strtod_l+0x454>
 8006cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb4:	e7e8      	b.n	8006c88 <_strtod_l+0x898>
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	e7e6      	b.n	8006c88 <_strtod_l+0x898>
 8006cba:	ea53 030a 	orrs.w	r3, r3, sl
 8006cbe:	d0a1      	beq.n	8006c04 <_strtod_l+0x814>
 8006cc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006cc2:	b1db      	cbz	r3, 8006cfc <_strtod_l+0x90c>
 8006cc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cc6:	4213      	tst	r3, r2
 8006cc8:	d0ee      	beq.n	8006ca8 <_strtod_l+0x8b8>
 8006cca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ccc:	9a08      	ldr	r2, [sp, #32]
 8006cce:	4650      	mov	r0, sl
 8006cd0:	4659      	mov	r1, fp
 8006cd2:	b1bb      	cbz	r3, 8006d04 <_strtod_l+0x914>
 8006cd4:	f7ff fb6c 	bl	80063b0 <sulp>
 8006cd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cdc:	ec53 2b10 	vmov	r2, r3, d0
 8006ce0:	f7f9 fb04 	bl	80002ec <__adddf3>
 8006ce4:	4682      	mov	sl, r0
 8006ce6:	468b      	mov	fp, r1
 8006ce8:	e7de      	b.n	8006ca8 <_strtod_l+0x8b8>
 8006cea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006cee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006cf2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006cf6:	f04f 3aff 	mov.w	sl, #4294967295
 8006cfa:	e7d5      	b.n	8006ca8 <_strtod_l+0x8b8>
 8006cfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006cfe:	ea13 0f0a 	tst.w	r3, sl
 8006d02:	e7e1      	b.n	8006cc8 <_strtod_l+0x8d8>
 8006d04:	f7ff fb54 	bl	80063b0 <sulp>
 8006d08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d0c:	ec53 2b10 	vmov	r2, r3, d0
 8006d10:	f7f9 faea 	bl	80002e8 <__aeabi_dsub>
 8006d14:	2200      	movs	r2, #0
 8006d16:	2300      	movs	r3, #0
 8006d18:	4682      	mov	sl, r0
 8006d1a:	468b      	mov	fp, r1
 8006d1c:	f7f9 ff04 	bl	8000b28 <__aeabi_dcmpeq>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d0c1      	beq.n	8006ca8 <_strtod_l+0x8b8>
 8006d24:	e619      	b.n	800695a <_strtod_l+0x56a>
 8006d26:	4641      	mov	r1, r8
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f001 fcf3 	bl	8008714 <__ratio>
 8006d2e:	ec57 6b10 	vmov	r6, r7, d0
 8006d32:	2200      	movs	r2, #0
 8006d34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006d38:	4630      	mov	r0, r6
 8006d3a:	4639      	mov	r1, r7
 8006d3c:	f7f9 ff08 	bl	8000b50 <__aeabi_dcmple>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d06f      	beq.n	8006e24 <_strtod_l+0xa34>
 8006d44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d17a      	bne.n	8006e40 <_strtod_l+0xa50>
 8006d4a:	f1ba 0f00 	cmp.w	sl, #0
 8006d4e:	d158      	bne.n	8006e02 <_strtod_l+0xa12>
 8006d50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d15a      	bne.n	8006e10 <_strtod_l+0xa20>
 8006d5a:	4b64      	ldr	r3, [pc, #400]	@ (8006eec <_strtod_l+0xafc>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4630      	mov	r0, r6
 8006d60:	4639      	mov	r1, r7
 8006d62:	f7f9 feeb 	bl	8000b3c <__aeabi_dcmplt>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d159      	bne.n	8006e1e <_strtod_l+0xa2e>
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	4639      	mov	r1, r7
 8006d6e:	4b60      	ldr	r3, [pc, #384]	@ (8006ef0 <_strtod_l+0xb00>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	f7f9 fc71 	bl	8000658 <__aeabi_dmul>
 8006d76:	4606      	mov	r6, r0
 8006d78:	460f      	mov	r7, r1
 8006d7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006d7e:	9606      	str	r6, [sp, #24]
 8006d80:	9307      	str	r3, [sp, #28]
 8006d82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d86:	4d57      	ldr	r5, [pc, #348]	@ (8006ee4 <_strtod_l+0xaf4>)
 8006d88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006d8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d8e:	401d      	ands	r5, r3
 8006d90:	4b58      	ldr	r3, [pc, #352]	@ (8006ef4 <_strtod_l+0xb04>)
 8006d92:	429d      	cmp	r5, r3
 8006d94:	f040 80b2 	bne.w	8006efc <_strtod_l+0xb0c>
 8006d98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006d9e:	ec4b ab10 	vmov	d0, sl, fp
 8006da2:	f001 fbef 	bl	8008584 <__ulp>
 8006da6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006daa:	ec51 0b10 	vmov	r0, r1, d0
 8006dae:	f7f9 fc53 	bl	8000658 <__aeabi_dmul>
 8006db2:	4652      	mov	r2, sl
 8006db4:	465b      	mov	r3, fp
 8006db6:	f7f9 fa99 	bl	80002ec <__adddf3>
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4949      	ldr	r1, [pc, #292]	@ (8006ee4 <_strtod_l+0xaf4>)
 8006dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8006ef8 <_strtod_l+0xb08>)
 8006dc0:	4019      	ands	r1, r3
 8006dc2:	4291      	cmp	r1, r2
 8006dc4:	4682      	mov	sl, r0
 8006dc6:	d942      	bls.n	8006e4e <_strtod_l+0xa5e>
 8006dc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006dca:	4b47      	ldr	r3, [pc, #284]	@ (8006ee8 <_strtod_l+0xaf8>)
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d103      	bne.n	8006dd8 <_strtod_l+0x9e8>
 8006dd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	f43f ad2b 	beq.w	800682e <_strtod_l+0x43e>
 8006dd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006ee8 <_strtod_l+0xaf8>
 8006ddc:	f04f 3aff 	mov.w	sl, #4294967295
 8006de0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006de2:	9805      	ldr	r0, [sp, #20]
 8006de4:	f001 f89a 	bl	8007f1c <_Bfree>
 8006de8:	9805      	ldr	r0, [sp, #20]
 8006dea:	4649      	mov	r1, r9
 8006dec:	f001 f896 	bl	8007f1c <_Bfree>
 8006df0:	9805      	ldr	r0, [sp, #20]
 8006df2:	4641      	mov	r1, r8
 8006df4:	f001 f892 	bl	8007f1c <_Bfree>
 8006df8:	9805      	ldr	r0, [sp, #20]
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	f001 f88e 	bl	8007f1c <_Bfree>
 8006e00:	e618      	b.n	8006a34 <_strtod_l+0x644>
 8006e02:	f1ba 0f01 	cmp.w	sl, #1
 8006e06:	d103      	bne.n	8006e10 <_strtod_l+0xa20>
 8006e08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f43f ada5 	beq.w	800695a <_strtod_l+0x56a>
 8006e10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006ec0 <_strtod_l+0xad0>
 8006e14:	4f35      	ldr	r7, [pc, #212]	@ (8006eec <_strtod_l+0xafc>)
 8006e16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e1a:	2600      	movs	r6, #0
 8006e1c:	e7b1      	b.n	8006d82 <_strtod_l+0x992>
 8006e1e:	4f34      	ldr	r7, [pc, #208]	@ (8006ef0 <_strtod_l+0xb00>)
 8006e20:	2600      	movs	r6, #0
 8006e22:	e7aa      	b.n	8006d7a <_strtod_l+0x98a>
 8006e24:	4b32      	ldr	r3, [pc, #200]	@ (8006ef0 <_strtod_l+0xb00>)
 8006e26:	4630      	mov	r0, r6
 8006e28:	4639      	mov	r1, r7
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f7f9 fc14 	bl	8000658 <__aeabi_dmul>
 8006e30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e32:	4606      	mov	r6, r0
 8006e34:	460f      	mov	r7, r1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d09f      	beq.n	8006d7a <_strtod_l+0x98a>
 8006e3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006e3e:	e7a0      	b.n	8006d82 <_strtod_l+0x992>
 8006e40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006ec8 <_strtod_l+0xad8>
 8006e44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e48:	ec57 6b17 	vmov	r6, r7, d7
 8006e4c:	e799      	b.n	8006d82 <_strtod_l+0x992>
 8006e4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006e52:	9b08      	ldr	r3, [sp, #32]
 8006e54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1c1      	bne.n	8006de0 <_strtod_l+0x9f0>
 8006e5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e60:	0d1b      	lsrs	r3, r3, #20
 8006e62:	051b      	lsls	r3, r3, #20
 8006e64:	429d      	cmp	r5, r3
 8006e66:	d1bb      	bne.n	8006de0 <_strtod_l+0x9f0>
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	f7f9 ff2c 	bl	8000cc8 <__aeabi_d2lz>
 8006e70:	f7f9 fbc4 	bl	80005fc <__aeabi_l2d>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4630      	mov	r0, r6
 8006e7a:	4639      	mov	r1, r7
 8006e7c:	f7f9 fa34 	bl	80002e8 <__aeabi_dsub>
 8006e80:	460b      	mov	r3, r1
 8006e82:	4602      	mov	r2, r0
 8006e84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006e88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e8e:	ea46 060a 	orr.w	r6, r6, sl
 8006e92:	431e      	orrs	r6, r3
 8006e94:	d06f      	beq.n	8006f76 <_strtod_l+0xb86>
 8006e96:	a30e      	add	r3, pc, #56	@ (adr r3, 8006ed0 <_strtod_l+0xae0>)
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f7f9 fe4e 	bl	8000b3c <__aeabi_dcmplt>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	f47f accf 	bne.w	8006844 <_strtod_l+0x454>
 8006ea6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006ed8 <_strtod_l+0xae8>)
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006eb0:	f7f9 fe62 	bl	8000b78 <__aeabi_dcmpgt>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d093      	beq.n	8006de0 <_strtod_l+0x9f0>
 8006eb8:	e4c4      	b.n	8006844 <_strtod_l+0x454>
 8006eba:	bf00      	nop
 8006ebc:	f3af 8000 	nop.w
 8006ec0:	00000000 	.word	0x00000000
 8006ec4:	bff00000 	.word	0xbff00000
 8006ec8:	00000000 	.word	0x00000000
 8006ecc:	3ff00000 	.word	0x3ff00000
 8006ed0:	94a03595 	.word	0x94a03595
 8006ed4:	3fdfffff 	.word	0x3fdfffff
 8006ed8:	35afe535 	.word	0x35afe535
 8006edc:	3fe00000 	.word	0x3fe00000
 8006ee0:	000fffff 	.word	0x000fffff
 8006ee4:	7ff00000 	.word	0x7ff00000
 8006ee8:	7fefffff 	.word	0x7fefffff
 8006eec:	3ff00000 	.word	0x3ff00000
 8006ef0:	3fe00000 	.word	0x3fe00000
 8006ef4:	7fe00000 	.word	0x7fe00000
 8006ef8:	7c9fffff 	.word	0x7c9fffff
 8006efc:	9b08      	ldr	r3, [sp, #32]
 8006efe:	b323      	cbz	r3, 8006f4a <_strtod_l+0xb5a>
 8006f00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006f04:	d821      	bhi.n	8006f4a <_strtod_l+0xb5a>
 8006f06:	a328      	add	r3, pc, #160	@ (adr r3, 8006fa8 <_strtod_l+0xbb8>)
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	4639      	mov	r1, r7
 8006f10:	f7f9 fe1e 	bl	8000b50 <__aeabi_dcmple>
 8006f14:	b1a0      	cbz	r0, 8006f40 <_strtod_l+0xb50>
 8006f16:	4639      	mov	r1, r7
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f7f9 fe4d 	bl	8000bb8 <__aeabi_d2uiz>
 8006f1e:	2801      	cmp	r0, #1
 8006f20:	bf38      	it	cc
 8006f22:	2001      	movcc	r0, #1
 8006f24:	f7f9 fb1e 	bl	8000564 <__aeabi_ui2d>
 8006f28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f2a:	4606      	mov	r6, r0
 8006f2c:	460f      	mov	r7, r1
 8006f2e:	b9fb      	cbnz	r3, 8006f70 <_strtod_l+0xb80>
 8006f30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f34:	9014      	str	r0, [sp, #80]	@ 0x50
 8006f36:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006f3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006f40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006f46:	1b5b      	subs	r3, r3, r5
 8006f48:	9311      	str	r3, [sp, #68]	@ 0x44
 8006f4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006f4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006f52:	f001 fb17 	bl	8008584 <__ulp>
 8006f56:	4650      	mov	r0, sl
 8006f58:	ec53 2b10 	vmov	r2, r3, d0
 8006f5c:	4659      	mov	r1, fp
 8006f5e:	f7f9 fb7b 	bl	8000658 <__aeabi_dmul>
 8006f62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006f66:	f7f9 f9c1 	bl	80002ec <__adddf3>
 8006f6a:	4682      	mov	sl, r0
 8006f6c:	468b      	mov	fp, r1
 8006f6e:	e770      	b.n	8006e52 <_strtod_l+0xa62>
 8006f70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006f74:	e7e0      	b.n	8006f38 <_strtod_l+0xb48>
 8006f76:	a30e      	add	r3, pc, #56	@ (adr r3, 8006fb0 <_strtod_l+0xbc0>)
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	f7f9 fdde 	bl	8000b3c <__aeabi_dcmplt>
 8006f80:	e798      	b.n	8006eb4 <_strtod_l+0xac4>
 8006f82:	2300      	movs	r3, #0
 8006f84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006f88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	f7ff ba6d 	b.w	800646a <_strtod_l+0x7a>
 8006f90:	2a65      	cmp	r2, #101	@ 0x65
 8006f92:	f43f ab66 	beq.w	8006662 <_strtod_l+0x272>
 8006f96:	2a45      	cmp	r2, #69	@ 0x45
 8006f98:	f43f ab63 	beq.w	8006662 <_strtod_l+0x272>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	f7ff bb9e 	b.w	80066de <_strtod_l+0x2ee>
 8006fa2:	bf00      	nop
 8006fa4:	f3af 8000 	nop.w
 8006fa8:	ffc00000 	.word	0xffc00000
 8006fac:	41dfffff 	.word	0x41dfffff
 8006fb0:	94a03595 	.word	0x94a03595
 8006fb4:	3fcfffff 	.word	0x3fcfffff

08006fb8 <strtof>:
 8006fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbc:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800707c <strtof+0xc4>
 8006fc0:	4b29      	ldr	r3, [pc, #164]	@ (8007068 <strtof+0xb0>)
 8006fc2:	460a      	mov	r2, r1
 8006fc4:	ed2d 8b02 	vpush	{d8}
 8006fc8:	4601      	mov	r1, r0
 8006fca:	f8d8 0000 	ldr.w	r0, [r8]
 8006fce:	f7ff fa0f 	bl	80063f0 <_strtod_l>
 8006fd2:	ec55 4b10 	vmov	r4, r5, d0
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	462b      	mov	r3, r5
 8006fda:	4620      	mov	r0, r4
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f7f9 fdd5 	bl	8000b8c <__aeabi_dcmpun>
 8006fe2:	b190      	cbz	r0, 800700a <strtof+0x52>
 8006fe4:	2d00      	cmp	r5, #0
 8006fe6:	4821      	ldr	r0, [pc, #132]	@ (800706c <strtof+0xb4>)
 8006fe8:	da09      	bge.n	8006ffe <strtof+0x46>
 8006fea:	f000 fb0d 	bl	8007608 <nanf>
 8006fee:	eeb1 8a40 	vneg.f32	s16, s0
 8006ff2:	eeb0 0a48 	vmov.f32	s0, s16
 8006ff6:	ecbd 8b02 	vpop	{d8}
 8006ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ffe:	ecbd 8b02 	vpop	{d8}
 8007002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007006:	f000 baff 	b.w	8007608 <nanf>
 800700a:	4620      	mov	r0, r4
 800700c:	4629      	mov	r1, r5
 800700e:	f7f9 fdf3 	bl	8000bf8 <__aeabi_d2f>
 8007012:	ee08 0a10 	vmov	s16, r0
 8007016:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8007070 <strtof+0xb8>
 800701a:	eeb0 7ac8 	vabs.f32	s14, s16
 800701e:	eeb4 7a67 	vcmp.f32	s14, s15
 8007022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007026:	dd11      	ble.n	800704c <strtof+0x94>
 8007028:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800702c:	4b11      	ldr	r3, [pc, #68]	@ (8007074 <strtof+0xbc>)
 800702e:	f04f 32ff 	mov.w	r2, #4294967295
 8007032:	4620      	mov	r0, r4
 8007034:	4639      	mov	r1, r7
 8007036:	f7f9 fda9 	bl	8000b8c <__aeabi_dcmpun>
 800703a:	b980      	cbnz	r0, 800705e <strtof+0xa6>
 800703c:	4b0d      	ldr	r3, [pc, #52]	@ (8007074 <strtof+0xbc>)
 800703e:	f04f 32ff 	mov.w	r2, #4294967295
 8007042:	4620      	mov	r0, r4
 8007044:	4639      	mov	r1, r7
 8007046:	f7f9 fd83 	bl	8000b50 <__aeabi_dcmple>
 800704a:	b940      	cbnz	r0, 800705e <strtof+0xa6>
 800704c:	ee18 3a10 	vmov	r3, s16
 8007050:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007054:	d1cd      	bne.n	8006ff2 <strtof+0x3a>
 8007056:	4b08      	ldr	r3, [pc, #32]	@ (8007078 <strtof+0xc0>)
 8007058:	402b      	ands	r3, r5
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0c9      	beq.n	8006ff2 <strtof+0x3a>
 800705e:	f8d8 3000 	ldr.w	r3, [r8]
 8007062:	2222      	movs	r2, #34	@ 0x22
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	e7c4      	b.n	8006ff2 <strtof+0x3a>
 8007068:	20000024 	.word	0x20000024
 800706c:	08009d46 	.word	0x08009d46
 8007070:	7f7fffff 	.word	0x7f7fffff
 8007074:	7fefffff 	.word	0x7fefffff
 8007078:	7ff00000 	.word	0x7ff00000
 800707c:	20000190 	.word	0x20000190

08007080 <_strtoul_l.constprop.0>:
 8007080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007084:	4e34      	ldr	r6, [pc, #208]	@ (8007158 <_strtoul_l.constprop.0+0xd8>)
 8007086:	4686      	mov	lr, r0
 8007088:	460d      	mov	r5, r1
 800708a:	4628      	mov	r0, r5
 800708c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007090:	5d37      	ldrb	r7, [r6, r4]
 8007092:	f017 0708 	ands.w	r7, r7, #8
 8007096:	d1f8      	bne.n	800708a <_strtoul_l.constprop.0+0xa>
 8007098:	2c2d      	cmp	r4, #45	@ 0x2d
 800709a:	d12f      	bne.n	80070fc <_strtoul_l.constprop.0+0x7c>
 800709c:	782c      	ldrb	r4, [r5, #0]
 800709e:	2701      	movs	r7, #1
 80070a0:	1c85      	adds	r5, r0, #2
 80070a2:	f033 0010 	bics.w	r0, r3, #16
 80070a6:	d109      	bne.n	80070bc <_strtoul_l.constprop.0+0x3c>
 80070a8:	2c30      	cmp	r4, #48	@ 0x30
 80070aa:	d12c      	bne.n	8007106 <_strtoul_l.constprop.0+0x86>
 80070ac:	7828      	ldrb	r0, [r5, #0]
 80070ae:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80070b2:	2858      	cmp	r0, #88	@ 0x58
 80070b4:	d127      	bne.n	8007106 <_strtoul_l.constprop.0+0x86>
 80070b6:	786c      	ldrb	r4, [r5, #1]
 80070b8:	2310      	movs	r3, #16
 80070ba:	3502      	adds	r5, #2
 80070bc:	f04f 38ff 	mov.w	r8, #4294967295
 80070c0:	2600      	movs	r6, #0
 80070c2:	fbb8 f8f3 	udiv	r8, r8, r3
 80070c6:	fb03 f908 	mul.w	r9, r3, r8
 80070ca:	ea6f 0909 	mvn.w	r9, r9
 80070ce:	4630      	mov	r0, r6
 80070d0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80070d4:	f1bc 0f09 	cmp.w	ip, #9
 80070d8:	d81c      	bhi.n	8007114 <_strtoul_l.constprop.0+0x94>
 80070da:	4664      	mov	r4, ip
 80070dc:	42a3      	cmp	r3, r4
 80070de:	dd2a      	ble.n	8007136 <_strtoul_l.constprop.0+0xb6>
 80070e0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80070e4:	d007      	beq.n	80070f6 <_strtoul_l.constprop.0+0x76>
 80070e6:	4580      	cmp	r8, r0
 80070e8:	d322      	bcc.n	8007130 <_strtoul_l.constprop.0+0xb0>
 80070ea:	d101      	bne.n	80070f0 <_strtoul_l.constprop.0+0x70>
 80070ec:	45a1      	cmp	r9, r4
 80070ee:	db1f      	blt.n	8007130 <_strtoul_l.constprop.0+0xb0>
 80070f0:	fb00 4003 	mla	r0, r0, r3, r4
 80070f4:	2601      	movs	r6, #1
 80070f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070fa:	e7e9      	b.n	80070d0 <_strtoul_l.constprop.0+0x50>
 80070fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80070fe:	bf04      	itt	eq
 8007100:	782c      	ldrbeq	r4, [r5, #0]
 8007102:	1c85      	addeq	r5, r0, #2
 8007104:	e7cd      	b.n	80070a2 <_strtoul_l.constprop.0+0x22>
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1d8      	bne.n	80070bc <_strtoul_l.constprop.0+0x3c>
 800710a:	2c30      	cmp	r4, #48	@ 0x30
 800710c:	bf0c      	ite	eq
 800710e:	2308      	moveq	r3, #8
 8007110:	230a      	movne	r3, #10
 8007112:	e7d3      	b.n	80070bc <_strtoul_l.constprop.0+0x3c>
 8007114:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007118:	f1bc 0f19 	cmp.w	ip, #25
 800711c:	d801      	bhi.n	8007122 <_strtoul_l.constprop.0+0xa2>
 800711e:	3c37      	subs	r4, #55	@ 0x37
 8007120:	e7dc      	b.n	80070dc <_strtoul_l.constprop.0+0x5c>
 8007122:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007126:	f1bc 0f19 	cmp.w	ip, #25
 800712a:	d804      	bhi.n	8007136 <_strtoul_l.constprop.0+0xb6>
 800712c:	3c57      	subs	r4, #87	@ 0x57
 800712e:	e7d5      	b.n	80070dc <_strtoul_l.constprop.0+0x5c>
 8007130:	f04f 36ff 	mov.w	r6, #4294967295
 8007134:	e7df      	b.n	80070f6 <_strtoul_l.constprop.0+0x76>
 8007136:	1c73      	adds	r3, r6, #1
 8007138:	d106      	bne.n	8007148 <_strtoul_l.constprop.0+0xc8>
 800713a:	2322      	movs	r3, #34	@ 0x22
 800713c:	f8ce 3000 	str.w	r3, [lr]
 8007140:	4630      	mov	r0, r6
 8007142:	b932      	cbnz	r2, 8007152 <_strtoul_l.constprop.0+0xd2>
 8007144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007148:	b107      	cbz	r7, 800714c <_strtoul_l.constprop.0+0xcc>
 800714a:	4240      	negs	r0, r0
 800714c:	2a00      	cmp	r2, #0
 800714e:	d0f9      	beq.n	8007144 <_strtoul_l.constprop.0+0xc4>
 8007150:	b106      	cbz	r6, 8007154 <_strtoul_l.constprop.0+0xd4>
 8007152:	1e69      	subs	r1, r5, #1
 8007154:	6011      	str	r1, [r2, #0]
 8007156:	e7f5      	b.n	8007144 <_strtoul_l.constprop.0+0xc4>
 8007158:	080099f1 	.word	0x080099f1

0800715c <strtoul>:
 800715c:	4613      	mov	r3, r2
 800715e:	460a      	mov	r2, r1
 8007160:	4601      	mov	r1, r0
 8007162:	4802      	ldr	r0, [pc, #8]	@ (800716c <strtoul+0x10>)
 8007164:	6800      	ldr	r0, [r0, #0]
 8007166:	f7ff bf8b 	b.w	8007080 <_strtoul_l.constprop.0>
 800716a:	bf00      	nop
 800716c:	20000190 	.word	0x20000190

08007170 <std>:
 8007170:	2300      	movs	r3, #0
 8007172:	b510      	push	{r4, lr}
 8007174:	4604      	mov	r4, r0
 8007176:	e9c0 3300 	strd	r3, r3, [r0]
 800717a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800717e:	6083      	str	r3, [r0, #8]
 8007180:	8181      	strh	r1, [r0, #12]
 8007182:	6643      	str	r3, [r0, #100]	@ 0x64
 8007184:	81c2      	strh	r2, [r0, #14]
 8007186:	6183      	str	r3, [r0, #24]
 8007188:	4619      	mov	r1, r3
 800718a:	2208      	movs	r2, #8
 800718c:	305c      	adds	r0, #92	@ 0x5c
 800718e:	f000 f961 	bl	8007454 <memset>
 8007192:	4b0d      	ldr	r3, [pc, #52]	@ (80071c8 <std+0x58>)
 8007194:	6263      	str	r3, [r4, #36]	@ 0x24
 8007196:	4b0d      	ldr	r3, [pc, #52]	@ (80071cc <std+0x5c>)
 8007198:	62a3      	str	r3, [r4, #40]	@ 0x28
 800719a:	4b0d      	ldr	r3, [pc, #52]	@ (80071d0 <std+0x60>)
 800719c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800719e:	4b0d      	ldr	r3, [pc, #52]	@ (80071d4 <std+0x64>)
 80071a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80071a2:	4b0d      	ldr	r3, [pc, #52]	@ (80071d8 <std+0x68>)
 80071a4:	6224      	str	r4, [r4, #32]
 80071a6:	429c      	cmp	r4, r3
 80071a8:	d006      	beq.n	80071b8 <std+0x48>
 80071aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80071ae:	4294      	cmp	r4, r2
 80071b0:	d002      	beq.n	80071b8 <std+0x48>
 80071b2:	33d0      	adds	r3, #208	@ 0xd0
 80071b4:	429c      	cmp	r4, r3
 80071b6:	d105      	bne.n	80071c4 <std+0x54>
 80071b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80071bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c0:	f000 b9fe 	b.w	80075c0 <__retarget_lock_init_recursive>
 80071c4:	bd10      	pop	{r4, pc}
 80071c6:	bf00      	nop
 80071c8:	0800735d 	.word	0x0800735d
 80071cc:	0800737f 	.word	0x0800737f
 80071d0:	080073b7 	.word	0x080073b7
 80071d4:	080073db 	.word	0x080073db
 80071d8:	200026d4 	.word	0x200026d4

080071dc <stdio_exit_handler>:
 80071dc:	4a02      	ldr	r2, [pc, #8]	@ (80071e8 <stdio_exit_handler+0xc>)
 80071de:	4903      	ldr	r1, [pc, #12]	@ (80071ec <stdio_exit_handler+0x10>)
 80071e0:	4803      	ldr	r0, [pc, #12]	@ (80071f0 <stdio_exit_handler+0x14>)
 80071e2:	f000 b869 	b.w	80072b8 <_fwalk_sglue>
 80071e6:	bf00      	nop
 80071e8:	20000018 	.word	0x20000018
 80071ec:	08008eed 	.word	0x08008eed
 80071f0:	20000194 	.word	0x20000194

080071f4 <cleanup_stdio>:
 80071f4:	6841      	ldr	r1, [r0, #4]
 80071f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007228 <cleanup_stdio+0x34>)
 80071f8:	4299      	cmp	r1, r3
 80071fa:	b510      	push	{r4, lr}
 80071fc:	4604      	mov	r4, r0
 80071fe:	d001      	beq.n	8007204 <cleanup_stdio+0x10>
 8007200:	f001 fe74 	bl	8008eec <_fflush_r>
 8007204:	68a1      	ldr	r1, [r4, #8]
 8007206:	4b09      	ldr	r3, [pc, #36]	@ (800722c <cleanup_stdio+0x38>)
 8007208:	4299      	cmp	r1, r3
 800720a:	d002      	beq.n	8007212 <cleanup_stdio+0x1e>
 800720c:	4620      	mov	r0, r4
 800720e:	f001 fe6d 	bl	8008eec <_fflush_r>
 8007212:	68e1      	ldr	r1, [r4, #12]
 8007214:	4b06      	ldr	r3, [pc, #24]	@ (8007230 <cleanup_stdio+0x3c>)
 8007216:	4299      	cmp	r1, r3
 8007218:	d004      	beq.n	8007224 <cleanup_stdio+0x30>
 800721a:	4620      	mov	r0, r4
 800721c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007220:	f001 be64 	b.w	8008eec <_fflush_r>
 8007224:	bd10      	pop	{r4, pc}
 8007226:	bf00      	nop
 8007228:	200026d4 	.word	0x200026d4
 800722c:	2000273c 	.word	0x2000273c
 8007230:	200027a4 	.word	0x200027a4

08007234 <global_stdio_init.part.0>:
 8007234:	b510      	push	{r4, lr}
 8007236:	4b0b      	ldr	r3, [pc, #44]	@ (8007264 <global_stdio_init.part.0+0x30>)
 8007238:	4c0b      	ldr	r4, [pc, #44]	@ (8007268 <global_stdio_init.part.0+0x34>)
 800723a:	4a0c      	ldr	r2, [pc, #48]	@ (800726c <global_stdio_init.part.0+0x38>)
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	4620      	mov	r0, r4
 8007240:	2200      	movs	r2, #0
 8007242:	2104      	movs	r1, #4
 8007244:	f7ff ff94 	bl	8007170 <std>
 8007248:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800724c:	2201      	movs	r2, #1
 800724e:	2109      	movs	r1, #9
 8007250:	f7ff ff8e 	bl	8007170 <std>
 8007254:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007258:	2202      	movs	r2, #2
 800725a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800725e:	2112      	movs	r1, #18
 8007260:	f7ff bf86 	b.w	8007170 <std>
 8007264:	2000280c 	.word	0x2000280c
 8007268:	200026d4 	.word	0x200026d4
 800726c:	080071dd 	.word	0x080071dd

08007270 <__sfp_lock_acquire>:
 8007270:	4801      	ldr	r0, [pc, #4]	@ (8007278 <__sfp_lock_acquire+0x8>)
 8007272:	f000 b9a6 	b.w	80075c2 <__retarget_lock_acquire_recursive>
 8007276:	bf00      	nop
 8007278:	20002815 	.word	0x20002815

0800727c <__sfp_lock_release>:
 800727c:	4801      	ldr	r0, [pc, #4]	@ (8007284 <__sfp_lock_release+0x8>)
 800727e:	f000 b9a1 	b.w	80075c4 <__retarget_lock_release_recursive>
 8007282:	bf00      	nop
 8007284:	20002815 	.word	0x20002815

08007288 <__sinit>:
 8007288:	b510      	push	{r4, lr}
 800728a:	4604      	mov	r4, r0
 800728c:	f7ff fff0 	bl	8007270 <__sfp_lock_acquire>
 8007290:	6a23      	ldr	r3, [r4, #32]
 8007292:	b11b      	cbz	r3, 800729c <__sinit+0x14>
 8007294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007298:	f7ff bff0 	b.w	800727c <__sfp_lock_release>
 800729c:	4b04      	ldr	r3, [pc, #16]	@ (80072b0 <__sinit+0x28>)
 800729e:	6223      	str	r3, [r4, #32]
 80072a0:	4b04      	ldr	r3, [pc, #16]	@ (80072b4 <__sinit+0x2c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1f5      	bne.n	8007294 <__sinit+0xc>
 80072a8:	f7ff ffc4 	bl	8007234 <global_stdio_init.part.0>
 80072ac:	e7f2      	b.n	8007294 <__sinit+0xc>
 80072ae:	bf00      	nop
 80072b0:	080071f5 	.word	0x080071f5
 80072b4:	2000280c 	.word	0x2000280c

080072b8 <_fwalk_sglue>:
 80072b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072bc:	4607      	mov	r7, r0
 80072be:	4688      	mov	r8, r1
 80072c0:	4614      	mov	r4, r2
 80072c2:	2600      	movs	r6, #0
 80072c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072c8:	f1b9 0901 	subs.w	r9, r9, #1
 80072cc:	d505      	bpl.n	80072da <_fwalk_sglue+0x22>
 80072ce:	6824      	ldr	r4, [r4, #0]
 80072d0:	2c00      	cmp	r4, #0
 80072d2:	d1f7      	bne.n	80072c4 <_fwalk_sglue+0xc>
 80072d4:	4630      	mov	r0, r6
 80072d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072da:	89ab      	ldrh	r3, [r5, #12]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d907      	bls.n	80072f0 <_fwalk_sglue+0x38>
 80072e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072e4:	3301      	adds	r3, #1
 80072e6:	d003      	beq.n	80072f0 <_fwalk_sglue+0x38>
 80072e8:	4629      	mov	r1, r5
 80072ea:	4638      	mov	r0, r7
 80072ec:	47c0      	blx	r8
 80072ee:	4306      	orrs	r6, r0
 80072f0:	3568      	adds	r5, #104	@ 0x68
 80072f2:	e7e9      	b.n	80072c8 <_fwalk_sglue+0x10>

080072f4 <sniprintf>:
 80072f4:	b40c      	push	{r2, r3}
 80072f6:	b530      	push	{r4, r5, lr}
 80072f8:	4b17      	ldr	r3, [pc, #92]	@ (8007358 <sniprintf+0x64>)
 80072fa:	1e0c      	subs	r4, r1, #0
 80072fc:	681d      	ldr	r5, [r3, #0]
 80072fe:	b09d      	sub	sp, #116	@ 0x74
 8007300:	da08      	bge.n	8007314 <sniprintf+0x20>
 8007302:	238b      	movs	r3, #139	@ 0x8b
 8007304:	602b      	str	r3, [r5, #0]
 8007306:	f04f 30ff 	mov.w	r0, #4294967295
 800730a:	b01d      	add	sp, #116	@ 0x74
 800730c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007310:	b002      	add	sp, #8
 8007312:	4770      	bx	lr
 8007314:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007318:	f8ad 3014 	strh.w	r3, [sp, #20]
 800731c:	bf14      	ite	ne
 800731e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007322:	4623      	moveq	r3, r4
 8007324:	9304      	str	r3, [sp, #16]
 8007326:	9307      	str	r3, [sp, #28]
 8007328:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800732c:	9002      	str	r0, [sp, #8]
 800732e:	9006      	str	r0, [sp, #24]
 8007330:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007334:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007336:	ab21      	add	r3, sp, #132	@ 0x84
 8007338:	a902      	add	r1, sp, #8
 800733a:	4628      	mov	r0, r5
 800733c:	9301      	str	r3, [sp, #4]
 800733e:	f001 fac7 	bl	80088d0 <_svfiprintf_r>
 8007342:	1c43      	adds	r3, r0, #1
 8007344:	bfbc      	itt	lt
 8007346:	238b      	movlt	r3, #139	@ 0x8b
 8007348:	602b      	strlt	r3, [r5, #0]
 800734a:	2c00      	cmp	r4, #0
 800734c:	d0dd      	beq.n	800730a <sniprintf+0x16>
 800734e:	9b02      	ldr	r3, [sp, #8]
 8007350:	2200      	movs	r2, #0
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	e7d9      	b.n	800730a <sniprintf+0x16>
 8007356:	bf00      	nop
 8007358:	20000190 	.word	0x20000190

0800735c <__sread>:
 800735c:	b510      	push	{r4, lr}
 800735e:	460c      	mov	r4, r1
 8007360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007364:	f000 f8de 	bl	8007524 <_read_r>
 8007368:	2800      	cmp	r0, #0
 800736a:	bfab      	itete	ge
 800736c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800736e:	89a3      	ldrhlt	r3, [r4, #12]
 8007370:	181b      	addge	r3, r3, r0
 8007372:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007376:	bfac      	ite	ge
 8007378:	6563      	strge	r3, [r4, #84]	@ 0x54
 800737a:	81a3      	strhlt	r3, [r4, #12]
 800737c:	bd10      	pop	{r4, pc}

0800737e <__swrite>:
 800737e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007382:	461f      	mov	r7, r3
 8007384:	898b      	ldrh	r3, [r1, #12]
 8007386:	05db      	lsls	r3, r3, #23
 8007388:	4605      	mov	r5, r0
 800738a:	460c      	mov	r4, r1
 800738c:	4616      	mov	r6, r2
 800738e:	d505      	bpl.n	800739c <__swrite+0x1e>
 8007390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007394:	2302      	movs	r3, #2
 8007396:	2200      	movs	r2, #0
 8007398:	f000 f8b2 	bl	8007500 <_lseek_r>
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073a6:	81a3      	strh	r3, [r4, #12]
 80073a8:	4632      	mov	r2, r6
 80073aa:	463b      	mov	r3, r7
 80073ac:	4628      	mov	r0, r5
 80073ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073b2:	f000 b8c9 	b.w	8007548 <_write_r>

080073b6 <__sseek>:
 80073b6:	b510      	push	{r4, lr}
 80073b8:	460c      	mov	r4, r1
 80073ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073be:	f000 f89f 	bl	8007500 <_lseek_r>
 80073c2:	1c43      	adds	r3, r0, #1
 80073c4:	89a3      	ldrh	r3, [r4, #12]
 80073c6:	bf15      	itete	ne
 80073c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073d2:	81a3      	strheq	r3, [r4, #12]
 80073d4:	bf18      	it	ne
 80073d6:	81a3      	strhne	r3, [r4, #12]
 80073d8:	bd10      	pop	{r4, pc}

080073da <__sclose>:
 80073da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073de:	f000 b87f 	b.w	80074e0 <_close_r>

080073e2 <_vsniprintf_r>:
 80073e2:	b530      	push	{r4, r5, lr}
 80073e4:	4614      	mov	r4, r2
 80073e6:	2c00      	cmp	r4, #0
 80073e8:	b09b      	sub	sp, #108	@ 0x6c
 80073ea:	4605      	mov	r5, r0
 80073ec:	461a      	mov	r2, r3
 80073ee:	da05      	bge.n	80073fc <_vsniprintf_r+0x1a>
 80073f0:	238b      	movs	r3, #139	@ 0x8b
 80073f2:	6003      	str	r3, [r0, #0]
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295
 80073f8:	b01b      	add	sp, #108	@ 0x6c
 80073fa:	bd30      	pop	{r4, r5, pc}
 80073fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007400:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007404:	bf14      	ite	ne
 8007406:	f104 33ff 	addne.w	r3, r4, #4294967295
 800740a:	4623      	moveq	r3, r4
 800740c:	9302      	str	r3, [sp, #8]
 800740e:	9305      	str	r3, [sp, #20]
 8007410:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007414:	9100      	str	r1, [sp, #0]
 8007416:	9104      	str	r1, [sp, #16]
 8007418:	f8ad 300e 	strh.w	r3, [sp, #14]
 800741c:	4669      	mov	r1, sp
 800741e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007420:	f001 fa56 	bl	80088d0 <_svfiprintf_r>
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	bfbc      	itt	lt
 8007428:	238b      	movlt	r3, #139	@ 0x8b
 800742a:	602b      	strlt	r3, [r5, #0]
 800742c:	2c00      	cmp	r4, #0
 800742e:	d0e3      	beq.n	80073f8 <_vsniprintf_r+0x16>
 8007430:	9b00      	ldr	r3, [sp, #0]
 8007432:	2200      	movs	r2, #0
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e7df      	b.n	80073f8 <_vsniprintf_r+0x16>

08007438 <vsniprintf>:
 8007438:	b507      	push	{r0, r1, r2, lr}
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	4613      	mov	r3, r2
 800743e:	460a      	mov	r2, r1
 8007440:	4601      	mov	r1, r0
 8007442:	4803      	ldr	r0, [pc, #12]	@ (8007450 <vsniprintf+0x18>)
 8007444:	6800      	ldr	r0, [r0, #0]
 8007446:	f7ff ffcc 	bl	80073e2 <_vsniprintf_r>
 800744a:	b003      	add	sp, #12
 800744c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007450:	20000190 	.word	0x20000190

08007454 <memset>:
 8007454:	4402      	add	r2, r0
 8007456:	4603      	mov	r3, r0
 8007458:	4293      	cmp	r3, r2
 800745a:	d100      	bne.n	800745e <memset+0xa>
 800745c:	4770      	bx	lr
 800745e:	f803 1b01 	strb.w	r1, [r3], #1
 8007462:	e7f9      	b.n	8007458 <memset+0x4>

08007464 <strncmp>:
 8007464:	b510      	push	{r4, lr}
 8007466:	b16a      	cbz	r2, 8007484 <strncmp+0x20>
 8007468:	3901      	subs	r1, #1
 800746a:	1884      	adds	r4, r0, r2
 800746c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007470:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007474:	429a      	cmp	r2, r3
 8007476:	d103      	bne.n	8007480 <strncmp+0x1c>
 8007478:	42a0      	cmp	r0, r4
 800747a:	d001      	beq.n	8007480 <strncmp+0x1c>
 800747c:	2a00      	cmp	r2, #0
 800747e:	d1f5      	bne.n	800746c <strncmp+0x8>
 8007480:	1ad0      	subs	r0, r2, r3
 8007482:	bd10      	pop	{r4, pc}
 8007484:	4610      	mov	r0, r2
 8007486:	e7fc      	b.n	8007482 <strncmp+0x1e>

08007488 <__strtok_r>:
 8007488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800748a:	4604      	mov	r4, r0
 800748c:	b908      	cbnz	r0, 8007492 <__strtok_r+0xa>
 800748e:	6814      	ldr	r4, [r2, #0]
 8007490:	b144      	cbz	r4, 80074a4 <__strtok_r+0x1c>
 8007492:	4620      	mov	r0, r4
 8007494:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007498:	460f      	mov	r7, r1
 800749a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800749e:	b91e      	cbnz	r6, 80074a8 <__strtok_r+0x20>
 80074a0:	b965      	cbnz	r5, 80074bc <__strtok_r+0x34>
 80074a2:	6015      	str	r5, [r2, #0]
 80074a4:	2000      	movs	r0, #0
 80074a6:	e005      	b.n	80074b4 <__strtok_r+0x2c>
 80074a8:	42b5      	cmp	r5, r6
 80074aa:	d1f6      	bne.n	800749a <__strtok_r+0x12>
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1f0      	bne.n	8007492 <__strtok_r+0xa>
 80074b0:	6014      	str	r4, [r2, #0]
 80074b2:	7003      	strb	r3, [r0, #0]
 80074b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074b6:	461c      	mov	r4, r3
 80074b8:	e00c      	b.n	80074d4 <__strtok_r+0x4c>
 80074ba:	b915      	cbnz	r5, 80074c2 <__strtok_r+0x3a>
 80074bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80074c0:	460e      	mov	r6, r1
 80074c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80074c6:	42ab      	cmp	r3, r5
 80074c8:	d1f7      	bne.n	80074ba <__strtok_r+0x32>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0f3      	beq.n	80074b6 <__strtok_r+0x2e>
 80074ce:	2300      	movs	r3, #0
 80074d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80074d4:	6014      	str	r4, [r2, #0]
 80074d6:	e7ed      	b.n	80074b4 <__strtok_r+0x2c>

080074d8 <strtok_r>:
 80074d8:	2301      	movs	r3, #1
 80074da:	f7ff bfd5 	b.w	8007488 <__strtok_r>
	...

080074e0 <_close_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4d06      	ldr	r5, [pc, #24]	@ (80074fc <_close_r+0x1c>)
 80074e4:	2300      	movs	r3, #0
 80074e6:	4604      	mov	r4, r0
 80074e8:	4608      	mov	r0, r1
 80074ea:	602b      	str	r3, [r5, #0]
 80074ec:	f7fb fdc3 	bl	8003076 <_close>
 80074f0:	1c43      	adds	r3, r0, #1
 80074f2:	d102      	bne.n	80074fa <_close_r+0x1a>
 80074f4:	682b      	ldr	r3, [r5, #0]
 80074f6:	b103      	cbz	r3, 80074fa <_close_r+0x1a>
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	bd38      	pop	{r3, r4, r5, pc}
 80074fc:	20002810 	.word	0x20002810

08007500 <_lseek_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	4d07      	ldr	r5, [pc, #28]	@ (8007520 <_lseek_r+0x20>)
 8007504:	4604      	mov	r4, r0
 8007506:	4608      	mov	r0, r1
 8007508:	4611      	mov	r1, r2
 800750a:	2200      	movs	r2, #0
 800750c:	602a      	str	r2, [r5, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	f7fb fdd8 	bl	80030c4 <_lseek>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d102      	bne.n	800751e <_lseek_r+0x1e>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	b103      	cbz	r3, 800751e <_lseek_r+0x1e>
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	bd38      	pop	{r3, r4, r5, pc}
 8007520:	20002810 	.word	0x20002810

08007524 <_read_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	4d07      	ldr	r5, [pc, #28]	@ (8007544 <_read_r+0x20>)
 8007528:	4604      	mov	r4, r0
 800752a:	4608      	mov	r0, r1
 800752c:	4611      	mov	r1, r2
 800752e:	2200      	movs	r2, #0
 8007530:	602a      	str	r2, [r5, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	f7fb fd66 	bl	8003004 <_read>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_read_r+0x1e>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_read_r+0x1e>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	20002810 	.word	0x20002810

08007548 <_write_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4d07      	ldr	r5, [pc, #28]	@ (8007568 <_write_r+0x20>)
 800754c:	4604      	mov	r4, r0
 800754e:	4608      	mov	r0, r1
 8007550:	4611      	mov	r1, r2
 8007552:	2200      	movs	r2, #0
 8007554:	602a      	str	r2, [r5, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	f7fb fd71 	bl	800303e <_write>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_write_r+0x1e>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	b103      	cbz	r3, 8007566 <_write_r+0x1e>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	20002810 	.word	0x20002810

0800756c <__errno>:
 800756c:	4b01      	ldr	r3, [pc, #4]	@ (8007574 <__errno+0x8>)
 800756e:	6818      	ldr	r0, [r3, #0]
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20000190 	.word	0x20000190

08007578 <__libc_init_array>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	4d0d      	ldr	r5, [pc, #52]	@ (80075b0 <__libc_init_array+0x38>)
 800757c:	4c0d      	ldr	r4, [pc, #52]	@ (80075b4 <__libc_init_array+0x3c>)
 800757e:	1b64      	subs	r4, r4, r5
 8007580:	10a4      	asrs	r4, r4, #2
 8007582:	2600      	movs	r6, #0
 8007584:	42a6      	cmp	r6, r4
 8007586:	d109      	bne.n	800759c <__libc_init_array+0x24>
 8007588:	4d0b      	ldr	r5, [pc, #44]	@ (80075b8 <__libc_init_array+0x40>)
 800758a:	4c0c      	ldr	r4, [pc, #48]	@ (80075bc <__libc_init_array+0x44>)
 800758c:	f002 f826 	bl	80095dc <_init>
 8007590:	1b64      	subs	r4, r4, r5
 8007592:	10a4      	asrs	r4, r4, #2
 8007594:	2600      	movs	r6, #0
 8007596:	42a6      	cmp	r6, r4
 8007598:	d105      	bne.n	80075a6 <__libc_init_array+0x2e>
 800759a:	bd70      	pop	{r4, r5, r6, pc}
 800759c:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a0:	4798      	blx	r3
 80075a2:	3601      	adds	r6, #1
 80075a4:	e7ee      	b.n	8007584 <__libc_init_array+0xc>
 80075a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075aa:	4798      	blx	r3
 80075ac:	3601      	adds	r6, #1
 80075ae:	e7f2      	b.n	8007596 <__libc_init_array+0x1e>
 80075b0:	08009d50 	.word	0x08009d50
 80075b4:	08009d50 	.word	0x08009d50
 80075b8:	08009d50 	.word	0x08009d50
 80075bc:	08009d54 	.word	0x08009d54

080075c0 <__retarget_lock_init_recursive>:
 80075c0:	4770      	bx	lr

080075c2 <__retarget_lock_acquire_recursive>:
 80075c2:	4770      	bx	lr

080075c4 <__retarget_lock_release_recursive>:
 80075c4:	4770      	bx	lr

080075c6 <strcpy>:
 80075c6:	4603      	mov	r3, r0
 80075c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075cc:	f803 2b01 	strb.w	r2, [r3], #1
 80075d0:	2a00      	cmp	r2, #0
 80075d2:	d1f9      	bne.n	80075c8 <strcpy+0x2>
 80075d4:	4770      	bx	lr

080075d6 <memcpy>:
 80075d6:	440a      	add	r2, r1
 80075d8:	4291      	cmp	r1, r2
 80075da:	f100 33ff 	add.w	r3, r0, #4294967295
 80075de:	d100      	bne.n	80075e2 <memcpy+0xc>
 80075e0:	4770      	bx	lr
 80075e2:	b510      	push	{r4, lr}
 80075e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ec:	4291      	cmp	r1, r2
 80075ee:	d1f9      	bne.n	80075e4 <memcpy+0xe>
 80075f0:	bd10      	pop	{r4, pc}
 80075f2:	0000      	movs	r0, r0
 80075f4:	0000      	movs	r0, r0
	...

080075f8 <nan>:
 80075f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007600 <nan+0x8>
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	00000000 	.word	0x00000000
 8007604:	7ff80000 	.word	0x7ff80000

08007608 <nanf>:
 8007608:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007610 <nanf+0x8>
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	7fc00000 	.word	0x7fc00000

08007614 <_free_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4605      	mov	r5, r0
 8007618:	2900      	cmp	r1, #0
 800761a:	d041      	beq.n	80076a0 <_free_r+0x8c>
 800761c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007620:	1f0c      	subs	r4, r1, #4
 8007622:	2b00      	cmp	r3, #0
 8007624:	bfb8      	it	lt
 8007626:	18e4      	addlt	r4, r4, r3
 8007628:	f000 fc2c 	bl	8007e84 <__malloc_lock>
 800762c:	4a1d      	ldr	r2, [pc, #116]	@ (80076a4 <_free_r+0x90>)
 800762e:	6813      	ldr	r3, [r2, #0]
 8007630:	b933      	cbnz	r3, 8007640 <_free_r+0x2c>
 8007632:	6063      	str	r3, [r4, #4]
 8007634:	6014      	str	r4, [r2, #0]
 8007636:	4628      	mov	r0, r5
 8007638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800763c:	f000 bc28 	b.w	8007e90 <__malloc_unlock>
 8007640:	42a3      	cmp	r3, r4
 8007642:	d908      	bls.n	8007656 <_free_r+0x42>
 8007644:	6820      	ldr	r0, [r4, #0]
 8007646:	1821      	adds	r1, r4, r0
 8007648:	428b      	cmp	r3, r1
 800764a:	bf01      	itttt	eq
 800764c:	6819      	ldreq	r1, [r3, #0]
 800764e:	685b      	ldreq	r3, [r3, #4]
 8007650:	1809      	addeq	r1, r1, r0
 8007652:	6021      	streq	r1, [r4, #0]
 8007654:	e7ed      	b.n	8007632 <_free_r+0x1e>
 8007656:	461a      	mov	r2, r3
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	b10b      	cbz	r3, 8007660 <_free_r+0x4c>
 800765c:	42a3      	cmp	r3, r4
 800765e:	d9fa      	bls.n	8007656 <_free_r+0x42>
 8007660:	6811      	ldr	r1, [r2, #0]
 8007662:	1850      	adds	r0, r2, r1
 8007664:	42a0      	cmp	r0, r4
 8007666:	d10b      	bne.n	8007680 <_free_r+0x6c>
 8007668:	6820      	ldr	r0, [r4, #0]
 800766a:	4401      	add	r1, r0
 800766c:	1850      	adds	r0, r2, r1
 800766e:	4283      	cmp	r3, r0
 8007670:	6011      	str	r1, [r2, #0]
 8007672:	d1e0      	bne.n	8007636 <_free_r+0x22>
 8007674:	6818      	ldr	r0, [r3, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	6053      	str	r3, [r2, #4]
 800767a:	4408      	add	r0, r1
 800767c:	6010      	str	r0, [r2, #0]
 800767e:	e7da      	b.n	8007636 <_free_r+0x22>
 8007680:	d902      	bls.n	8007688 <_free_r+0x74>
 8007682:	230c      	movs	r3, #12
 8007684:	602b      	str	r3, [r5, #0]
 8007686:	e7d6      	b.n	8007636 <_free_r+0x22>
 8007688:	6820      	ldr	r0, [r4, #0]
 800768a:	1821      	adds	r1, r4, r0
 800768c:	428b      	cmp	r3, r1
 800768e:	bf04      	itt	eq
 8007690:	6819      	ldreq	r1, [r3, #0]
 8007692:	685b      	ldreq	r3, [r3, #4]
 8007694:	6063      	str	r3, [r4, #4]
 8007696:	bf04      	itt	eq
 8007698:	1809      	addeq	r1, r1, r0
 800769a:	6021      	streq	r1, [r4, #0]
 800769c:	6054      	str	r4, [r2, #4]
 800769e:	e7ca      	b.n	8007636 <_free_r+0x22>
 80076a0:	bd38      	pop	{r3, r4, r5, pc}
 80076a2:	bf00      	nop
 80076a4:	2000281c 	.word	0x2000281c

080076a8 <rshift>:
 80076a8:	6903      	ldr	r3, [r0, #16]
 80076aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80076ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80076b6:	f100 0414 	add.w	r4, r0, #20
 80076ba:	dd45      	ble.n	8007748 <rshift+0xa0>
 80076bc:	f011 011f 	ands.w	r1, r1, #31
 80076c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80076c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80076c8:	d10c      	bne.n	80076e4 <rshift+0x3c>
 80076ca:	f100 0710 	add.w	r7, r0, #16
 80076ce:	4629      	mov	r1, r5
 80076d0:	42b1      	cmp	r1, r6
 80076d2:	d334      	bcc.n	800773e <rshift+0x96>
 80076d4:	1a9b      	subs	r3, r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	1eea      	subs	r2, r5, #3
 80076da:	4296      	cmp	r6, r2
 80076dc:	bf38      	it	cc
 80076de:	2300      	movcc	r3, #0
 80076e0:	4423      	add	r3, r4
 80076e2:	e015      	b.n	8007710 <rshift+0x68>
 80076e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80076e8:	f1c1 0820 	rsb	r8, r1, #32
 80076ec:	40cf      	lsrs	r7, r1
 80076ee:	f105 0e04 	add.w	lr, r5, #4
 80076f2:	46a1      	mov	r9, r4
 80076f4:	4576      	cmp	r6, lr
 80076f6:	46f4      	mov	ip, lr
 80076f8:	d815      	bhi.n	8007726 <rshift+0x7e>
 80076fa:	1a9a      	subs	r2, r3, r2
 80076fc:	0092      	lsls	r2, r2, #2
 80076fe:	3a04      	subs	r2, #4
 8007700:	3501      	adds	r5, #1
 8007702:	42ae      	cmp	r6, r5
 8007704:	bf38      	it	cc
 8007706:	2200      	movcc	r2, #0
 8007708:	18a3      	adds	r3, r4, r2
 800770a:	50a7      	str	r7, [r4, r2]
 800770c:	b107      	cbz	r7, 8007710 <rshift+0x68>
 800770e:	3304      	adds	r3, #4
 8007710:	1b1a      	subs	r2, r3, r4
 8007712:	42a3      	cmp	r3, r4
 8007714:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007718:	bf08      	it	eq
 800771a:	2300      	moveq	r3, #0
 800771c:	6102      	str	r2, [r0, #16]
 800771e:	bf08      	it	eq
 8007720:	6143      	streq	r3, [r0, #20]
 8007722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007726:	f8dc c000 	ldr.w	ip, [ip]
 800772a:	fa0c fc08 	lsl.w	ip, ip, r8
 800772e:	ea4c 0707 	orr.w	r7, ip, r7
 8007732:	f849 7b04 	str.w	r7, [r9], #4
 8007736:	f85e 7b04 	ldr.w	r7, [lr], #4
 800773a:	40cf      	lsrs	r7, r1
 800773c:	e7da      	b.n	80076f4 <rshift+0x4c>
 800773e:	f851 cb04 	ldr.w	ip, [r1], #4
 8007742:	f847 cf04 	str.w	ip, [r7, #4]!
 8007746:	e7c3      	b.n	80076d0 <rshift+0x28>
 8007748:	4623      	mov	r3, r4
 800774a:	e7e1      	b.n	8007710 <rshift+0x68>

0800774c <__hexdig_fun>:
 800774c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007750:	2b09      	cmp	r3, #9
 8007752:	d802      	bhi.n	800775a <__hexdig_fun+0xe>
 8007754:	3820      	subs	r0, #32
 8007756:	b2c0      	uxtb	r0, r0
 8007758:	4770      	bx	lr
 800775a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800775e:	2b05      	cmp	r3, #5
 8007760:	d801      	bhi.n	8007766 <__hexdig_fun+0x1a>
 8007762:	3847      	subs	r0, #71	@ 0x47
 8007764:	e7f7      	b.n	8007756 <__hexdig_fun+0xa>
 8007766:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800776a:	2b05      	cmp	r3, #5
 800776c:	d801      	bhi.n	8007772 <__hexdig_fun+0x26>
 800776e:	3827      	subs	r0, #39	@ 0x27
 8007770:	e7f1      	b.n	8007756 <__hexdig_fun+0xa>
 8007772:	2000      	movs	r0, #0
 8007774:	4770      	bx	lr
	...

08007778 <__gethex>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	b085      	sub	sp, #20
 800777e:	468a      	mov	sl, r1
 8007780:	9302      	str	r3, [sp, #8]
 8007782:	680b      	ldr	r3, [r1, #0]
 8007784:	9001      	str	r0, [sp, #4]
 8007786:	4690      	mov	r8, r2
 8007788:	1c9c      	adds	r4, r3, #2
 800778a:	46a1      	mov	r9, r4
 800778c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007790:	2830      	cmp	r0, #48	@ 0x30
 8007792:	d0fa      	beq.n	800778a <__gethex+0x12>
 8007794:	eba9 0303 	sub.w	r3, r9, r3
 8007798:	f1a3 0b02 	sub.w	fp, r3, #2
 800779c:	f7ff ffd6 	bl	800774c <__hexdig_fun>
 80077a0:	4605      	mov	r5, r0
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d168      	bne.n	8007878 <__gethex+0x100>
 80077a6:	49a0      	ldr	r1, [pc, #640]	@ (8007a28 <__gethex+0x2b0>)
 80077a8:	2201      	movs	r2, #1
 80077aa:	4648      	mov	r0, r9
 80077ac:	f7ff fe5a 	bl	8007464 <strncmp>
 80077b0:	4607      	mov	r7, r0
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d167      	bne.n	8007886 <__gethex+0x10e>
 80077b6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80077ba:	4626      	mov	r6, r4
 80077bc:	f7ff ffc6 	bl	800774c <__hexdig_fun>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d062      	beq.n	800788a <__gethex+0x112>
 80077c4:	4623      	mov	r3, r4
 80077c6:	7818      	ldrb	r0, [r3, #0]
 80077c8:	2830      	cmp	r0, #48	@ 0x30
 80077ca:	4699      	mov	r9, r3
 80077cc:	f103 0301 	add.w	r3, r3, #1
 80077d0:	d0f9      	beq.n	80077c6 <__gethex+0x4e>
 80077d2:	f7ff ffbb 	bl	800774c <__hexdig_fun>
 80077d6:	fab0 f580 	clz	r5, r0
 80077da:	096d      	lsrs	r5, r5, #5
 80077dc:	f04f 0b01 	mov.w	fp, #1
 80077e0:	464a      	mov	r2, r9
 80077e2:	4616      	mov	r6, r2
 80077e4:	3201      	adds	r2, #1
 80077e6:	7830      	ldrb	r0, [r6, #0]
 80077e8:	f7ff ffb0 	bl	800774c <__hexdig_fun>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d1f8      	bne.n	80077e2 <__gethex+0x6a>
 80077f0:	498d      	ldr	r1, [pc, #564]	@ (8007a28 <__gethex+0x2b0>)
 80077f2:	2201      	movs	r2, #1
 80077f4:	4630      	mov	r0, r6
 80077f6:	f7ff fe35 	bl	8007464 <strncmp>
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d13f      	bne.n	800787e <__gethex+0x106>
 80077fe:	b944      	cbnz	r4, 8007812 <__gethex+0x9a>
 8007800:	1c74      	adds	r4, r6, #1
 8007802:	4622      	mov	r2, r4
 8007804:	4616      	mov	r6, r2
 8007806:	3201      	adds	r2, #1
 8007808:	7830      	ldrb	r0, [r6, #0]
 800780a:	f7ff ff9f 	bl	800774c <__hexdig_fun>
 800780e:	2800      	cmp	r0, #0
 8007810:	d1f8      	bne.n	8007804 <__gethex+0x8c>
 8007812:	1ba4      	subs	r4, r4, r6
 8007814:	00a7      	lsls	r7, r4, #2
 8007816:	7833      	ldrb	r3, [r6, #0]
 8007818:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800781c:	2b50      	cmp	r3, #80	@ 0x50
 800781e:	d13e      	bne.n	800789e <__gethex+0x126>
 8007820:	7873      	ldrb	r3, [r6, #1]
 8007822:	2b2b      	cmp	r3, #43	@ 0x2b
 8007824:	d033      	beq.n	800788e <__gethex+0x116>
 8007826:	2b2d      	cmp	r3, #45	@ 0x2d
 8007828:	d034      	beq.n	8007894 <__gethex+0x11c>
 800782a:	1c71      	adds	r1, r6, #1
 800782c:	2400      	movs	r4, #0
 800782e:	7808      	ldrb	r0, [r1, #0]
 8007830:	f7ff ff8c 	bl	800774c <__hexdig_fun>
 8007834:	1e43      	subs	r3, r0, #1
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b18      	cmp	r3, #24
 800783a:	d830      	bhi.n	800789e <__gethex+0x126>
 800783c:	f1a0 0210 	sub.w	r2, r0, #16
 8007840:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007844:	f7ff ff82 	bl	800774c <__hexdig_fun>
 8007848:	f100 3cff 	add.w	ip, r0, #4294967295
 800784c:	fa5f fc8c 	uxtb.w	ip, ip
 8007850:	f1bc 0f18 	cmp.w	ip, #24
 8007854:	f04f 030a 	mov.w	r3, #10
 8007858:	d91e      	bls.n	8007898 <__gethex+0x120>
 800785a:	b104      	cbz	r4, 800785e <__gethex+0xe6>
 800785c:	4252      	negs	r2, r2
 800785e:	4417      	add	r7, r2
 8007860:	f8ca 1000 	str.w	r1, [sl]
 8007864:	b1ed      	cbz	r5, 80078a2 <__gethex+0x12a>
 8007866:	f1bb 0f00 	cmp.w	fp, #0
 800786a:	bf0c      	ite	eq
 800786c:	2506      	moveq	r5, #6
 800786e:	2500      	movne	r5, #0
 8007870:	4628      	mov	r0, r5
 8007872:	b005      	add	sp, #20
 8007874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007878:	2500      	movs	r5, #0
 800787a:	462c      	mov	r4, r5
 800787c:	e7b0      	b.n	80077e0 <__gethex+0x68>
 800787e:	2c00      	cmp	r4, #0
 8007880:	d1c7      	bne.n	8007812 <__gethex+0x9a>
 8007882:	4627      	mov	r7, r4
 8007884:	e7c7      	b.n	8007816 <__gethex+0x9e>
 8007886:	464e      	mov	r6, r9
 8007888:	462f      	mov	r7, r5
 800788a:	2501      	movs	r5, #1
 800788c:	e7c3      	b.n	8007816 <__gethex+0x9e>
 800788e:	2400      	movs	r4, #0
 8007890:	1cb1      	adds	r1, r6, #2
 8007892:	e7cc      	b.n	800782e <__gethex+0xb6>
 8007894:	2401      	movs	r4, #1
 8007896:	e7fb      	b.n	8007890 <__gethex+0x118>
 8007898:	fb03 0002 	mla	r0, r3, r2, r0
 800789c:	e7ce      	b.n	800783c <__gethex+0xc4>
 800789e:	4631      	mov	r1, r6
 80078a0:	e7de      	b.n	8007860 <__gethex+0xe8>
 80078a2:	eba6 0309 	sub.w	r3, r6, r9
 80078a6:	3b01      	subs	r3, #1
 80078a8:	4629      	mov	r1, r5
 80078aa:	2b07      	cmp	r3, #7
 80078ac:	dc0a      	bgt.n	80078c4 <__gethex+0x14c>
 80078ae:	9801      	ldr	r0, [sp, #4]
 80078b0:	f000 faf4 	bl	8007e9c <_Balloc>
 80078b4:	4604      	mov	r4, r0
 80078b6:	b940      	cbnz	r0, 80078ca <__gethex+0x152>
 80078b8:	4b5c      	ldr	r3, [pc, #368]	@ (8007a2c <__gethex+0x2b4>)
 80078ba:	4602      	mov	r2, r0
 80078bc:	21e4      	movs	r1, #228	@ 0xe4
 80078be:	485c      	ldr	r0, [pc, #368]	@ (8007a30 <__gethex+0x2b8>)
 80078c0:	f001 fb66 	bl	8008f90 <__assert_func>
 80078c4:	3101      	adds	r1, #1
 80078c6:	105b      	asrs	r3, r3, #1
 80078c8:	e7ef      	b.n	80078aa <__gethex+0x132>
 80078ca:	f100 0a14 	add.w	sl, r0, #20
 80078ce:	2300      	movs	r3, #0
 80078d0:	4655      	mov	r5, sl
 80078d2:	469b      	mov	fp, r3
 80078d4:	45b1      	cmp	r9, r6
 80078d6:	d337      	bcc.n	8007948 <__gethex+0x1d0>
 80078d8:	f845 bb04 	str.w	fp, [r5], #4
 80078dc:	eba5 050a 	sub.w	r5, r5, sl
 80078e0:	10ad      	asrs	r5, r5, #2
 80078e2:	6125      	str	r5, [r4, #16]
 80078e4:	4658      	mov	r0, fp
 80078e6:	f000 fbcb 	bl	8008080 <__hi0bits>
 80078ea:	016d      	lsls	r5, r5, #5
 80078ec:	f8d8 6000 	ldr.w	r6, [r8]
 80078f0:	1a2d      	subs	r5, r5, r0
 80078f2:	42b5      	cmp	r5, r6
 80078f4:	dd54      	ble.n	80079a0 <__gethex+0x228>
 80078f6:	1bad      	subs	r5, r5, r6
 80078f8:	4629      	mov	r1, r5
 80078fa:	4620      	mov	r0, r4
 80078fc:	f000 ff5f 	bl	80087be <__any_on>
 8007900:	4681      	mov	r9, r0
 8007902:	b178      	cbz	r0, 8007924 <__gethex+0x1ac>
 8007904:	1e6b      	subs	r3, r5, #1
 8007906:	1159      	asrs	r1, r3, #5
 8007908:	f003 021f 	and.w	r2, r3, #31
 800790c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007910:	f04f 0901 	mov.w	r9, #1
 8007914:	fa09 f202 	lsl.w	r2, r9, r2
 8007918:	420a      	tst	r2, r1
 800791a:	d003      	beq.n	8007924 <__gethex+0x1ac>
 800791c:	454b      	cmp	r3, r9
 800791e:	dc36      	bgt.n	800798e <__gethex+0x216>
 8007920:	f04f 0902 	mov.w	r9, #2
 8007924:	4629      	mov	r1, r5
 8007926:	4620      	mov	r0, r4
 8007928:	f7ff febe 	bl	80076a8 <rshift>
 800792c:	442f      	add	r7, r5
 800792e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007932:	42bb      	cmp	r3, r7
 8007934:	da42      	bge.n	80079bc <__gethex+0x244>
 8007936:	9801      	ldr	r0, [sp, #4]
 8007938:	4621      	mov	r1, r4
 800793a:	f000 faef 	bl	8007f1c <_Bfree>
 800793e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007940:	2300      	movs	r3, #0
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	25a3      	movs	r5, #163	@ 0xa3
 8007946:	e793      	b.n	8007870 <__gethex+0xf8>
 8007948:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800794c:	2a2e      	cmp	r2, #46	@ 0x2e
 800794e:	d012      	beq.n	8007976 <__gethex+0x1fe>
 8007950:	2b20      	cmp	r3, #32
 8007952:	d104      	bne.n	800795e <__gethex+0x1e6>
 8007954:	f845 bb04 	str.w	fp, [r5], #4
 8007958:	f04f 0b00 	mov.w	fp, #0
 800795c:	465b      	mov	r3, fp
 800795e:	7830      	ldrb	r0, [r6, #0]
 8007960:	9303      	str	r3, [sp, #12]
 8007962:	f7ff fef3 	bl	800774c <__hexdig_fun>
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	f000 000f 	and.w	r0, r0, #15
 800796c:	4098      	lsls	r0, r3
 800796e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007972:	3304      	adds	r3, #4
 8007974:	e7ae      	b.n	80078d4 <__gethex+0x15c>
 8007976:	45b1      	cmp	r9, r6
 8007978:	d8ea      	bhi.n	8007950 <__gethex+0x1d8>
 800797a:	492b      	ldr	r1, [pc, #172]	@ (8007a28 <__gethex+0x2b0>)
 800797c:	9303      	str	r3, [sp, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	4630      	mov	r0, r6
 8007982:	f7ff fd6f 	bl	8007464 <strncmp>
 8007986:	9b03      	ldr	r3, [sp, #12]
 8007988:	2800      	cmp	r0, #0
 800798a:	d1e1      	bne.n	8007950 <__gethex+0x1d8>
 800798c:	e7a2      	b.n	80078d4 <__gethex+0x15c>
 800798e:	1ea9      	subs	r1, r5, #2
 8007990:	4620      	mov	r0, r4
 8007992:	f000 ff14 	bl	80087be <__any_on>
 8007996:	2800      	cmp	r0, #0
 8007998:	d0c2      	beq.n	8007920 <__gethex+0x1a8>
 800799a:	f04f 0903 	mov.w	r9, #3
 800799e:	e7c1      	b.n	8007924 <__gethex+0x1ac>
 80079a0:	da09      	bge.n	80079b6 <__gethex+0x23e>
 80079a2:	1b75      	subs	r5, r6, r5
 80079a4:	4621      	mov	r1, r4
 80079a6:	9801      	ldr	r0, [sp, #4]
 80079a8:	462a      	mov	r2, r5
 80079aa:	f000 fccf 	bl	800834c <__lshift>
 80079ae:	1b7f      	subs	r7, r7, r5
 80079b0:	4604      	mov	r4, r0
 80079b2:	f100 0a14 	add.w	sl, r0, #20
 80079b6:	f04f 0900 	mov.w	r9, #0
 80079ba:	e7b8      	b.n	800792e <__gethex+0x1b6>
 80079bc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80079c0:	42bd      	cmp	r5, r7
 80079c2:	dd6f      	ble.n	8007aa4 <__gethex+0x32c>
 80079c4:	1bed      	subs	r5, r5, r7
 80079c6:	42ae      	cmp	r6, r5
 80079c8:	dc34      	bgt.n	8007a34 <__gethex+0x2bc>
 80079ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d022      	beq.n	8007a18 <__gethex+0x2a0>
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d024      	beq.n	8007a20 <__gethex+0x2a8>
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d115      	bne.n	8007a06 <__gethex+0x28e>
 80079da:	42ae      	cmp	r6, r5
 80079dc:	d113      	bne.n	8007a06 <__gethex+0x28e>
 80079de:	2e01      	cmp	r6, #1
 80079e0:	d10b      	bne.n	80079fa <__gethex+0x282>
 80079e2:	9a02      	ldr	r2, [sp, #8]
 80079e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	2301      	movs	r3, #1
 80079ec:	6123      	str	r3, [r4, #16]
 80079ee:	f8ca 3000 	str.w	r3, [sl]
 80079f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079f4:	2562      	movs	r5, #98	@ 0x62
 80079f6:	601c      	str	r4, [r3, #0]
 80079f8:	e73a      	b.n	8007870 <__gethex+0xf8>
 80079fa:	1e71      	subs	r1, r6, #1
 80079fc:	4620      	mov	r0, r4
 80079fe:	f000 fede 	bl	80087be <__any_on>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d1ed      	bne.n	80079e2 <__gethex+0x26a>
 8007a06:	9801      	ldr	r0, [sp, #4]
 8007a08:	4621      	mov	r1, r4
 8007a0a:	f000 fa87 	bl	8007f1c <_Bfree>
 8007a0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a10:	2300      	movs	r3, #0
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	2550      	movs	r5, #80	@ 0x50
 8007a16:	e72b      	b.n	8007870 <__gethex+0xf8>
 8007a18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1f3      	bne.n	8007a06 <__gethex+0x28e>
 8007a1e:	e7e0      	b.n	80079e2 <__gethex+0x26a>
 8007a20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1dd      	bne.n	80079e2 <__gethex+0x26a>
 8007a26:	e7ee      	b.n	8007a06 <__gethex+0x28e>
 8007a28:	0800998c 	.word	0x0800998c
 8007a2c:	08009af9 	.word	0x08009af9
 8007a30:	08009b0a 	.word	0x08009b0a
 8007a34:	1e6f      	subs	r7, r5, #1
 8007a36:	f1b9 0f00 	cmp.w	r9, #0
 8007a3a:	d130      	bne.n	8007a9e <__gethex+0x326>
 8007a3c:	b127      	cbz	r7, 8007a48 <__gethex+0x2d0>
 8007a3e:	4639      	mov	r1, r7
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 febc 	bl	80087be <__any_on>
 8007a46:	4681      	mov	r9, r0
 8007a48:	117a      	asrs	r2, r7, #5
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007a50:	f007 071f 	and.w	r7, r7, #31
 8007a54:	40bb      	lsls	r3, r7
 8007a56:	4213      	tst	r3, r2
 8007a58:	4629      	mov	r1, r5
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	bf18      	it	ne
 8007a5e:	f049 0902 	orrne.w	r9, r9, #2
 8007a62:	f7ff fe21 	bl	80076a8 <rshift>
 8007a66:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007a6a:	1b76      	subs	r6, r6, r5
 8007a6c:	2502      	movs	r5, #2
 8007a6e:	f1b9 0f00 	cmp.w	r9, #0
 8007a72:	d047      	beq.n	8007b04 <__gethex+0x38c>
 8007a74:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d015      	beq.n	8007aa8 <__gethex+0x330>
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d017      	beq.n	8007ab0 <__gethex+0x338>
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d109      	bne.n	8007a98 <__gethex+0x320>
 8007a84:	f019 0f02 	tst.w	r9, #2
 8007a88:	d006      	beq.n	8007a98 <__gethex+0x320>
 8007a8a:	f8da 3000 	ldr.w	r3, [sl]
 8007a8e:	ea49 0903 	orr.w	r9, r9, r3
 8007a92:	f019 0f01 	tst.w	r9, #1
 8007a96:	d10e      	bne.n	8007ab6 <__gethex+0x33e>
 8007a98:	f045 0510 	orr.w	r5, r5, #16
 8007a9c:	e032      	b.n	8007b04 <__gethex+0x38c>
 8007a9e:	f04f 0901 	mov.w	r9, #1
 8007aa2:	e7d1      	b.n	8007a48 <__gethex+0x2d0>
 8007aa4:	2501      	movs	r5, #1
 8007aa6:	e7e2      	b.n	8007a6e <__gethex+0x2f6>
 8007aa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aaa:	f1c3 0301 	rsb	r3, r3, #1
 8007aae:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0f0      	beq.n	8007a98 <__gethex+0x320>
 8007ab6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007aba:	f104 0314 	add.w	r3, r4, #20
 8007abe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007ac2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007ac6:	f04f 0c00 	mov.w	ip, #0
 8007aca:	4618      	mov	r0, r3
 8007acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ad0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007ad4:	d01b      	beq.n	8007b0e <__gethex+0x396>
 8007ad6:	3201      	adds	r2, #1
 8007ad8:	6002      	str	r2, [r0, #0]
 8007ada:	2d02      	cmp	r5, #2
 8007adc:	f104 0314 	add.w	r3, r4, #20
 8007ae0:	d13c      	bne.n	8007b5c <__gethex+0x3e4>
 8007ae2:	f8d8 2000 	ldr.w	r2, [r8]
 8007ae6:	3a01      	subs	r2, #1
 8007ae8:	42b2      	cmp	r2, r6
 8007aea:	d109      	bne.n	8007b00 <__gethex+0x388>
 8007aec:	1171      	asrs	r1, r6, #5
 8007aee:	2201      	movs	r2, #1
 8007af0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007af4:	f006 061f 	and.w	r6, r6, #31
 8007af8:	fa02 f606 	lsl.w	r6, r2, r6
 8007afc:	421e      	tst	r6, r3
 8007afe:	d13a      	bne.n	8007b76 <__gethex+0x3fe>
 8007b00:	f045 0520 	orr.w	r5, r5, #32
 8007b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b06:	601c      	str	r4, [r3, #0]
 8007b08:	9b02      	ldr	r3, [sp, #8]
 8007b0a:	601f      	str	r7, [r3, #0]
 8007b0c:	e6b0      	b.n	8007870 <__gethex+0xf8>
 8007b0e:	4299      	cmp	r1, r3
 8007b10:	f843 cc04 	str.w	ip, [r3, #-4]
 8007b14:	d8d9      	bhi.n	8007aca <__gethex+0x352>
 8007b16:	68a3      	ldr	r3, [r4, #8]
 8007b18:	459b      	cmp	fp, r3
 8007b1a:	db17      	blt.n	8007b4c <__gethex+0x3d4>
 8007b1c:	6861      	ldr	r1, [r4, #4]
 8007b1e:	9801      	ldr	r0, [sp, #4]
 8007b20:	3101      	adds	r1, #1
 8007b22:	f000 f9bb 	bl	8007e9c <_Balloc>
 8007b26:	4681      	mov	r9, r0
 8007b28:	b918      	cbnz	r0, 8007b32 <__gethex+0x3ba>
 8007b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8007b94 <__gethex+0x41c>)
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	2184      	movs	r1, #132	@ 0x84
 8007b30:	e6c5      	b.n	80078be <__gethex+0x146>
 8007b32:	6922      	ldr	r2, [r4, #16]
 8007b34:	3202      	adds	r2, #2
 8007b36:	f104 010c 	add.w	r1, r4, #12
 8007b3a:	0092      	lsls	r2, r2, #2
 8007b3c:	300c      	adds	r0, #12
 8007b3e:	f7ff fd4a 	bl	80075d6 <memcpy>
 8007b42:	4621      	mov	r1, r4
 8007b44:	9801      	ldr	r0, [sp, #4]
 8007b46:	f000 f9e9 	bl	8007f1c <_Bfree>
 8007b4a:	464c      	mov	r4, r9
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b54:	6122      	str	r2, [r4, #16]
 8007b56:	2201      	movs	r2, #1
 8007b58:	615a      	str	r2, [r3, #20]
 8007b5a:	e7be      	b.n	8007ada <__gethex+0x362>
 8007b5c:	6922      	ldr	r2, [r4, #16]
 8007b5e:	455a      	cmp	r2, fp
 8007b60:	dd0b      	ble.n	8007b7a <__gethex+0x402>
 8007b62:	2101      	movs	r1, #1
 8007b64:	4620      	mov	r0, r4
 8007b66:	f7ff fd9f 	bl	80076a8 <rshift>
 8007b6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b6e:	3701      	adds	r7, #1
 8007b70:	42bb      	cmp	r3, r7
 8007b72:	f6ff aee0 	blt.w	8007936 <__gethex+0x1be>
 8007b76:	2501      	movs	r5, #1
 8007b78:	e7c2      	b.n	8007b00 <__gethex+0x388>
 8007b7a:	f016 061f 	ands.w	r6, r6, #31
 8007b7e:	d0fa      	beq.n	8007b76 <__gethex+0x3fe>
 8007b80:	4453      	add	r3, sl
 8007b82:	f1c6 0620 	rsb	r6, r6, #32
 8007b86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007b8a:	f000 fa79 	bl	8008080 <__hi0bits>
 8007b8e:	42b0      	cmp	r0, r6
 8007b90:	dbe7      	blt.n	8007b62 <__gethex+0x3ea>
 8007b92:	e7f0      	b.n	8007b76 <__gethex+0x3fe>
 8007b94:	08009af9 	.word	0x08009af9

08007b98 <L_shift>:
 8007b98:	f1c2 0208 	rsb	r2, r2, #8
 8007b9c:	0092      	lsls	r2, r2, #2
 8007b9e:	b570      	push	{r4, r5, r6, lr}
 8007ba0:	f1c2 0620 	rsb	r6, r2, #32
 8007ba4:	6843      	ldr	r3, [r0, #4]
 8007ba6:	6804      	ldr	r4, [r0, #0]
 8007ba8:	fa03 f506 	lsl.w	r5, r3, r6
 8007bac:	432c      	orrs	r4, r5
 8007bae:	40d3      	lsrs	r3, r2
 8007bb0:	6004      	str	r4, [r0, #0]
 8007bb2:	f840 3f04 	str.w	r3, [r0, #4]!
 8007bb6:	4288      	cmp	r0, r1
 8007bb8:	d3f4      	bcc.n	8007ba4 <L_shift+0xc>
 8007bba:	bd70      	pop	{r4, r5, r6, pc}

08007bbc <__match>:
 8007bbc:	b530      	push	{r4, r5, lr}
 8007bbe:	6803      	ldr	r3, [r0, #0]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bc6:	b914      	cbnz	r4, 8007bce <__match+0x12>
 8007bc8:	6003      	str	r3, [r0, #0]
 8007bca:	2001      	movs	r0, #1
 8007bcc:	bd30      	pop	{r4, r5, pc}
 8007bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bd2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007bd6:	2d19      	cmp	r5, #25
 8007bd8:	bf98      	it	ls
 8007bda:	3220      	addls	r2, #32
 8007bdc:	42a2      	cmp	r2, r4
 8007bde:	d0f0      	beq.n	8007bc2 <__match+0x6>
 8007be0:	2000      	movs	r0, #0
 8007be2:	e7f3      	b.n	8007bcc <__match+0x10>

08007be4 <__hexnan>:
 8007be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be8:	680b      	ldr	r3, [r1, #0]
 8007bea:	6801      	ldr	r1, [r0, #0]
 8007bec:	115e      	asrs	r6, r3, #5
 8007bee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007bf2:	f013 031f 	ands.w	r3, r3, #31
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	bf18      	it	ne
 8007bfa:	3604      	addne	r6, #4
 8007bfc:	2500      	movs	r5, #0
 8007bfe:	1f37      	subs	r7, r6, #4
 8007c00:	4682      	mov	sl, r0
 8007c02:	4690      	mov	r8, r2
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	f846 5c04 	str.w	r5, [r6, #-4]
 8007c0a:	46b9      	mov	r9, r7
 8007c0c:	463c      	mov	r4, r7
 8007c0e:	9502      	str	r5, [sp, #8]
 8007c10:	46ab      	mov	fp, r5
 8007c12:	784a      	ldrb	r2, [r1, #1]
 8007c14:	1c4b      	adds	r3, r1, #1
 8007c16:	9303      	str	r3, [sp, #12]
 8007c18:	b342      	cbz	r2, 8007c6c <__hexnan+0x88>
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	9105      	str	r1, [sp, #20]
 8007c1e:	9204      	str	r2, [sp, #16]
 8007c20:	f7ff fd94 	bl	800774c <__hexdig_fun>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d151      	bne.n	8007ccc <__hexnan+0xe8>
 8007c28:	9a04      	ldr	r2, [sp, #16]
 8007c2a:	9905      	ldr	r1, [sp, #20]
 8007c2c:	2a20      	cmp	r2, #32
 8007c2e:	d818      	bhi.n	8007c62 <__hexnan+0x7e>
 8007c30:	9b02      	ldr	r3, [sp, #8]
 8007c32:	459b      	cmp	fp, r3
 8007c34:	dd13      	ble.n	8007c5e <__hexnan+0x7a>
 8007c36:	454c      	cmp	r4, r9
 8007c38:	d206      	bcs.n	8007c48 <__hexnan+0x64>
 8007c3a:	2d07      	cmp	r5, #7
 8007c3c:	dc04      	bgt.n	8007c48 <__hexnan+0x64>
 8007c3e:	462a      	mov	r2, r5
 8007c40:	4649      	mov	r1, r9
 8007c42:	4620      	mov	r0, r4
 8007c44:	f7ff ffa8 	bl	8007b98 <L_shift>
 8007c48:	4544      	cmp	r4, r8
 8007c4a:	d952      	bls.n	8007cf2 <__hexnan+0x10e>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f1a4 0904 	sub.w	r9, r4, #4
 8007c52:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c56:	f8cd b008 	str.w	fp, [sp, #8]
 8007c5a:	464c      	mov	r4, r9
 8007c5c:	461d      	mov	r5, r3
 8007c5e:	9903      	ldr	r1, [sp, #12]
 8007c60:	e7d7      	b.n	8007c12 <__hexnan+0x2e>
 8007c62:	2a29      	cmp	r2, #41	@ 0x29
 8007c64:	d157      	bne.n	8007d16 <__hexnan+0x132>
 8007c66:	3102      	adds	r1, #2
 8007c68:	f8ca 1000 	str.w	r1, [sl]
 8007c6c:	f1bb 0f00 	cmp.w	fp, #0
 8007c70:	d051      	beq.n	8007d16 <__hexnan+0x132>
 8007c72:	454c      	cmp	r4, r9
 8007c74:	d206      	bcs.n	8007c84 <__hexnan+0xa0>
 8007c76:	2d07      	cmp	r5, #7
 8007c78:	dc04      	bgt.n	8007c84 <__hexnan+0xa0>
 8007c7a:	462a      	mov	r2, r5
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f7ff ff8a 	bl	8007b98 <L_shift>
 8007c84:	4544      	cmp	r4, r8
 8007c86:	d936      	bls.n	8007cf6 <__hexnan+0x112>
 8007c88:	f1a8 0204 	sub.w	r2, r8, #4
 8007c8c:	4623      	mov	r3, r4
 8007c8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007c92:	f842 1f04 	str.w	r1, [r2, #4]!
 8007c96:	429f      	cmp	r7, r3
 8007c98:	d2f9      	bcs.n	8007c8e <__hexnan+0xaa>
 8007c9a:	1b3b      	subs	r3, r7, r4
 8007c9c:	f023 0303 	bic.w	r3, r3, #3
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	3401      	adds	r4, #1
 8007ca4:	3e03      	subs	r6, #3
 8007ca6:	42b4      	cmp	r4, r6
 8007ca8:	bf88      	it	hi
 8007caa:	2304      	movhi	r3, #4
 8007cac:	4443      	add	r3, r8
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f843 2b04 	str.w	r2, [r3], #4
 8007cb4:	429f      	cmp	r7, r3
 8007cb6:	d2fb      	bcs.n	8007cb0 <__hexnan+0xcc>
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	b91b      	cbnz	r3, 8007cc4 <__hexnan+0xe0>
 8007cbc:	4547      	cmp	r7, r8
 8007cbe:	d128      	bne.n	8007d12 <__hexnan+0x12e>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	603b      	str	r3, [r7, #0]
 8007cc4:	2005      	movs	r0, #5
 8007cc6:	b007      	add	sp, #28
 8007cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ccc:	3501      	adds	r5, #1
 8007cce:	2d08      	cmp	r5, #8
 8007cd0:	f10b 0b01 	add.w	fp, fp, #1
 8007cd4:	dd06      	ble.n	8007ce4 <__hexnan+0x100>
 8007cd6:	4544      	cmp	r4, r8
 8007cd8:	d9c1      	bls.n	8007c5e <__hexnan+0x7a>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ce0:	2501      	movs	r5, #1
 8007ce2:	3c04      	subs	r4, #4
 8007ce4:	6822      	ldr	r2, [r4, #0]
 8007ce6:	f000 000f 	and.w	r0, r0, #15
 8007cea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007cee:	6020      	str	r0, [r4, #0]
 8007cf0:	e7b5      	b.n	8007c5e <__hexnan+0x7a>
 8007cf2:	2508      	movs	r5, #8
 8007cf4:	e7b3      	b.n	8007c5e <__hexnan+0x7a>
 8007cf6:	9b01      	ldr	r3, [sp, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d0dd      	beq.n	8007cb8 <__hexnan+0xd4>
 8007cfc:	f1c3 0320 	rsb	r3, r3, #32
 8007d00:	f04f 32ff 	mov.w	r2, #4294967295
 8007d04:	40da      	lsrs	r2, r3
 8007d06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007d10:	e7d2      	b.n	8007cb8 <__hexnan+0xd4>
 8007d12:	3f04      	subs	r7, #4
 8007d14:	e7d0      	b.n	8007cb8 <__hexnan+0xd4>
 8007d16:	2004      	movs	r0, #4
 8007d18:	e7d5      	b.n	8007cc6 <__hexnan+0xe2>
	...

08007d1c <sbrk_aligned>:
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	4e0f      	ldr	r6, [pc, #60]	@ (8007d5c <sbrk_aligned+0x40>)
 8007d20:	460c      	mov	r4, r1
 8007d22:	6831      	ldr	r1, [r6, #0]
 8007d24:	4605      	mov	r5, r0
 8007d26:	b911      	cbnz	r1, 8007d2e <sbrk_aligned+0x12>
 8007d28:	f001 f922 	bl	8008f70 <_sbrk_r>
 8007d2c:	6030      	str	r0, [r6, #0]
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4628      	mov	r0, r5
 8007d32:	f001 f91d 	bl	8008f70 <_sbrk_r>
 8007d36:	1c43      	adds	r3, r0, #1
 8007d38:	d103      	bne.n	8007d42 <sbrk_aligned+0x26>
 8007d3a:	f04f 34ff 	mov.w	r4, #4294967295
 8007d3e:	4620      	mov	r0, r4
 8007d40:	bd70      	pop	{r4, r5, r6, pc}
 8007d42:	1cc4      	adds	r4, r0, #3
 8007d44:	f024 0403 	bic.w	r4, r4, #3
 8007d48:	42a0      	cmp	r0, r4
 8007d4a:	d0f8      	beq.n	8007d3e <sbrk_aligned+0x22>
 8007d4c:	1a21      	subs	r1, r4, r0
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f001 f90e 	bl	8008f70 <_sbrk_r>
 8007d54:	3001      	adds	r0, #1
 8007d56:	d1f2      	bne.n	8007d3e <sbrk_aligned+0x22>
 8007d58:	e7ef      	b.n	8007d3a <sbrk_aligned+0x1e>
 8007d5a:	bf00      	nop
 8007d5c:	20002818 	.word	0x20002818

08007d60 <_malloc_r>:
 8007d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d64:	1ccd      	adds	r5, r1, #3
 8007d66:	f025 0503 	bic.w	r5, r5, #3
 8007d6a:	3508      	adds	r5, #8
 8007d6c:	2d0c      	cmp	r5, #12
 8007d6e:	bf38      	it	cc
 8007d70:	250c      	movcc	r5, #12
 8007d72:	2d00      	cmp	r5, #0
 8007d74:	4606      	mov	r6, r0
 8007d76:	db01      	blt.n	8007d7c <_malloc_r+0x1c>
 8007d78:	42a9      	cmp	r1, r5
 8007d7a:	d904      	bls.n	8007d86 <_malloc_r+0x26>
 8007d7c:	230c      	movs	r3, #12
 8007d7e:	6033      	str	r3, [r6, #0]
 8007d80:	2000      	movs	r0, #0
 8007d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e5c <_malloc_r+0xfc>
 8007d8a:	f000 f87b 	bl	8007e84 <__malloc_lock>
 8007d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d92:	461c      	mov	r4, r3
 8007d94:	bb44      	cbnz	r4, 8007de8 <_malloc_r+0x88>
 8007d96:	4629      	mov	r1, r5
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f7ff ffbf 	bl	8007d1c <sbrk_aligned>
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	4604      	mov	r4, r0
 8007da2:	d158      	bne.n	8007e56 <_malloc_r+0xf6>
 8007da4:	f8d8 4000 	ldr.w	r4, [r8]
 8007da8:	4627      	mov	r7, r4
 8007daa:	2f00      	cmp	r7, #0
 8007dac:	d143      	bne.n	8007e36 <_malloc_r+0xd6>
 8007dae:	2c00      	cmp	r4, #0
 8007db0:	d04b      	beq.n	8007e4a <_malloc_r+0xea>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	4639      	mov	r1, r7
 8007db6:	4630      	mov	r0, r6
 8007db8:	eb04 0903 	add.w	r9, r4, r3
 8007dbc:	f001 f8d8 	bl	8008f70 <_sbrk_r>
 8007dc0:	4581      	cmp	r9, r0
 8007dc2:	d142      	bne.n	8007e4a <_malloc_r+0xea>
 8007dc4:	6821      	ldr	r1, [r4, #0]
 8007dc6:	1a6d      	subs	r5, r5, r1
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f7ff ffa6 	bl	8007d1c <sbrk_aligned>
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	d03a      	beq.n	8007e4a <_malloc_r+0xea>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	442b      	add	r3, r5
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	f8d8 3000 	ldr.w	r3, [r8]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	bb62      	cbnz	r2, 8007e3c <_malloc_r+0xdc>
 8007de2:	f8c8 7000 	str.w	r7, [r8]
 8007de6:	e00f      	b.n	8007e08 <_malloc_r+0xa8>
 8007de8:	6822      	ldr	r2, [r4, #0]
 8007dea:	1b52      	subs	r2, r2, r5
 8007dec:	d420      	bmi.n	8007e30 <_malloc_r+0xd0>
 8007dee:	2a0b      	cmp	r2, #11
 8007df0:	d917      	bls.n	8007e22 <_malloc_r+0xc2>
 8007df2:	1961      	adds	r1, r4, r5
 8007df4:	42a3      	cmp	r3, r4
 8007df6:	6025      	str	r5, [r4, #0]
 8007df8:	bf18      	it	ne
 8007dfa:	6059      	strne	r1, [r3, #4]
 8007dfc:	6863      	ldr	r3, [r4, #4]
 8007dfe:	bf08      	it	eq
 8007e00:	f8c8 1000 	streq.w	r1, [r8]
 8007e04:	5162      	str	r2, [r4, r5]
 8007e06:	604b      	str	r3, [r1, #4]
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f000 f841 	bl	8007e90 <__malloc_unlock>
 8007e0e:	f104 000b 	add.w	r0, r4, #11
 8007e12:	1d23      	adds	r3, r4, #4
 8007e14:	f020 0007 	bic.w	r0, r0, #7
 8007e18:	1ac2      	subs	r2, r0, r3
 8007e1a:	bf1c      	itt	ne
 8007e1c:	1a1b      	subne	r3, r3, r0
 8007e1e:	50a3      	strne	r3, [r4, r2]
 8007e20:	e7af      	b.n	8007d82 <_malloc_r+0x22>
 8007e22:	6862      	ldr	r2, [r4, #4]
 8007e24:	42a3      	cmp	r3, r4
 8007e26:	bf0c      	ite	eq
 8007e28:	f8c8 2000 	streq.w	r2, [r8]
 8007e2c:	605a      	strne	r2, [r3, #4]
 8007e2e:	e7eb      	b.n	8007e08 <_malloc_r+0xa8>
 8007e30:	4623      	mov	r3, r4
 8007e32:	6864      	ldr	r4, [r4, #4]
 8007e34:	e7ae      	b.n	8007d94 <_malloc_r+0x34>
 8007e36:	463c      	mov	r4, r7
 8007e38:	687f      	ldr	r7, [r7, #4]
 8007e3a:	e7b6      	b.n	8007daa <_malloc_r+0x4a>
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	42a3      	cmp	r3, r4
 8007e42:	d1fb      	bne.n	8007e3c <_malloc_r+0xdc>
 8007e44:	2300      	movs	r3, #0
 8007e46:	6053      	str	r3, [r2, #4]
 8007e48:	e7de      	b.n	8007e08 <_malloc_r+0xa8>
 8007e4a:	230c      	movs	r3, #12
 8007e4c:	6033      	str	r3, [r6, #0]
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f000 f81e 	bl	8007e90 <__malloc_unlock>
 8007e54:	e794      	b.n	8007d80 <_malloc_r+0x20>
 8007e56:	6005      	str	r5, [r0, #0]
 8007e58:	e7d6      	b.n	8007e08 <_malloc_r+0xa8>
 8007e5a:	bf00      	nop
 8007e5c:	2000281c 	.word	0x2000281c

08007e60 <__ascii_mbtowc>:
 8007e60:	b082      	sub	sp, #8
 8007e62:	b901      	cbnz	r1, 8007e66 <__ascii_mbtowc+0x6>
 8007e64:	a901      	add	r1, sp, #4
 8007e66:	b142      	cbz	r2, 8007e7a <__ascii_mbtowc+0x1a>
 8007e68:	b14b      	cbz	r3, 8007e7e <__ascii_mbtowc+0x1e>
 8007e6a:	7813      	ldrb	r3, [r2, #0]
 8007e6c:	600b      	str	r3, [r1, #0]
 8007e6e:	7812      	ldrb	r2, [r2, #0]
 8007e70:	1e10      	subs	r0, r2, #0
 8007e72:	bf18      	it	ne
 8007e74:	2001      	movne	r0, #1
 8007e76:	b002      	add	sp, #8
 8007e78:	4770      	bx	lr
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	e7fb      	b.n	8007e76 <__ascii_mbtowc+0x16>
 8007e7e:	f06f 0001 	mvn.w	r0, #1
 8007e82:	e7f8      	b.n	8007e76 <__ascii_mbtowc+0x16>

08007e84 <__malloc_lock>:
 8007e84:	4801      	ldr	r0, [pc, #4]	@ (8007e8c <__malloc_lock+0x8>)
 8007e86:	f7ff bb9c 	b.w	80075c2 <__retarget_lock_acquire_recursive>
 8007e8a:	bf00      	nop
 8007e8c:	20002814 	.word	0x20002814

08007e90 <__malloc_unlock>:
 8007e90:	4801      	ldr	r0, [pc, #4]	@ (8007e98 <__malloc_unlock+0x8>)
 8007e92:	f7ff bb97 	b.w	80075c4 <__retarget_lock_release_recursive>
 8007e96:	bf00      	nop
 8007e98:	20002814 	.word	0x20002814

08007e9c <_Balloc>:
 8007e9c:	b570      	push	{r4, r5, r6, lr}
 8007e9e:	69c6      	ldr	r6, [r0, #28]
 8007ea0:	4604      	mov	r4, r0
 8007ea2:	460d      	mov	r5, r1
 8007ea4:	b976      	cbnz	r6, 8007ec4 <_Balloc+0x28>
 8007ea6:	2010      	movs	r0, #16
 8007ea8:	f001 f8a4 	bl	8008ff4 <malloc>
 8007eac:	4602      	mov	r2, r0
 8007eae:	61e0      	str	r0, [r4, #28]
 8007eb0:	b920      	cbnz	r0, 8007ebc <_Balloc+0x20>
 8007eb2:	4b18      	ldr	r3, [pc, #96]	@ (8007f14 <_Balloc+0x78>)
 8007eb4:	4818      	ldr	r0, [pc, #96]	@ (8007f18 <_Balloc+0x7c>)
 8007eb6:	216b      	movs	r1, #107	@ 0x6b
 8007eb8:	f001 f86a 	bl	8008f90 <__assert_func>
 8007ebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ec0:	6006      	str	r6, [r0, #0]
 8007ec2:	60c6      	str	r6, [r0, #12]
 8007ec4:	69e6      	ldr	r6, [r4, #28]
 8007ec6:	68f3      	ldr	r3, [r6, #12]
 8007ec8:	b183      	cbz	r3, 8007eec <_Balloc+0x50>
 8007eca:	69e3      	ldr	r3, [r4, #28]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ed2:	b9b8      	cbnz	r0, 8007f04 <_Balloc+0x68>
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	fa01 f605 	lsl.w	r6, r1, r5
 8007eda:	1d72      	adds	r2, r6, #5
 8007edc:	0092      	lsls	r2, r2, #2
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f001 f874 	bl	8008fcc <_calloc_r>
 8007ee4:	b160      	cbz	r0, 8007f00 <_Balloc+0x64>
 8007ee6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007eea:	e00e      	b.n	8007f0a <_Balloc+0x6e>
 8007eec:	2221      	movs	r2, #33	@ 0x21
 8007eee:	2104      	movs	r1, #4
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f001 f86b 	bl	8008fcc <_calloc_r>
 8007ef6:	69e3      	ldr	r3, [r4, #28]
 8007ef8:	60f0      	str	r0, [r6, #12]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e4      	bne.n	8007eca <_Balloc+0x2e>
 8007f00:	2000      	movs	r0, #0
 8007f02:	bd70      	pop	{r4, r5, r6, pc}
 8007f04:	6802      	ldr	r2, [r0, #0]
 8007f06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f10:	e7f7      	b.n	8007f02 <_Balloc+0x66>
 8007f12:	bf00      	nop
 8007f14:	08009b6a 	.word	0x08009b6a
 8007f18:	08009b81 	.word	0x08009b81

08007f1c <_Bfree>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	69c6      	ldr	r6, [r0, #28]
 8007f20:	4605      	mov	r5, r0
 8007f22:	460c      	mov	r4, r1
 8007f24:	b976      	cbnz	r6, 8007f44 <_Bfree+0x28>
 8007f26:	2010      	movs	r0, #16
 8007f28:	f001 f864 	bl	8008ff4 <malloc>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	61e8      	str	r0, [r5, #28]
 8007f30:	b920      	cbnz	r0, 8007f3c <_Bfree+0x20>
 8007f32:	4b09      	ldr	r3, [pc, #36]	@ (8007f58 <_Bfree+0x3c>)
 8007f34:	4809      	ldr	r0, [pc, #36]	@ (8007f5c <_Bfree+0x40>)
 8007f36:	218f      	movs	r1, #143	@ 0x8f
 8007f38:	f001 f82a 	bl	8008f90 <__assert_func>
 8007f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f40:	6006      	str	r6, [r0, #0]
 8007f42:	60c6      	str	r6, [r0, #12]
 8007f44:	b13c      	cbz	r4, 8007f56 <_Bfree+0x3a>
 8007f46:	69eb      	ldr	r3, [r5, #28]
 8007f48:	6862      	ldr	r2, [r4, #4]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f50:	6021      	str	r1, [r4, #0]
 8007f52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f56:	bd70      	pop	{r4, r5, r6, pc}
 8007f58:	08009b6a 	.word	0x08009b6a
 8007f5c:	08009b81 	.word	0x08009b81

08007f60 <__multadd>:
 8007f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f64:	690d      	ldr	r5, [r1, #16]
 8007f66:	4607      	mov	r7, r0
 8007f68:	460c      	mov	r4, r1
 8007f6a:	461e      	mov	r6, r3
 8007f6c:	f101 0c14 	add.w	ip, r1, #20
 8007f70:	2000      	movs	r0, #0
 8007f72:	f8dc 3000 	ldr.w	r3, [ip]
 8007f76:	b299      	uxth	r1, r3
 8007f78:	fb02 6101 	mla	r1, r2, r1, r6
 8007f7c:	0c1e      	lsrs	r6, r3, #16
 8007f7e:	0c0b      	lsrs	r3, r1, #16
 8007f80:	fb02 3306 	mla	r3, r2, r6, r3
 8007f84:	b289      	uxth	r1, r1
 8007f86:	3001      	adds	r0, #1
 8007f88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f8c:	4285      	cmp	r5, r0
 8007f8e:	f84c 1b04 	str.w	r1, [ip], #4
 8007f92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f96:	dcec      	bgt.n	8007f72 <__multadd+0x12>
 8007f98:	b30e      	cbz	r6, 8007fde <__multadd+0x7e>
 8007f9a:	68a3      	ldr	r3, [r4, #8]
 8007f9c:	42ab      	cmp	r3, r5
 8007f9e:	dc19      	bgt.n	8007fd4 <__multadd+0x74>
 8007fa0:	6861      	ldr	r1, [r4, #4]
 8007fa2:	4638      	mov	r0, r7
 8007fa4:	3101      	adds	r1, #1
 8007fa6:	f7ff ff79 	bl	8007e9c <_Balloc>
 8007faa:	4680      	mov	r8, r0
 8007fac:	b928      	cbnz	r0, 8007fba <__multadd+0x5a>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe4 <__multadd+0x84>)
 8007fb2:	480d      	ldr	r0, [pc, #52]	@ (8007fe8 <__multadd+0x88>)
 8007fb4:	21ba      	movs	r1, #186	@ 0xba
 8007fb6:	f000 ffeb 	bl	8008f90 <__assert_func>
 8007fba:	6922      	ldr	r2, [r4, #16]
 8007fbc:	3202      	adds	r2, #2
 8007fbe:	f104 010c 	add.w	r1, r4, #12
 8007fc2:	0092      	lsls	r2, r2, #2
 8007fc4:	300c      	adds	r0, #12
 8007fc6:	f7ff fb06 	bl	80075d6 <memcpy>
 8007fca:	4621      	mov	r1, r4
 8007fcc:	4638      	mov	r0, r7
 8007fce:	f7ff ffa5 	bl	8007f1c <_Bfree>
 8007fd2:	4644      	mov	r4, r8
 8007fd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fd8:	3501      	adds	r5, #1
 8007fda:	615e      	str	r6, [r3, #20]
 8007fdc:	6125      	str	r5, [r4, #16]
 8007fde:	4620      	mov	r0, r4
 8007fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe4:	08009af9 	.word	0x08009af9
 8007fe8:	08009b81 	.word	0x08009b81

08007fec <__s2b>:
 8007fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	4615      	mov	r5, r2
 8007ff4:	461f      	mov	r7, r3
 8007ff6:	2209      	movs	r2, #9
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008000:	2100      	movs	r1, #0
 8008002:	2201      	movs	r2, #1
 8008004:	429a      	cmp	r2, r3
 8008006:	db09      	blt.n	800801c <__s2b+0x30>
 8008008:	4630      	mov	r0, r6
 800800a:	f7ff ff47 	bl	8007e9c <_Balloc>
 800800e:	b940      	cbnz	r0, 8008022 <__s2b+0x36>
 8008010:	4602      	mov	r2, r0
 8008012:	4b19      	ldr	r3, [pc, #100]	@ (8008078 <__s2b+0x8c>)
 8008014:	4819      	ldr	r0, [pc, #100]	@ (800807c <__s2b+0x90>)
 8008016:	21d3      	movs	r1, #211	@ 0xd3
 8008018:	f000 ffba 	bl	8008f90 <__assert_func>
 800801c:	0052      	lsls	r2, r2, #1
 800801e:	3101      	adds	r1, #1
 8008020:	e7f0      	b.n	8008004 <__s2b+0x18>
 8008022:	9b08      	ldr	r3, [sp, #32]
 8008024:	6143      	str	r3, [r0, #20]
 8008026:	2d09      	cmp	r5, #9
 8008028:	f04f 0301 	mov.w	r3, #1
 800802c:	6103      	str	r3, [r0, #16]
 800802e:	dd16      	ble.n	800805e <__s2b+0x72>
 8008030:	f104 0909 	add.w	r9, r4, #9
 8008034:	46c8      	mov	r8, r9
 8008036:	442c      	add	r4, r5
 8008038:	f818 3b01 	ldrb.w	r3, [r8], #1
 800803c:	4601      	mov	r1, r0
 800803e:	3b30      	subs	r3, #48	@ 0x30
 8008040:	220a      	movs	r2, #10
 8008042:	4630      	mov	r0, r6
 8008044:	f7ff ff8c 	bl	8007f60 <__multadd>
 8008048:	45a0      	cmp	r8, r4
 800804a:	d1f5      	bne.n	8008038 <__s2b+0x4c>
 800804c:	f1a5 0408 	sub.w	r4, r5, #8
 8008050:	444c      	add	r4, r9
 8008052:	1b2d      	subs	r5, r5, r4
 8008054:	1963      	adds	r3, r4, r5
 8008056:	42bb      	cmp	r3, r7
 8008058:	db04      	blt.n	8008064 <__s2b+0x78>
 800805a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800805e:	340a      	adds	r4, #10
 8008060:	2509      	movs	r5, #9
 8008062:	e7f6      	b.n	8008052 <__s2b+0x66>
 8008064:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008068:	4601      	mov	r1, r0
 800806a:	3b30      	subs	r3, #48	@ 0x30
 800806c:	220a      	movs	r2, #10
 800806e:	4630      	mov	r0, r6
 8008070:	f7ff ff76 	bl	8007f60 <__multadd>
 8008074:	e7ee      	b.n	8008054 <__s2b+0x68>
 8008076:	bf00      	nop
 8008078:	08009af9 	.word	0x08009af9
 800807c:	08009b81 	.word	0x08009b81

08008080 <__hi0bits>:
 8008080:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008084:	4603      	mov	r3, r0
 8008086:	bf36      	itet	cc
 8008088:	0403      	lslcc	r3, r0, #16
 800808a:	2000      	movcs	r0, #0
 800808c:	2010      	movcc	r0, #16
 800808e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008092:	bf3c      	itt	cc
 8008094:	021b      	lslcc	r3, r3, #8
 8008096:	3008      	addcc	r0, #8
 8008098:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800809c:	bf3c      	itt	cc
 800809e:	011b      	lslcc	r3, r3, #4
 80080a0:	3004      	addcc	r0, #4
 80080a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a6:	bf3c      	itt	cc
 80080a8:	009b      	lslcc	r3, r3, #2
 80080aa:	3002      	addcc	r0, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	db05      	blt.n	80080bc <__hi0bits+0x3c>
 80080b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80080b4:	f100 0001 	add.w	r0, r0, #1
 80080b8:	bf08      	it	eq
 80080ba:	2020      	moveq	r0, #32
 80080bc:	4770      	bx	lr

080080be <__lo0bits>:
 80080be:	6803      	ldr	r3, [r0, #0]
 80080c0:	4602      	mov	r2, r0
 80080c2:	f013 0007 	ands.w	r0, r3, #7
 80080c6:	d00b      	beq.n	80080e0 <__lo0bits+0x22>
 80080c8:	07d9      	lsls	r1, r3, #31
 80080ca:	d421      	bmi.n	8008110 <__lo0bits+0x52>
 80080cc:	0798      	lsls	r0, r3, #30
 80080ce:	bf49      	itett	mi
 80080d0:	085b      	lsrmi	r3, r3, #1
 80080d2:	089b      	lsrpl	r3, r3, #2
 80080d4:	2001      	movmi	r0, #1
 80080d6:	6013      	strmi	r3, [r2, #0]
 80080d8:	bf5c      	itt	pl
 80080da:	6013      	strpl	r3, [r2, #0]
 80080dc:	2002      	movpl	r0, #2
 80080de:	4770      	bx	lr
 80080e0:	b299      	uxth	r1, r3
 80080e2:	b909      	cbnz	r1, 80080e8 <__lo0bits+0x2a>
 80080e4:	0c1b      	lsrs	r3, r3, #16
 80080e6:	2010      	movs	r0, #16
 80080e8:	b2d9      	uxtb	r1, r3
 80080ea:	b909      	cbnz	r1, 80080f0 <__lo0bits+0x32>
 80080ec:	3008      	adds	r0, #8
 80080ee:	0a1b      	lsrs	r3, r3, #8
 80080f0:	0719      	lsls	r1, r3, #28
 80080f2:	bf04      	itt	eq
 80080f4:	091b      	lsreq	r3, r3, #4
 80080f6:	3004      	addeq	r0, #4
 80080f8:	0799      	lsls	r1, r3, #30
 80080fa:	bf04      	itt	eq
 80080fc:	089b      	lsreq	r3, r3, #2
 80080fe:	3002      	addeq	r0, #2
 8008100:	07d9      	lsls	r1, r3, #31
 8008102:	d403      	bmi.n	800810c <__lo0bits+0x4e>
 8008104:	085b      	lsrs	r3, r3, #1
 8008106:	f100 0001 	add.w	r0, r0, #1
 800810a:	d003      	beq.n	8008114 <__lo0bits+0x56>
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	4770      	bx	lr
 8008110:	2000      	movs	r0, #0
 8008112:	4770      	bx	lr
 8008114:	2020      	movs	r0, #32
 8008116:	4770      	bx	lr

08008118 <__i2b>:
 8008118:	b510      	push	{r4, lr}
 800811a:	460c      	mov	r4, r1
 800811c:	2101      	movs	r1, #1
 800811e:	f7ff febd 	bl	8007e9c <_Balloc>
 8008122:	4602      	mov	r2, r0
 8008124:	b928      	cbnz	r0, 8008132 <__i2b+0x1a>
 8008126:	4b05      	ldr	r3, [pc, #20]	@ (800813c <__i2b+0x24>)
 8008128:	4805      	ldr	r0, [pc, #20]	@ (8008140 <__i2b+0x28>)
 800812a:	f240 1145 	movw	r1, #325	@ 0x145
 800812e:	f000 ff2f 	bl	8008f90 <__assert_func>
 8008132:	2301      	movs	r3, #1
 8008134:	6144      	str	r4, [r0, #20]
 8008136:	6103      	str	r3, [r0, #16]
 8008138:	bd10      	pop	{r4, pc}
 800813a:	bf00      	nop
 800813c:	08009af9 	.word	0x08009af9
 8008140:	08009b81 	.word	0x08009b81

08008144 <__multiply>:
 8008144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008148:	4614      	mov	r4, r2
 800814a:	690a      	ldr	r2, [r1, #16]
 800814c:	6923      	ldr	r3, [r4, #16]
 800814e:	429a      	cmp	r2, r3
 8008150:	bfa8      	it	ge
 8008152:	4623      	movge	r3, r4
 8008154:	460f      	mov	r7, r1
 8008156:	bfa4      	itt	ge
 8008158:	460c      	movge	r4, r1
 800815a:	461f      	movge	r7, r3
 800815c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008160:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008164:	68a3      	ldr	r3, [r4, #8]
 8008166:	6861      	ldr	r1, [r4, #4]
 8008168:	eb0a 0609 	add.w	r6, sl, r9
 800816c:	42b3      	cmp	r3, r6
 800816e:	b085      	sub	sp, #20
 8008170:	bfb8      	it	lt
 8008172:	3101      	addlt	r1, #1
 8008174:	f7ff fe92 	bl	8007e9c <_Balloc>
 8008178:	b930      	cbnz	r0, 8008188 <__multiply+0x44>
 800817a:	4602      	mov	r2, r0
 800817c:	4b44      	ldr	r3, [pc, #272]	@ (8008290 <__multiply+0x14c>)
 800817e:	4845      	ldr	r0, [pc, #276]	@ (8008294 <__multiply+0x150>)
 8008180:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008184:	f000 ff04 	bl	8008f90 <__assert_func>
 8008188:	f100 0514 	add.w	r5, r0, #20
 800818c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008190:	462b      	mov	r3, r5
 8008192:	2200      	movs	r2, #0
 8008194:	4543      	cmp	r3, r8
 8008196:	d321      	bcc.n	80081dc <__multiply+0x98>
 8008198:	f107 0114 	add.w	r1, r7, #20
 800819c:	f104 0214 	add.w	r2, r4, #20
 80081a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80081a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80081a8:	9302      	str	r3, [sp, #8]
 80081aa:	1b13      	subs	r3, r2, r4
 80081ac:	3b15      	subs	r3, #21
 80081ae:	f023 0303 	bic.w	r3, r3, #3
 80081b2:	3304      	adds	r3, #4
 80081b4:	f104 0715 	add.w	r7, r4, #21
 80081b8:	42ba      	cmp	r2, r7
 80081ba:	bf38      	it	cc
 80081bc:	2304      	movcc	r3, #4
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	9b02      	ldr	r3, [sp, #8]
 80081c2:	9103      	str	r1, [sp, #12]
 80081c4:	428b      	cmp	r3, r1
 80081c6:	d80c      	bhi.n	80081e2 <__multiply+0x9e>
 80081c8:	2e00      	cmp	r6, #0
 80081ca:	dd03      	ble.n	80081d4 <__multiply+0x90>
 80081cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d05b      	beq.n	800828c <__multiply+0x148>
 80081d4:	6106      	str	r6, [r0, #16]
 80081d6:	b005      	add	sp, #20
 80081d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081dc:	f843 2b04 	str.w	r2, [r3], #4
 80081e0:	e7d8      	b.n	8008194 <__multiply+0x50>
 80081e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80081e6:	f1ba 0f00 	cmp.w	sl, #0
 80081ea:	d024      	beq.n	8008236 <__multiply+0xf2>
 80081ec:	f104 0e14 	add.w	lr, r4, #20
 80081f0:	46a9      	mov	r9, r5
 80081f2:	f04f 0c00 	mov.w	ip, #0
 80081f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081fa:	f8d9 3000 	ldr.w	r3, [r9]
 80081fe:	fa1f fb87 	uxth.w	fp, r7
 8008202:	b29b      	uxth	r3, r3
 8008204:	fb0a 330b 	mla	r3, sl, fp, r3
 8008208:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800820c:	f8d9 7000 	ldr.w	r7, [r9]
 8008210:	4463      	add	r3, ip
 8008212:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008216:	fb0a c70b 	mla	r7, sl, fp, ip
 800821a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800821e:	b29b      	uxth	r3, r3
 8008220:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008224:	4572      	cmp	r2, lr
 8008226:	f849 3b04 	str.w	r3, [r9], #4
 800822a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800822e:	d8e2      	bhi.n	80081f6 <__multiply+0xb2>
 8008230:	9b01      	ldr	r3, [sp, #4]
 8008232:	f845 c003 	str.w	ip, [r5, r3]
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800823c:	3104      	adds	r1, #4
 800823e:	f1b9 0f00 	cmp.w	r9, #0
 8008242:	d021      	beq.n	8008288 <__multiply+0x144>
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	f104 0c14 	add.w	ip, r4, #20
 800824a:	46ae      	mov	lr, r5
 800824c:	f04f 0a00 	mov.w	sl, #0
 8008250:	f8bc b000 	ldrh.w	fp, [ip]
 8008254:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008258:	fb09 770b 	mla	r7, r9, fp, r7
 800825c:	4457      	add	r7, sl
 800825e:	b29b      	uxth	r3, r3
 8008260:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008264:	f84e 3b04 	str.w	r3, [lr], #4
 8008268:	f85c 3b04 	ldr.w	r3, [ip], #4
 800826c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008270:	f8be 3000 	ldrh.w	r3, [lr]
 8008274:	fb09 330a 	mla	r3, r9, sl, r3
 8008278:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800827c:	4562      	cmp	r2, ip
 800827e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008282:	d8e5      	bhi.n	8008250 <__multiply+0x10c>
 8008284:	9f01      	ldr	r7, [sp, #4]
 8008286:	51eb      	str	r3, [r5, r7]
 8008288:	3504      	adds	r5, #4
 800828a:	e799      	b.n	80081c0 <__multiply+0x7c>
 800828c:	3e01      	subs	r6, #1
 800828e:	e79b      	b.n	80081c8 <__multiply+0x84>
 8008290:	08009af9 	.word	0x08009af9
 8008294:	08009b81 	.word	0x08009b81

08008298 <__pow5mult>:
 8008298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800829c:	4615      	mov	r5, r2
 800829e:	f012 0203 	ands.w	r2, r2, #3
 80082a2:	4607      	mov	r7, r0
 80082a4:	460e      	mov	r6, r1
 80082a6:	d007      	beq.n	80082b8 <__pow5mult+0x20>
 80082a8:	4c25      	ldr	r4, [pc, #148]	@ (8008340 <__pow5mult+0xa8>)
 80082aa:	3a01      	subs	r2, #1
 80082ac:	2300      	movs	r3, #0
 80082ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082b2:	f7ff fe55 	bl	8007f60 <__multadd>
 80082b6:	4606      	mov	r6, r0
 80082b8:	10ad      	asrs	r5, r5, #2
 80082ba:	d03d      	beq.n	8008338 <__pow5mult+0xa0>
 80082bc:	69fc      	ldr	r4, [r7, #28]
 80082be:	b97c      	cbnz	r4, 80082e0 <__pow5mult+0x48>
 80082c0:	2010      	movs	r0, #16
 80082c2:	f000 fe97 	bl	8008ff4 <malloc>
 80082c6:	4602      	mov	r2, r0
 80082c8:	61f8      	str	r0, [r7, #28]
 80082ca:	b928      	cbnz	r0, 80082d8 <__pow5mult+0x40>
 80082cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008344 <__pow5mult+0xac>)
 80082ce:	481e      	ldr	r0, [pc, #120]	@ (8008348 <__pow5mult+0xb0>)
 80082d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80082d4:	f000 fe5c 	bl	8008f90 <__assert_func>
 80082d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082dc:	6004      	str	r4, [r0, #0]
 80082de:	60c4      	str	r4, [r0, #12]
 80082e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80082e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082e8:	b94c      	cbnz	r4, 80082fe <__pow5mult+0x66>
 80082ea:	f240 2171 	movw	r1, #625	@ 0x271
 80082ee:	4638      	mov	r0, r7
 80082f0:	f7ff ff12 	bl	8008118 <__i2b>
 80082f4:	2300      	movs	r3, #0
 80082f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80082fa:	4604      	mov	r4, r0
 80082fc:	6003      	str	r3, [r0, #0]
 80082fe:	f04f 0900 	mov.w	r9, #0
 8008302:	07eb      	lsls	r3, r5, #31
 8008304:	d50a      	bpl.n	800831c <__pow5mult+0x84>
 8008306:	4631      	mov	r1, r6
 8008308:	4622      	mov	r2, r4
 800830a:	4638      	mov	r0, r7
 800830c:	f7ff ff1a 	bl	8008144 <__multiply>
 8008310:	4631      	mov	r1, r6
 8008312:	4680      	mov	r8, r0
 8008314:	4638      	mov	r0, r7
 8008316:	f7ff fe01 	bl	8007f1c <_Bfree>
 800831a:	4646      	mov	r6, r8
 800831c:	106d      	asrs	r5, r5, #1
 800831e:	d00b      	beq.n	8008338 <__pow5mult+0xa0>
 8008320:	6820      	ldr	r0, [r4, #0]
 8008322:	b938      	cbnz	r0, 8008334 <__pow5mult+0x9c>
 8008324:	4622      	mov	r2, r4
 8008326:	4621      	mov	r1, r4
 8008328:	4638      	mov	r0, r7
 800832a:	f7ff ff0b 	bl	8008144 <__multiply>
 800832e:	6020      	str	r0, [r4, #0]
 8008330:	f8c0 9000 	str.w	r9, [r0]
 8008334:	4604      	mov	r4, r0
 8008336:	e7e4      	b.n	8008302 <__pow5mult+0x6a>
 8008338:	4630      	mov	r0, r6
 800833a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800833e:	bf00      	nop
 8008340:	08009bdc 	.word	0x08009bdc
 8008344:	08009b6a 	.word	0x08009b6a
 8008348:	08009b81 	.word	0x08009b81

0800834c <__lshift>:
 800834c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008350:	460c      	mov	r4, r1
 8008352:	6849      	ldr	r1, [r1, #4]
 8008354:	6923      	ldr	r3, [r4, #16]
 8008356:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800835a:	68a3      	ldr	r3, [r4, #8]
 800835c:	4607      	mov	r7, r0
 800835e:	4691      	mov	r9, r2
 8008360:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008364:	f108 0601 	add.w	r6, r8, #1
 8008368:	42b3      	cmp	r3, r6
 800836a:	db0b      	blt.n	8008384 <__lshift+0x38>
 800836c:	4638      	mov	r0, r7
 800836e:	f7ff fd95 	bl	8007e9c <_Balloc>
 8008372:	4605      	mov	r5, r0
 8008374:	b948      	cbnz	r0, 800838a <__lshift+0x3e>
 8008376:	4602      	mov	r2, r0
 8008378:	4b28      	ldr	r3, [pc, #160]	@ (800841c <__lshift+0xd0>)
 800837a:	4829      	ldr	r0, [pc, #164]	@ (8008420 <__lshift+0xd4>)
 800837c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008380:	f000 fe06 	bl	8008f90 <__assert_func>
 8008384:	3101      	adds	r1, #1
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	e7ee      	b.n	8008368 <__lshift+0x1c>
 800838a:	2300      	movs	r3, #0
 800838c:	f100 0114 	add.w	r1, r0, #20
 8008390:	f100 0210 	add.w	r2, r0, #16
 8008394:	4618      	mov	r0, r3
 8008396:	4553      	cmp	r3, sl
 8008398:	db33      	blt.n	8008402 <__lshift+0xb6>
 800839a:	6920      	ldr	r0, [r4, #16]
 800839c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083a0:	f104 0314 	add.w	r3, r4, #20
 80083a4:	f019 091f 	ands.w	r9, r9, #31
 80083a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083b0:	d02b      	beq.n	800840a <__lshift+0xbe>
 80083b2:	f1c9 0e20 	rsb	lr, r9, #32
 80083b6:	468a      	mov	sl, r1
 80083b8:	2200      	movs	r2, #0
 80083ba:	6818      	ldr	r0, [r3, #0]
 80083bc:	fa00 f009 	lsl.w	r0, r0, r9
 80083c0:	4310      	orrs	r0, r2
 80083c2:	f84a 0b04 	str.w	r0, [sl], #4
 80083c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ca:	459c      	cmp	ip, r3
 80083cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80083d0:	d8f3      	bhi.n	80083ba <__lshift+0x6e>
 80083d2:	ebac 0304 	sub.w	r3, ip, r4
 80083d6:	3b15      	subs	r3, #21
 80083d8:	f023 0303 	bic.w	r3, r3, #3
 80083dc:	3304      	adds	r3, #4
 80083de:	f104 0015 	add.w	r0, r4, #21
 80083e2:	4584      	cmp	ip, r0
 80083e4:	bf38      	it	cc
 80083e6:	2304      	movcc	r3, #4
 80083e8:	50ca      	str	r2, [r1, r3]
 80083ea:	b10a      	cbz	r2, 80083f0 <__lshift+0xa4>
 80083ec:	f108 0602 	add.w	r6, r8, #2
 80083f0:	3e01      	subs	r6, #1
 80083f2:	4638      	mov	r0, r7
 80083f4:	612e      	str	r6, [r5, #16]
 80083f6:	4621      	mov	r1, r4
 80083f8:	f7ff fd90 	bl	8007f1c <_Bfree>
 80083fc:	4628      	mov	r0, r5
 80083fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008402:	f842 0f04 	str.w	r0, [r2, #4]!
 8008406:	3301      	adds	r3, #1
 8008408:	e7c5      	b.n	8008396 <__lshift+0x4a>
 800840a:	3904      	subs	r1, #4
 800840c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008410:	f841 2f04 	str.w	r2, [r1, #4]!
 8008414:	459c      	cmp	ip, r3
 8008416:	d8f9      	bhi.n	800840c <__lshift+0xc0>
 8008418:	e7ea      	b.n	80083f0 <__lshift+0xa4>
 800841a:	bf00      	nop
 800841c:	08009af9 	.word	0x08009af9
 8008420:	08009b81 	.word	0x08009b81

08008424 <__mcmp>:
 8008424:	690a      	ldr	r2, [r1, #16]
 8008426:	4603      	mov	r3, r0
 8008428:	6900      	ldr	r0, [r0, #16]
 800842a:	1a80      	subs	r0, r0, r2
 800842c:	b530      	push	{r4, r5, lr}
 800842e:	d10e      	bne.n	800844e <__mcmp+0x2a>
 8008430:	3314      	adds	r3, #20
 8008432:	3114      	adds	r1, #20
 8008434:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008438:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800843c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008440:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008444:	4295      	cmp	r5, r2
 8008446:	d003      	beq.n	8008450 <__mcmp+0x2c>
 8008448:	d205      	bcs.n	8008456 <__mcmp+0x32>
 800844a:	f04f 30ff 	mov.w	r0, #4294967295
 800844e:	bd30      	pop	{r4, r5, pc}
 8008450:	42a3      	cmp	r3, r4
 8008452:	d3f3      	bcc.n	800843c <__mcmp+0x18>
 8008454:	e7fb      	b.n	800844e <__mcmp+0x2a>
 8008456:	2001      	movs	r0, #1
 8008458:	e7f9      	b.n	800844e <__mcmp+0x2a>
	...

0800845c <__mdiff>:
 800845c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008460:	4689      	mov	r9, r1
 8008462:	4606      	mov	r6, r0
 8008464:	4611      	mov	r1, r2
 8008466:	4648      	mov	r0, r9
 8008468:	4614      	mov	r4, r2
 800846a:	f7ff ffdb 	bl	8008424 <__mcmp>
 800846e:	1e05      	subs	r5, r0, #0
 8008470:	d112      	bne.n	8008498 <__mdiff+0x3c>
 8008472:	4629      	mov	r1, r5
 8008474:	4630      	mov	r0, r6
 8008476:	f7ff fd11 	bl	8007e9c <_Balloc>
 800847a:	4602      	mov	r2, r0
 800847c:	b928      	cbnz	r0, 800848a <__mdiff+0x2e>
 800847e:	4b3f      	ldr	r3, [pc, #252]	@ (800857c <__mdiff+0x120>)
 8008480:	f240 2137 	movw	r1, #567	@ 0x237
 8008484:	483e      	ldr	r0, [pc, #248]	@ (8008580 <__mdiff+0x124>)
 8008486:	f000 fd83 	bl	8008f90 <__assert_func>
 800848a:	2301      	movs	r3, #1
 800848c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008490:	4610      	mov	r0, r2
 8008492:	b003      	add	sp, #12
 8008494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008498:	bfbc      	itt	lt
 800849a:	464b      	movlt	r3, r9
 800849c:	46a1      	movlt	r9, r4
 800849e:	4630      	mov	r0, r6
 80084a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084a4:	bfba      	itte	lt
 80084a6:	461c      	movlt	r4, r3
 80084a8:	2501      	movlt	r5, #1
 80084aa:	2500      	movge	r5, #0
 80084ac:	f7ff fcf6 	bl	8007e9c <_Balloc>
 80084b0:	4602      	mov	r2, r0
 80084b2:	b918      	cbnz	r0, 80084bc <__mdiff+0x60>
 80084b4:	4b31      	ldr	r3, [pc, #196]	@ (800857c <__mdiff+0x120>)
 80084b6:	f240 2145 	movw	r1, #581	@ 0x245
 80084ba:	e7e3      	b.n	8008484 <__mdiff+0x28>
 80084bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80084c0:	6926      	ldr	r6, [r4, #16]
 80084c2:	60c5      	str	r5, [r0, #12]
 80084c4:	f109 0310 	add.w	r3, r9, #16
 80084c8:	f109 0514 	add.w	r5, r9, #20
 80084cc:	f104 0e14 	add.w	lr, r4, #20
 80084d0:	f100 0b14 	add.w	fp, r0, #20
 80084d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80084d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	46d9      	mov	r9, fp
 80084e0:	f04f 0c00 	mov.w	ip, #0
 80084e4:	9b01      	ldr	r3, [sp, #4]
 80084e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80084ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	fa1f f38a 	uxth.w	r3, sl
 80084f4:	4619      	mov	r1, r3
 80084f6:	b283      	uxth	r3, r0
 80084f8:	1acb      	subs	r3, r1, r3
 80084fa:	0c00      	lsrs	r0, r0, #16
 80084fc:	4463      	add	r3, ip
 80084fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008502:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008506:	b29b      	uxth	r3, r3
 8008508:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800850c:	4576      	cmp	r6, lr
 800850e:	f849 3b04 	str.w	r3, [r9], #4
 8008512:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008516:	d8e5      	bhi.n	80084e4 <__mdiff+0x88>
 8008518:	1b33      	subs	r3, r6, r4
 800851a:	3b15      	subs	r3, #21
 800851c:	f023 0303 	bic.w	r3, r3, #3
 8008520:	3415      	adds	r4, #21
 8008522:	3304      	adds	r3, #4
 8008524:	42a6      	cmp	r6, r4
 8008526:	bf38      	it	cc
 8008528:	2304      	movcc	r3, #4
 800852a:	441d      	add	r5, r3
 800852c:	445b      	add	r3, fp
 800852e:	461e      	mov	r6, r3
 8008530:	462c      	mov	r4, r5
 8008532:	4544      	cmp	r4, r8
 8008534:	d30e      	bcc.n	8008554 <__mdiff+0xf8>
 8008536:	f108 0103 	add.w	r1, r8, #3
 800853a:	1b49      	subs	r1, r1, r5
 800853c:	f021 0103 	bic.w	r1, r1, #3
 8008540:	3d03      	subs	r5, #3
 8008542:	45a8      	cmp	r8, r5
 8008544:	bf38      	it	cc
 8008546:	2100      	movcc	r1, #0
 8008548:	440b      	add	r3, r1
 800854a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800854e:	b191      	cbz	r1, 8008576 <__mdiff+0x11a>
 8008550:	6117      	str	r7, [r2, #16]
 8008552:	e79d      	b.n	8008490 <__mdiff+0x34>
 8008554:	f854 1b04 	ldr.w	r1, [r4], #4
 8008558:	46e6      	mov	lr, ip
 800855a:	0c08      	lsrs	r0, r1, #16
 800855c:	fa1c fc81 	uxtah	ip, ip, r1
 8008560:	4471      	add	r1, lr
 8008562:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008566:	b289      	uxth	r1, r1
 8008568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800856c:	f846 1b04 	str.w	r1, [r6], #4
 8008570:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008574:	e7dd      	b.n	8008532 <__mdiff+0xd6>
 8008576:	3f01      	subs	r7, #1
 8008578:	e7e7      	b.n	800854a <__mdiff+0xee>
 800857a:	bf00      	nop
 800857c:	08009af9 	.word	0x08009af9
 8008580:	08009b81 	.word	0x08009b81

08008584 <__ulp>:
 8008584:	b082      	sub	sp, #8
 8008586:	ed8d 0b00 	vstr	d0, [sp]
 800858a:	9a01      	ldr	r2, [sp, #4]
 800858c:	4b0f      	ldr	r3, [pc, #60]	@ (80085cc <__ulp+0x48>)
 800858e:	4013      	ands	r3, r2
 8008590:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008594:	2b00      	cmp	r3, #0
 8008596:	dc08      	bgt.n	80085aa <__ulp+0x26>
 8008598:	425b      	negs	r3, r3
 800859a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800859e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80085a2:	da04      	bge.n	80085ae <__ulp+0x2a>
 80085a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80085a8:	4113      	asrs	r3, r2
 80085aa:	2200      	movs	r2, #0
 80085ac:	e008      	b.n	80085c0 <__ulp+0x3c>
 80085ae:	f1a2 0314 	sub.w	r3, r2, #20
 80085b2:	2b1e      	cmp	r3, #30
 80085b4:	bfda      	itte	le
 80085b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80085ba:	40da      	lsrle	r2, r3
 80085bc:	2201      	movgt	r2, #1
 80085be:	2300      	movs	r3, #0
 80085c0:	4619      	mov	r1, r3
 80085c2:	4610      	mov	r0, r2
 80085c4:	ec41 0b10 	vmov	d0, r0, r1
 80085c8:	b002      	add	sp, #8
 80085ca:	4770      	bx	lr
 80085cc:	7ff00000 	.word	0x7ff00000

080085d0 <__b2d>:
 80085d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d4:	6906      	ldr	r6, [r0, #16]
 80085d6:	f100 0814 	add.w	r8, r0, #20
 80085da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80085de:	1f37      	subs	r7, r6, #4
 80085e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80085e4:	4610      	mov	r0, r2
 80085e6:	f7ff fd4b 	bl	8008080 <__hi0bits>
 80085ea:	f1c0 0320 	rsb	r3, r0, #32
 80085ee:	280a      	cmp	r0, #10
 80085f0:	600b      	str	r3, [r1, #0]
 80085f2:	491b      	ldr	r1, [pc, #108]	@ (8008660 <__b2d+0x90>)
 80085f4:	dc15      	bgt.n	8008622 <__b2d+0x52>
 80085f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80085fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80085fe:	45b8      	cmp	r8, r7
 8008600:	ea43 0501 	orr.w	r5, r3, r1
 8008604:	bf34      	ite	cc
 8008606:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800860a:	2300      	movcs	r3, #0
 800860c:	3015      	adds	r0, #21
 800860e:	fa02 f000 	lsl.w	r0, r2, r0
 8008612:	fa23 f30c 	lsr.w	r3, r3, ip
 8008616:	4303      	orrs	r3, r0
 8008618:	461c      	mov	r4, r3
 800861a:	ec45 4b10 	vmov	d0, r4, r5
 800861e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008622:	45b8      	cmp	r8, r7
 8008624:	bf3a      	itte	cc
 8008626:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800862a:	f1a6 0708 	subcc.w	r7, r6, #8
 800862e:	2300      	movcs	r3, #0
 8008630:	380b      	subs	r0, #11
 8008632:	d012      	beq.n	800865a <__b2d+0x8a>
 8008634:	f1c0 0120 	rsb	r1, r0, #32
 8008638:	fa23 f401 	lsr.w	r4, r3, r1
 800863c:	4082      	lsls	r2, r0
 800863e:	4322      	orrs	r2, r4
 8008640:	4547      	cmp	r7, r8
 8008642:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008646:	bf8c      	ite	hi
 8008648:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800864c:	2200      	movls	r2, #0
 800864e:	4083      	lsls	r3, r0
 8008650:	40ca      	lsrs	r2, r1
 8008652:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008656:	4313      	orrs	r3, r2
 8008658:	e7de      	b.n	8008618 <__b2d+0x48>
 800865a:	ea42 0501 	orr.w	r5, r2, r1
 800865e:	e7db      	b.n	8008618 <__b2d+0x48>
 8008660:	3ff00000 	.word	0x3ff00000

08008664 <__d2b>:
 8008664:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008668:	460f      	mov	r7, r1
 800866a:	2101      	movs	r1, #1
 800866c:	ec59 8b10 	vmov	r8, r9, d0
 8008670:	4616      	mov	r6, r2
 8008672:	f7ff fc13 	bl	8007e9c <_Balloc>
 8008676:	4604      	mov	r4, r0
 8008678:	b930      	cbnz	r0, 8008688 <__d2b+0x24>
 800867a:	4602      	mov	r2, r0
 800867c:	4b23      	ldr	r3, [pc, #140]	@ (800870c <__d2b+0xa8>)
 800867e:	4824      	ldr	r0, [pc, #144]	@ (8008710 <__d2b+0xac>)
 8008680:	f240 310f 	movw	r1, #783	@ 0x30f
 8008684:	f000 fc84 	bl	8008f90 <__assert_func>
 8008688:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800868c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008690:	b10d      	cbz	r5, 8008696 <__d2b+0x32>
 8008692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	f1b8 0300 	subs.w	r3, r8, #0
 800869c:	d023      	beq.n	80086e6 <__d2b+0x82>
 800869e:	4668      	mov	r0, sp
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	f7ff fd0c 	bl	80080be <__lo0bits>
 80086a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086aa:	b1d0      	cbz	r0, 80086e2 <__d2b+0x7e>
 80086ac:	f1c0 0320 	rsb	r3, r0, #32
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	430b      	orrs	r3, r1
 80086b6:	40c2      	lsrs	r2, r0
 80086b8:	6163      	str	r3, [r4, #20]
 80086ba:	9201      	str	r2, [sp, #4]
 80086bc:	9b01      	ldr	r3, [sp, #4]
 80086be:	61a3      	str	r3, [r4, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	bf0c      	ite	eq
 80086c4:	2201      	moveq	r2, #1
 80086c6:	2202      	movne	r2, #2
 80086c8:	6122      	str	r2, [r4, #16]
 80086ca:	b1a5      	cbz	r5, 80086f6 <__d2b+0x92>
 80086cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80086d0:	4405      	add	r5, r0
 80086d2:	603d      	str	r5, [r7, #0]
 80086d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086d8:	6030      	str	r0, [r6, #0]
 80086da:	4620      	mov	r0, r4
 80086dc:	b003      	add	sp, #12
 80086de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086e2:	6161      	str	r1, [r4, #20]
 80086e4:	e7ea      	b.n	80086bc <__d2b+0x58>
 80086e6:	a801      	add	r0, sp, #4
 80086e8:	f7ff fce9 	bl	80080be <__lo0bits>
 80086ec:	9b01      	ldr	r3, [sp, #4]
 80086ee:	6163      	str	r3, [r4, #20]
 80086f0:	3020      	adds	r0, #32
 80086f2:	2201      	movs	r2, #1
 80086f4:	e7e8      	b.n	80086c8 <__d2b+0x64>
 80086f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80086fe:	6038      	str	r0, [r7, #0]
 8008700:	6918      	ldr	r0, [r3, #16]
 8008702:	f7ff fcbd 	bl	8008080 <__hi0bits>
 8008706:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800870a:	e7e5      	b.n	80086d8 <__d2b+0x74>
 800870c:	08009af9 	.word	0x08009af9
 8008710:	08009b81 	.word	0x08009b81

08008714 <__ratio>:
 8008714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008718:	b085      	sub	sp, #20
 800871a:	e9cd 1000 	strd	r1, r0, [sp]
 800871e:	a902      	add	r1, sp, #8
 8008720:	f7ff ff56 	bl	80085d0 <__b2d>
 8008724:	9800      	ldr	r0, [sp, #0]
 8008726:	a903      	add	r1, sp, #12
 8008728:	ec55 4b10 	vmov	r4, r5, d0
 800872c:	f7ff ff50 	bl	80085d0 <__b2d>
 8008730:	9b01      	ldr	r3, [sp, #4]
 8008732:	6919      	ldr	r1, [r3, #16]
 8008734:	9b00      	ldr	r3, [sp, #0]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	1ac9      	subs	r1, r1, r3
 800873a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800873e:	1a9b      	subs	r3, r3, r2
 8008740:	ec5b ab10 	vmov	sl, fp, d0
 8008744:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008748:	2b00      	cmp	r3, #0
 800874a:	bfce      	itee	gt
 800874c:	462a      	movgt	r2, r5
 800874e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008752:	465a      	movle	r2, fp
 8008754:	462f      	mov	r7, r5
 8008756:	46d9      	mov	r9, fp
 8008758:	bfcc      	ite	gt
 800875a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800875e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008762:	464b      	mov	r3, r9
 8008764:	4652      	mov	r2, sl
 8008766:	4620      	mov	r0, r4
 8008768:	4639      	mov	r1, r7
 800876a:	f7f8 f89f 	bl	80008ac <__aeabi_ddiv>
 800876e:	ec41 0b10 	vmov	d0, r0, r1
 8008772:	b005      	add	sp, #20
 8008774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008778 <__copybits>:
 8008778:	3901      	subs	r1, #1
 800877a:	b570      	push	{r4, r5, r6, lr}
 800877c:	1149      	asrs	r1, r1, #5
 800877e:	6914      	ldr	r4, [r2, #16]
 8008780:	3101      	adds	r1, #1
 8008782:	f102 0314 	add.w	r3, r2, #20
 8008786:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800878a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800878e:	1f05      	subs	r5, r0, #4
 8008790:	42a3      	cmp	r3, r4
 8008792:	d30c      	bcc.n	80087ae <__copybits+0x36>
 8008794:	1aa3      	subs	r3, r4, r2
 8008796:	3b11      	subs	r3, #17
 8008798:	f023 0303 	bic.w	r3, r3, #3
 800879c:	3211      	adds	r2, #17
 800879e:	42a2      	cmp	r2, r4
 80087a0:	bf88      	it	hi
 80087a2:	2300      	movhi	r3, #0
 80087a4:	4418      	add	r0, r3
 80087a6:	2300      	movs	r3, #0
 80087a8:	4288      	cmp	r0, r1
 80087aa:	d305      	bcc.n	80087b8 <__copybits+0x40>
 80087ac:	bd70      	pop	{r4, r5, r6, pc}
 80087ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80087b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80087b6:	e7eb      	b.n	8008790 <__copybits+0x18>
 80087b8:	f840 3b04 	str.w	r3, [r0], #4
 80087bc:	e7f4      	b.n	80087a8 <__copybits+0x30>

080087be <__any_on>:
 80087be:	f100 0214 	add.w	r2, r0, #20
 80087c2:	6900      	ldr	r0, [r0, #16]
 80087c4:	114b      	asrs	r3, r1, #5
 80087c6:	4298      	cmp	r0, r3
 80087c8:	b510      	push	{r4, lr}
 80087ca:	db11      	blt.n	80087f0 <__any_on+0x32>
 80087cc:	dd0a      	ble.n	80087e4 <__any_on+0x26>
 80087ce:	f011 011f 	ands.w	r1, r1, #31
 80087d2:	d007      	beq.n	80087e4 <__any_on+0x26>
 80087d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80087d8:	fa24 f001 	lsr.w	r0, r4, r1
 80087dc:	fa00 f101 	lsl.w	r1, r0, r1
 80087e0:	428c      	cmp	r4, r1
 80087e2:	d10b      	bne.n	80087fc <__any_on+0x3e>
 80087e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d803      	bhi.n	80087f4 <__any_on+0x36>
 80087ec:	2000      	movs	r0, #0
 80087ee:	bd10      	pop	{r4, pc}
 80087f0:	4603      	mov	r3, r0
 80087f2:	e7f7      	b.n	80087e4 <__any_on+0x26>
 80087f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087f8:	2900      	cmp	r1, #0
 80087fa:	d0f5      	beq.n	80087e8 <__any_on+0x2a>
 80087fc:	2001      	movs	r0, #1
 80087fe:	e7f6      	b.n	80087ee <__any_on+0x30>

08008800 <__ascii_wctomb>:
 8008800:	4603      	mov	r3, r0
 8008802:	4608      	mov	r0, r1
 8008804:	b141      	cbz	r1, 8008818 <__ascii_wctomb+0x18>
 8008806:	2aff      	cmp	r2, #255	@ 0xff
 8008808:	d904      	bls.n	8008814 <__ascii_wctomb+0x14>
 800880a:	228a      	movs	r2, #138	@ 0x8a
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	f04f 30ff 	mov.w	r0, #4294967295
 8008812:	4770      	bx	lr
 8008814:	700a      	strb	r2, [r1, #0]
 8008816:	2001      	movs	r0, #1
 8008818:	4770      	bx	lr

0800881a <__ssputs_r>:
 800881a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800881e:	688e      	ldr	r6, [r1, #8]
 8008820:	461f      	mov	r7, r3
 8008822:	42be      	cmp	r6, r7
 8008824:	680b      	ldr	r3, [r1, #0]
 8008826:	4682      	mov	sl, r0
 8008828:	460c      	mov	r4, r1
 800882a:	4690      	mov	r8, r2
 800882c:	d82d      	bhi.n	800888a <__ssputs_r+0x70>
 800882e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008832:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008836:	d026      	beq.n	8008886 <__ssputs_r+0x6c>
 8008838:	6965      	ldr	r5, [r4, #20]
 800883a:	6909      	ldr	r1, [r1, #16]
 800883c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008840:	eba3 0901 	sub.w	r9, r3, r1
 8008844:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008848:	1c7b      	adds	r3, r7, #1
 800884a:	444b      	add	r3, r9
 800884c:	106d      	asrs	r5, r5, #1
 800884e:	429d      	cmp	r5, r3
 8008850:	bf38      	it	cc
 8008852:	461d      	movcc	r5, r3
 8008854:	0553      	lsls	r3, r2, #21
 8008856:	d527      	bpl.n	80088a8 <__ssputs_r+0x8e>
 8008858:	4629      	mov	r1, r5
 800885a:	f7ff fa81 	bl	8007d60 <_malloc_r>
 800885e:	4606      	mov	r6, r0
 8008860:	b360      	cbz	r0, 80088bc <__ssputs_r+0xa2>
 8008862:	6921      	ldr	r1, [r4, #16]
 8008864:	464a      	mov	r2, r9
 8008866:	f7fe feb6 	bl	80075d6 <memcpy>
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008874:	81a3      	strh	r3, [r4, #12]
 8008876:	6126      	str	r6, [r4, #16]
 8008878:	6165      	str	r5, [r4, #20]
 800887a:	444e      	add	r6, r9
 800887c:	eba5 0509 	sub.w	r5, r5, r9
 8008880:	6026      	str	r6, [r4, #0]
 8008882:	60a5      	str	r5, [r4, #8]
 8008884:	463e      	mov	r6, r7
 8008886:	42be      	cmp	r6, r7
 8008888:	d900      	bls.n	800888c <__ssputs_r+0x72>
 800888a:	463e      	mov	r6, r7
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	4632      	mov	r2, r6
 8008890:	4641      	mov	r1, r8
 8008892:	f000 fb53 	bl	8008f3c <memmove>
 8008896:	68a3      	ldr	r3, [r4, #8]
 8008898:	1b9b      	subs	r3, r3, r6
 800889a:	60a3      	str	r3, [r4, #8]
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	4433      	add	r3, r6
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	2000      	movs	r0, #0
 80088a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a8:	462a      	mov	r2, r5
 80088aa:	f000 fbab 	bl	8009004 <_realloc_r>
 80088ae:	4606      	mov	r6, r0
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d1e0      	bne.n	8008876 <__ssputs_r+0x5c>
 80088b4:	6921      	ldr	r1, [r4, #16]
 80088b6:	4650      	mov	r0, sl
 80088b8:	f7fe feac 	bl	8007614 <_free_r>
 80088bc:	230c      	movs	r3, #12
 80088be:	f8ca 3000 	str.w	r3, [sl]
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088c8:	81a3      	strh	r3, [r4, #12]
 80088ca:	f04f 30ff 	mov.w	r0, #4294967295
 80088ce:	e7e9      	b.n	80088a4 <__ssputs_r+0x8a>

080088d0 <_svfiprintf_r>:
 80088d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d4:	4698      	mov	r8, r3
 80088d6:	898b      	ldrh	r3, [r1, #12]
 80088d8:	061b      	lsls	r3, r3, #24
 80088da:	b09d      	sub	sp, #116	@ 0x74
 80088dc:	4607      	mov	r7, r0
 80088de:	460d      	mov	r5, r1
 80088e0:	4614      	mov	r4, r2
 80088e2:	d510      	bpl.n	8008906 <_svfiprintf_r+0x36>
 80088e4:	690b      	ldr	r3, [r1, #16]
 80088e6:	b973      	cbnz	r3, 8008906 <_svfiprintf_r+0x36>
 80088e8:	2140      	movs	r1, #64	@ 0x40
 80088ea:	f7ff fa39 	bl	8007d60 <_malloc_r>
 80088ee:	6028      	str	r0, [r5, #0]
 80088f0:	6128      	str	r0, [r5, #16]
 80088f2:	b930      	cbnz	r0, 8008902 <_svfiprintf_r+0x32>
 80088f4:	230c      	movs	r3, #12
 80088f6:	603b      	str	r3, [r7, #0]
 80088f8:	f04f 30ff 	mov.w	r0, #4294967295
 80088fc:	b01d      	add	sp, #116	@ 0x74
 80088fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008902:	2340      	movs	r3, #64	@ 0x40
 8008904:	616b      	str	r3, [r5, #20]
 8008906:	2300      	movs	r3, #0
 8008908:	9309      	str	r3, [sp, #36]	@ 0x24
 800890a:	2320      	movs	r3, #32
 800890c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008910:	f8cd 800c 	str.w	r8, [sp, #12]
 8008914:	2330      	movs	r3, #48	@ 0x30
 8008916:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ab4 <_svfiprintf_r+0x1e4>
 800891a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800891e:	f04f 0901 	mov.w	r9, #1
 8008922:	4623      	mov	r3, r4
 8008924:	469a      	mov	sl, r3
 8008926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800892a:	b10a      	cbz	r2, 8008930 <_svfiprintf_r+0x60>
 800892c:	2a25      	cmp	r2, #37	@ 0x25
 800892e:	d1f9      	bne.n	8008924 <_svfiprintf_r+0x54>
 8008930:	ebba 0b04 	subs.w	fp, sl, r4
 8008934:	d00b      	beq.n	800894e <_svfiprintf_r+0x7e>
 8008936:	465b      	mov	r3, fp
 8008938:	4622      	mov	r2, r4
 800893a:	4629      	mov	r1, r5
 800893c:	4638      	mov	r0, r7
 800893e:	f7ff ff6c 	bl	800881a <__ssputs_r>
 8008942:	3001      	adds	r0, #1
 8008944:	f000 80a7 	beq.w	8008a96 <_svfiprintf_r+0x1c6>
 8008948:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800894a:	445a      	add	r2, fp
 800894c:	9209      	str	r2, [sp, #36]	@ 0x24
 800894e:	f89a 3000 	ldrb.w	r3, [sl]
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 809f 	beq.w	8008a96 <_svfiprintf_r+0x1c6>
 8008958:	2300      	movs	r3, #0
 800895a:	f04f 32ff 	mov.w	r2, #4294967295
 800895e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008962:	f10a 0a01 	add.w	sl, sl, #1
 8008966:	9304      	str	r3, [sp, #16]
 8008968:	9307      	str	r3, [sp, #28]
 800896a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800896e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008970:	4654      	mov	r4, sl
 8008972:	2205      	movs	r2, #5
 8008974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008978:	484e      	ldr	r0, [pc, #312]	@ (8008ab4 <_svfiprintf_r+0x1e4>)
 800897a:	f7f7 fc61 	bl	8000240 <memchr>
 800897e:	9a04      	ldr	r2, [sp, #16]
 8008980:	b9d8      	cbnz	r0, 80089ba <_svfiprintf_r+0xea>
 8008982:	06d0      	lsls	r0, r2, #27
 8008984:	bf44      	itt	mi
 8008986:	2320      	movmi	r3, #32
 8008988:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800898c:	0711      	lsls	r1, r2, #28
 800898e:	bf44      	itt	mi
 8008990:	232b      	movmi	r3, #43	@ 0x2b
 8008992:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008996:	f89a 3000 	ldrb.w	r3, [sl]
 800899a:	2b2a      	cmp	r3, #42	@ 0x2a
 800899c:	d015      	beq.n	80089ca <_svfiprintf_r+0xfa>
 800899e:	9a07      	ldr	r2, [sp, #28]
 80089a0:	4654      	mov	r4, sl
 80089a2:	2000      	movs	r0, #0
 80089a4:	f04f 0c0a 	mov.w	ip, #10
 80089a8:	4621      	mov	r1, r4
 80089aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ae:	3b30      	subs	r3, #48	@ 0x30
 80089b0:	2b09      	cmp	r3, #9
 80089b2:	d94b      	bls.n	8008a4c <_svfiprintf_r+0x17c>
 80089b4:	b1b0      	cbz	r0, 80089e4 <_svfiprintf_r+0x114>
 80089b6:	9207      	str	r2, [sp, #28]
 80089b8:	e014      	b.n	80089e4 <_svfiprintf_r+0x114>
 80089ba:	eba0 0308 	sub.w	r3, r0, r8
 80089be:	fa09 f303 	lsl.w	r3, r9, r3
 80089c2:	4313      	orrs	r3, r2
 80089c4:	9304      	str	r3, [sp, #16]
 80089c6:	46a2      	mov	sl, r4
 80089c8:	e7d2      	b.n	8008970 <_svfiprintf_r+0xa0>
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	1d19      	adds	r1, r3, #4
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	9103      	str	r1, [sp, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	bfbb      	ittet	lt
 80089d6:	425b      	neglt	r3, r3
 80089d8:	f042 0202 	orrlt.w	r2, r2, #2
 80089dc:	9307      	strge	r3, [sp, #28]
 80089de:	9307      	strlt	r3, [sp, #28]
 80089e0:	bfb8      	it	lt
 80089e2:	9204      	strlt	r2, [sp, #16]
 80089e4:	7823      	ldrb	r3, [r4, #0]
 80089e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80089e8:	d10a      	bne.n	8008a00 <_svfiprintf_r+0x130>
 80089ea:	7863      	ldrb	r3, [r4, #1]
 80089ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80089ee:	d132      	bne.n	8008a56 <_svfiprintf_r+0x186>
 80089f0:	9b03      	ldr	r3, [sp, #12]
 80089f2:	1d1a      	adds	r2, r3, #4
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	9203      	str	r2, [sp, #12]
 80089f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089fc:	3402      	adds	r4, #2
 80089fe:	9305      	str	r3, [sp, #20]
 8008a00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ac4 <_svfiprintf_r+0x1f4>
 8008a04:	7821      	ldrb	r1, [r4, #0]
 8008a06:	2203      	movs	r2, #3
 8008a08:	4650      	mov	r0, sl
 8008a0a:	f7f7 fc19 	bl	8000240 <memchr>
 8008a0e:	b138      	cbz	r0, 8008a20 <_svfiprintf_r+0x150>
 8008a10:	9b04      	ldr	r3, [sp, #16]
 8008a12:	eba0 000a 	sub.w	r0, r0, sl
 8008a16:	2240      	movs	r2, #64	@ 0x40
 8008a18:	4082      	lsls	r2, r0
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	3401      	adds	r4, #1
 8008a1e:	9304      	str	r3, [sp, #16]
 8008a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a24:	4824      	ldr	r0, [pc, #144]	@ (8008ab8 <_svfiprintf_r+0x1e8>)
 8008a26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a2a:	2206      	movs	r2, #6
 8008a2c:	f7f7 fc08 	bl	8000240 <memchr>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d036      	beq.n	8008aa2 <_svfiprintf_r+0x1d2>
 8008a34:	4b21      	ldr	r3, [pc, #132]	@ (8008abc <_svfiprintf_r+0x1ec>)
 8008a36:	bb1b      	cbnz	r3, 8008a80 <_svfiprintf_r+0x1b0>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	3307      	adds	r3, #7
 8008a3c:	f023 0307 	bic.w	r3, r3, #7
 8008a40:	3308      	adds	r3, #8
 8008a42:	9303      	str	r3, [sp, #12]
 8008a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a46:	4433      	add	r3, r6
 8008a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a4a:	e76a      	b.n	8008922 <_svfiprintf_r+0x52>
 8008a4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a50:	460c      	mov	r4, r1
 8008a52:	2001      	movs	r0, #1
 8008a54:	e7a8      	b.n	80089a8 <_svfiprintf_r+0xd8>
 8008a56:	2300      	movs	r3, #0
 8008a58:	3401      	adds	r4, #1
 8008a5a:	9305      	str	r3, [sp, #20]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	f04f 0c0a 	mov.w	ip, #10
 8008a62:	4620      	mov	r0, r4
 8008a64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a68:	3a30      	subs	r2, #48	@ 0x30
 8008a6a:	2a09      	cmp	r2, #9
 8008a6c:	d903      	bls.n	8008a76 <_svfiprintf_r+0x1a6>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0c6      	beq.n	8008a00 <_svfiprintf_r+0x130>
 8008a72:	9105      	str	r1, [sp, #20]
 8008a74:	e7c4      	b.n	8008a00 <_svfiprintf_r+0x130>
 8008a76:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e7f0      	b.n	8008a62 <_svfiprintf_r+0x192>
 8008a80:	ab03      	add	r3, sp, #12
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	462a      	mov	r2, r5
 8008a86:	4b0e      	ldr	r3, [pc, #56]	@ (8008ac0 <_svfiprintf_r+0x1f0>)
 8008a88:	a904      	add	r1, sp, #16
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	f3af 8000 	nop.w
 8008a90:	1c42      	adds	r2, r0, #1
 8008a92:	4606      	mov	r6, r0
 8008a94:	d1d6      	bne.n	8008a44 <_svfiprintf_r+0x174>
 8008a96:	89ab      	ldrh	r3, [r5, #12]
 8008a98:	065b      	lsls	r3, r3, #25
 8008a9a:	f53f af2d 	bmi.w	80088f8 <_svfiprintf_r+0x28>
 8008a9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008aa0:	e72c      	b.n	80088fc <_svfiprintf_r+0x2c>
 8008aa2:	ab03      	add	r3, sp, #12
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	462a      	mov	r2, r5
 8008aa8:	4b05      	ldr	r3, [pc, #20]	@ (8008ac0 <_svfiprintf_r+0x1f0>)
 8008aaa:	a904      	add	r1, sp, #16
 8008aac:	4638      	mov	r0, r7
 8008aae:	f000 f879 	bl	8008ba4 <_printf_i>
 8008ab2:	e7ed      	b.n	8008a90 <_svfiprintf_r+0x1c0>
 8008ab4:	08009cd8 	.word	0x08009cd8
 8008ab8:	08009ce2 	.word	0x08009ce2
 8008abc:	00000000 	.word	0x00000000
 8008ac0:	0800881b 	.word	0x0800881b
 8008ac4:	08009cde 	.word	0x08009cde

08008ac8 <_printf_common>:
 8008ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008acc:	4616      	mov	r6, r2
 8008ace:	4698      	mov	r8, r3
 8008ad0:	688a      	ldr	r2, [r1, #8]
 8008ad2:	690b      	ldr	r3, [r1, #16]
 8008ad4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	bfb8      	it	lt
 8008adc:	4613      	movlt	r3, r2
 8008ade:	6033      	str	r3, [r6, #0]
 8008ae0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	b10a      	cbz	r2, 8008aee <_printf_common+0x26>
 8008aea:	3301      	adds	r3, #1
 8008aec:	6033      	str	r3, [r6, #0]
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	0699      	lsls	r1, r3, #26
 8008af2:	bf42      	ittt	mi
 8008af4:	6833      	ldrmi	r3, [r6, #0]
 8008af6:	3302      	addmi	r3, #2
 8008af8:	6033      	strmi	r3, [r6, #0]
 8008afa:	6825      	ldr	r5, [r4, #0]
 8008afc:	f015 0506 	ands.w	r5, r5, #6
 8008b00:	d106      	bne.n	8008b10 <_printf_common+0x48>
 8008b02:	f104 0a19 	add.w	sl, r4, #25
 8008b06:	68e3      	ldr	r3, [r4, #12]
 8008b08:	6832      	ldr	r2, [r6, #0]
 8008b0a:	1a9b      	subs	r3, r3, r2
 8008b0c:	42ab      	cmp	r3, r5
 8008b0e:	dc26      	bgt.n	8008b5e <_printf_common+0x96>
 8008b10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b14:	6822      	ldr	r2, [r4, #0]
 8008b16:	3b00      	subs	r3, #0
 8008b18:	bf18      	it	ne
 8008b1a:	2301      	movne	r3, #1
 8008b1c:	0692      	lsls	r2, r2, #26
 8008b1e:	d42b      	bmi.n	8008b78 <_printf_common+0xb0>
 8008b20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b24:	4641      	mov	r1, r8
 8008b26:	4638      	mov	r0, r7
 8008b28:	47c8      	blx	r9
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d01e      	beq.n	8008b6c <_printf_common+0xa4>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	6922      	ldr	r2, [r4, #16]
 8008b32:	f003 0306 	and.w	r3, r3, #6
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	bf02      	ittt	eq
 8008b3a:	68e5      	ldreq	r5, [r4, #12]
 8008b3c:	6833      	ldreq	r3, [r6, #0]
 8008b3e:	1aed      	subeq	r5, r5, r3
 8008b40:	68a3      	ldr	r3, [r4, #8]
 8008b42:	bf0c      	ite	eq
 8008b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b48:	2500      	movne	r5, #0
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	bfc4      	itt	gt
 8008b4e:	1a9b      	subgt	r3, r3, r2
 8008b50:	18ed      	addgt	r5, r5, r3
 8008b52:	2600      	movs	r6, #0
 8008b54:	341a      	adds	r4, #26
 8008b56:	42b5      	cmp	r5, r6
 8008b58:	d11a      	bne.n	8008b90 <_printf_common+0xc8>
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	e008      	b.n	8008b70 <_printf_common+0xa8>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	4652      	mov	r2, sl
 8008b62:	4641      	mov	r1, r8
 8008b64:	4638      	mov	r0, r7
 8008b66:	47c8      	blx	r9
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d103      	bne.n	8008b74 <_printf_common+0xac>
 8008b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b74:	3501      	adds	r5, #1
 8008b76:	e7c6      	b.n	8008b06 <_printf_common+0x3e>
 8008b78:	18e1      	adds	r1, r4, r3
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	2030      	movs	r0, #48	@ 0x30
 8008b7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b82:	4422      	add	r2, r4
 8008b84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b8c:	3302      	adds	r3, #2
 8008b8e:	e7c7      	b.n	8008b20 <_printf_common+0x58>
 8008b90:	2301      	movs	r3, #1
 8008b92:	4622      	mov	r2, r4
 8008b94:	4641      	mov	r1, r8
 8008b96:	4638      	mov	r0, r7
 8008b98:	47c8      	blx	r9
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d0e6      	beq.n	8008b6c <_printf_common+0xa4>
 8008b9e:	3601      	adds	r6, #1
 8008ba0:	e7d9      	b.n	8008b56 <_printf_common+0x8e>
	...

08008ba4 <_printf_i>:
 8008ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba8:	7e0f      	ldrb	r7, [r1, #24]
 8008baa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bac:	2f78      	cmp	r7, #120	@ 0x78
 8008bae:	4691      	mov	r9, r2
 8008bb0:	4680      	mov	r8, r0
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	469a      	mov	sl, r3
 8008bb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008bba:	d807      	bhi.n	8008bcc <_printf_i+0x28>
 8008bbc:	2f62      	cmp	r7, #98	@ 0x62
 8008bbe:	d80a      	bhi.n	8008bd6 <_printf_i+0x32>
 8008bc0:	2f00      	cmp	r7, #0
 8008bc2:	f000 80d2 	beq.w	8008d6a <_printf_i+0x1c6>
 8008bc6:	2f58      	cmp	r7, #88	@ 0x58
 8008bc8:	f000 80b9 	beq.w	8008d3e <_printf_i+0x19a>
 8008bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008bd4:	e03a      	b.n	8008c4c <_printf_i+0xa8>
 8008bd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008bda:	2b15      	cmp	r3, #21
 8008bdc:	d8f6      	bhi.n	8008bcc <_printf_i+0x28>
 8008bde:	a101      	add	r1, pc, #4	@ (adr r1, 8008be4 <_printf_i+0x40>)
 8008be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008be4:	08008c3d 	.word	0x08008c3d
 8008be8:	08008c51 	.word	0x08008c51
 8008bec:	08008bcd 	.word	0x08008bcd
 8008bf0:	08008bcd 	.word	0x08008bcd
 8008bf4:	08008bcd 	.word	0x08008bcd
 8008bf8:	08008bcd 	.word	0x08008bcd
 8008bfc:	08008c51 	.word	0x08008c51
 8008c00:	08008bcd 	.word	0x08008bcd
 8008c04:	08008bcd 	.word	0x08008bcd
 8008c08:	08008bcd 	.word	0x08008bcd
 8008c0c:	08008bcd 	.word	0x08008bcd
 8008c10:	08008d51 	.word	0x08008d51
 8008c14:	08008c7b 	.word	0x08008c7b
 8008c18:	08008d0b 	.word	0x08008d0b
 8008c1c:	08008bcd 	.word	0x08008bcd
 8008c20:	08008bcd 	.word	0x08008bcd
 8008c24:	08008d73 	.word	0x08008d73
 8008c28:	08008bcd 	.word	0x08008bcd
 8008c2c:	08008c7b 	.word	0x08008c7b
 8008c30:	08008bcd 	.word	0x08008bcd
 8008c34:	08008bcd 	.word	0x08008bcd
 8008c38:	08008d13 	.word	0x08008d13
 8008c3c:	6833      	ldr	r3, [r6, #0]
 8008c3e:	1d1a      	adds	r2, r3, #4
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6032      	str	r2, [r6, #0]
 8008c44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e09d      	b.n	8008d8c <_printf_i+0x1e8>
 8008c50:	6833      	ldr	r3, [r6, #0]
 8008c52:	6820      	ldr	r0, [r4, #0]
 8008c54:	1d19      	adds	r1, r3, #4
 8008c56:	6031      	str	r1, [r6, #0]
 8008c58:	0606      	lsls	r6, r0, #24
 8008c5a:	d501      	bpl.n	8008c60 <_printf_i+0xbc>
 8008c5c:	681d      	ldr	r5, [r3, #0]
 8008c5e:	e003      	b.n	8008c68 <_printf_i+0xc4>
 8008c60:	0645      	lsls	r5, r0, #25
 8008c62:	d5fb      	bpl.n	8008c5c <_printf_i+0xb8>
 8008c64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c68:	2d00      	cmp	r5, #0
 8008c6a:	da03      	bge.n	8008c74 <_printf_i+0xd0>
 8008c6c:	232d      	movs	r3, #45	@ 0x2d
 8008c6e:	426d      	negs	r5, r5
 8008c70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c74:	4859      	ldr	r0, [pc, #356]	@ (8008ddc <_printf_i+0x238>)
 8008c76:	230a      	movs	r3, #10
 8008c78:	e011      	b.n	8008c9e <_printf_i+0xfa>
 8008c7a:	6821      	ldr	r1, [r4, #0]
 8008c7c:	6833      	ldr	r3, [r6, #0]
 8008c7e:	0608      	lsls	r0, r1, #24
 8008c80:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c84:	d402      	bmi.n	8008c8c <_printf_i+0xe8>
 8008c86:	0649      	lsls	r1, r1, #25
 8008c88:	bf48      	it	mi
 8008c8a:	b2ad      	uxthmi	r5, r5
 8008c8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c8e:	4853      	ldr	r0, [pc, #332]	@ (8008ddc <_printf_i+0x238>)
 8008c90:	6033      	str	r3, [r6, #0]
 8008c92:	bf14      	ite	ne
 8008c94:	230a      	movne	r3, #10
 8008c96:	2308      	moveq	r3, #8
 8008c98:	2100      	movs	r1, #0
 8008c9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c9e:	6866      	ldr	r6, [r4, #4]
 8008ca0:	60a6      	str	r6, [r4, #8]
 8008ca2:	2e00      	cmp	r6, #0
 8008ca4:	bfa2      	ittt	ge
 8008ca6:	6821      	ldrge	r1, [r4, #0]
 8008ca8:	f021 0104 	bicge.w	r1, r1, #4
 8008cac:	6021      	strge	r1, [r4, #0]
 8008cae:	b90d      	cbnz	r5, 8008cb4 <_printf_i+0x110>
 8008cb0:	2e00      	cmp	r6, #0
 8008cb2:	d04b      	beq.n	8008d4c <_printf_i+0x1a8>
 8008cb4:	4616      	mov	r6, r2
 8008cb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cba:	fb03 5711 	mls	r7, r3, r1, r5
 8008cbe:	5dc7      	ldrb	r7, [r0, r7]
 8008cc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cc4:	462f      	mov	r7, r5
 8008cc6:	42bb      	cmp	r3, r7
 8008cc8:	460d      	mov	r5, r1
 8008cca:	d9f4      	bls.n	8008cb6 <_printf_i+0x112>
 8008ccc:	2b08      	cmp	r3, #8
 8008cce:	d10b      	bne.n	8008ce8 <_printf_i+0x144>
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	07df      	lsls	r7, r3, #31
 8008cd4:	d508      	bpl.n	8008ce8 <_printf_i+0x144>
 8008cd6:	6923      	ldr	r3, [r4, #16]
 8008cd8:	6861      	ldr	r1, [r4, #4]
 8008cda:	4299      	cmp	r1, r3
 8008cdc:	bfde      	ittt	le
 8008cde:	2330      	movle	r3, #48	@ 0x30
 8008ce0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ce4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ce8:	1b92      	subs	r2, r2, r6
 8008cea:	6122      	str	r2, [r4, #16]
 8008cec:	f8cd a000 	str.w	sl, [sp]
 8008cf0:	464b      	mov	r3, r9
 8008cf2:	aa03      	add	r2, sp, #12
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	f7ff fee6 	bl	8008ac8 <_printf_common>
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	d14a      	bne.n	8008d96 <_printf_i+0x1f2>
 8008d00:	f04f 30ff 	mov.w	r0, #4294967295
 8008d04:	b004      	add	sp, #16
 8008d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	f043 0320 	orr.w	r3, r3, #32
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	4833      	ldr	r0, [pc, #204]	@ (8008de0 <_printf_i+0x23c>)
 8008d14:	2778      	movs	r7, #120	@ 0x78
 8008d16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	6831      	ldr	r1, [r6, #0]
 8008d1e:	061f      	lsls	r7, r3, #24
 8008d20:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d24:	d402      	bmi.n	8008d2c <_printf_i+0x188>
 8008d26:	065f      	lsls	r7, r3, #25
 8008d28:	bf48      	it	mi
 8008d2a:	b2ad      	uxthmi	r5, r5
 8008d2c:	6031      	str	r1, [r6, #0]
 8008d2e:	07d9      	lsls	r1, r3, #31
 8008d30:	bf44      	itt	mi
 8008d32:	f043 0320 	orrmi.w	r3, r3, #32
 8008d36:	6023      	strmi	r3, [r4, #0]
 8008d38:	b11d      	cbz	r5, 8008d42 <_printf_i+0x19e>
 8008d3a:	2310      	movs	r3, #16
 8008d3c:	e7ac      	b.n	8008c98 <_printf_i+0xf4>
 8008d3e:	4827      	ldr	r0, [pc, #156]	@ (8008ddc <_printf_i+0x238>)
 8008d40:	e7e9      	b.n	8008d16 <_printf_i+0x172>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	f023 0320 	bic.w	r3, r3, #32
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	e7f6      	b.n	8008d3a <_printf_i+0x196>
 8008d4c:	4616      	mov	r6, r2
 8008d4e:	e7bd      	b.n	8008ccc <_printf_i+0x128>
 8008d50:	6833      	ldr	r3, [r6, #0]
 8008d52:	6825      	ldr	r5, [r4, #0]
 8008d54:	6961      	ldr	r1, [r4, #20]
 8008d56:	1d18      	adds	r0, r3, #4
 8008d58:	6030      	str	r0, [r6, #0]
 8008d5a:	062e      	lsls	r6, r5, #24
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	d501      	bpl.n	8008d64 <_printf_i+0x1c0>
 8008d60:	6019      	str	r1, [r3, #0]
 8008d62:	e002      	b.n	8008d6a <_printf_i+0x1c6>
 8008d64:	0668      	lsls	r0, r5, #25
 8008d66:	d5fb      	bpl.n	8008d60 <_printf_i+0x1bc>
 8008d68:	8019      	strh	r1, [r3, #0]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	6123      	str	r3, [r4, #16]
 8008d6e:	4616      	mov	r6, r2
 8008d70:	e7bc      	b.n	8008cec <_printf_i+0x148>
 8008d72:	6833      	ldr	r3, [r6, #0]
 8008d74:	1d1a      	adds	r2, r3, #4
 8008d76:	6032      	str	r2, [r6, #0]
 8008d78:	681e      	ldr	r6, [r3, #0]
 8008d7a:	6862      	ldr	r2, [r4, #4]
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	4630      	mov	r0, r6
 8008d80:	f7f7 fa5e 	bl	8000240 <memchr>
 8008d84:	b108      	cbz	r0, 8008d8a <_printf_i+0x1e6>
 8008d86:	1b80      	subs	r0, r0, r6
 8008d88:	6060      	str	r0, [r4, #4]
 8008d8a:	6863      	ldr	r3, [r4, #4]
 8008d8c:	6123      	str	r3, [r4, #16]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d94:	e7aa      	b.n	8008cec <_printf_i+0x148>
 8008d96:	6923      	ldr	r3, [r4, #16]
 8008d98:	4632      	mov	r2, r6
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	4640      	mov	r0, r8
 8008d9e:	47d0      	blx	sl
 8008da0:	3001      	adds	r0, #1
 8008da2:	d0ad      	beq.n	8008d00 <_printf_i+0x15c>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	079b      	lsls	r3, r3, #30
 8008da8:	d413      	bmi.n	8008dd2 <_printf_i+0x22e>
 8008daa:	68e0      	ldr	r0, [r4, #12]
 8008dac:	9b03      	ldr	r3, [sp, #12]
 8008dae:	4298      	cmp	r0, r3
 8008db0:	bfb8      	it	lt
 8008db2:	4618      	movlt	r0, r3
 8008db4:	e7a6      	b.n	8008d04 <_printf_i+0x160>
 8008db6:	2301      	movs	r3, #1
 8008db8:	4632      	mov	r2, r6
 8008dba:	4649      	mov	r1, r9
 8008dbc:	4640      	mov	r0, r8
 8008dbe:	47d0      	blx	sl
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d09d      	beq.n	8008d00 <_printf_i+0x15c>
 8008dc4:	3501      	adds	r5, #1
 8008dc6:	68e3      	ldr	r3, [r4, #12]
 8008dc8:	9903      	ldr	r1, [sp, #12]
 8008dca:	1a5b      	subs	r3, r3, r1
 8008dcc:	42ab      	cmp	r3, r5
 8008dce:	dcf2      	bgt.n	8008db6 <_printf_i+0x212>
 8008dd0:	e7eb      	b.n	8008daa <_printf_i+0x206>
 8008dd2:	2500      	movs	r5, #0
 8008dd4:	f104 0619 	add.w	r6, r4, #25
 8008dd8:	e7f5      	b.n	8008dc6 <_printf_i+0x222>
 8008dda:	bf00      	nop
 8008ddc:	08009ce9 	.word	0x08009ce9
 8008de0:	08009cfa 	.word	0x08009cfa

08008de4 <__sflush_r>:
 8008de4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dec:	0716      	lsls	r6, r2, #28
 8008dee:	4605      	mov	r5, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	d454      	bmi.n	8008e9e <__sflush_r+0xba>
 8008df4:	684b      	ldr	r3, [r1, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	dc02      	bgt.n	8008e00 <__sflush_r+0x1c>
 8008dfa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	dd48      	ble.n	8008e92 <__sflush_r+0xae>
 8008e00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e02:	2e00      	cmp	r6, #0
 8008e04:	d045      	beq.n	8008e92 <__sflush_r+0xae>
 8008e06:	2300      	movs	r3, #0
 8008e08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e0c:	682f      	ldr	r7, [r5, #0]
 8008e0e:	6a21      	ldr	r1, [r4, #32]
 8008e10:	602b      	str	r3, [r5, #0]
 8008e12:	d030      	beq.n	8008e76 <__sflush_r+0x92>
 8008e14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	0759      	lsls	r1, r3, #29
 8008e1a:	d505      	bpl.n	8008e28 <__sflush_r+0x44>
 8008e1c:	6863      	ldr	r3, [r4, #4]
 8008e1e:	1ad2      	subs	r2, r2, r3
 8008e20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e22:	b10b      	cbz	r3, 8008e28 <__sflush_r+0x44>
 8008e24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e26:	1ad2      	subs	r2, r2, r3
 8008e28:	2300      	movs	r3, #0
 8008e2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e2c:	6a21      	ldr	r1, [r4, #32]
 8008e2e:	4628      	mov	r0, r5
 8008e30:	47b0      	blx	r6
 8008e32:	1c43      	adds	r3, r0, #1
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	d106      	bne.n	8008e46 <__sflush_r+0x62>
 8008e38:	6829      	ldr	r1, [r5, #0]
 8008e3a:	291d      	cmp	r1, #29
 8008e3c:	d82b      	bhi.n	8008e96 <__sflush_r+0xb2>
 8008e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8008ee8 <__sflush_r+0x104>)
 8008e40:	410a      	asrs	r2, r1
 8008e42:	07d6      	lsls	r6, r2, #31
 8008e44:	d427      	bmi.n	8008e96 <__sflush_r+0xb2>
 8008e46:	2200      	movs	r2, #0
 8008e48:	6062      	str	r2, [r4, #4]
 8008e4a:	04d9      	lsls	r1, r3, #19
 8008e4c:	6922      	ldr	r2, [r4, #16]
 8008e4e:	6022      	str	r2, [r4, #0]
 8008e50:	d504      	bpl.n	8008e5c <__sflush_r+0x78>
 8008e52:	1c42      	adds	r2, r0, #1
 8008e54:	d101      	bne.n	8008e5a <__sflush_r+0x76>
 8008e56:	682b      	ldr	r3, [r5, #0]
 8008e58:	b903      	cbnz	r3, 8008e5c <__sflush_r+0x78>
 8008e5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e5e:	602f      	str	r7, [r5, #0]
 8008e60:	b1b9      	cbz	r1, 8008e92 <__sflush_r+0xae>
 8008e62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e66:	4299      	cmp	r1, r3
 8008e68:	d002      	beq.n	8008e70 <__sflush_r+0x8c>
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f7fe fbd2 	bl	8007614 <_free_r>
 8008e70:	2300      	movs	r3, #0
 8008e72:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e74:	e00d      	b.n	8008e92 <__sflush_r+0xae>
 8008e76:	2301      	movs	r3, #1
 8008e78:	4628      	mov	r0, r5
 8008e7a:	47b0      	blx	r6
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	1c50      	adds	r0, r2, #1
 8008e80:	d1c9      	bne.n	8008e16 <__sflush_r+0x32>
 8008e82:	682b      	ldr	r3, [r5, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d0c6      	beq.n	8008e16 <__sflush_r+0x32>
 8008e88:	2b1d      	cmp	r3, #29
 8008e8a:	d001      	beq.n	8008e90 <__sflush_r+0xac>
 8008e8c:	2b16      	cmp	r3, #22
 8008e8e:	d11e      	bne.n	8008ece <__sflush_r+0xea>
 8008e90:	602f      	str	r7, [r5, #0]
 8008e92:	2000      	movs	r0, #0
 8008e94:	e022      	b.n	8008edc <__sflush_r+0xf8>
 8008e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e9a:	b21b      	sxth	r3, r3
 8008e9c:	e01b      	b.n	8008ed6 <__sflush_r+0xf2>
 8008e9e:	690f      	ldr	r7, [r1, #16]
 8008ea0:	2f00      	cmp	r7, #0
 8008ea2:	d0f6      	beq.n	8008e92 <__sflush_r+0xae>
 8008ea4:	0793      	lsls	r3, r2, #30
 8008ea6:	680e      	ldr	r6, [r1, #0]
 8008ea8:	bf08      	it	eq
 8008eaa:	694b      	ldreq	r3, [r1, #20]
 8008eac:	600f      	str	r7, [r1, #0]
 8008eae:	bf18      	it	ne
 8008eb0:	2300      	movne	r3, #0
 8008eb2:	eba6 0807 	sub.w	r8, r6, r7
 8008eb6:	608b      	str	r3, [r1, #8]
 8008eb8:	f1b8 0f00 	cmp.w	r8, #0
 8008ebc:	dde9      	ble.n	8008e92 <__sflush_r+0xae>
 8008ebe:	6a21      	ldr	r1, [r4, #32]
 8008ec0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ec2:	4643      	mov	r3, r8
 8008ec4:	463a      	mov	r2, r7
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	47b0      	blx	r6
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	dc08      	bgt.n	8008ee0 <__sflush_r+0xfc>
 8008ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8008edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee0:	4407      	add	r7, r0
 8008ee2:	eba8 0800 	sub.w	r8, r8, r0
 8008ee6:	e7e7      	b.n	8008eb8 <__sflush_r+0xd4>
 8008ee8:	dfbffffe 	.word	0xdfbffffe

08008eec <_fflush_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	690b      	ldr	r3, [r1, #16]
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	b913      	cbnz	r3, 8008efc <_fflush_r+0x10>
 8008ef6:	2500      	movs	r5, #0
 8008ef8:	4628      	mov	r0, r5
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	b118      	cbz	r0, 8008f06 <_fflush_r+0x1a>
 8008efe:	6a03      	ldr	r3, [r0, #32]
 8008f00:	b90b      	cbnz	r3, 8008f06 <_fflush_r+0x1a>
 8008f02:	f7fe f9c1 	bl	8007288 <__sinit>
 8008f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0f3      	beq.n	8008ef6 <_fflush_r+0xa>
 8008f0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f10:	07d0      	lsls	r0, r2, #31
 8008f12:	d404      	bmi.n	8008f1e <_fflush_r+0x32>
 8008f14:	0599      	lsls	r1, r3, #22
 8008f16:	d402      	bmi.n	8008f1e <_fflush_r+0x32>
 8008f18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f1a:	f7fe fb52 	bl	80075c2 <__retarget_lock_acquire_recursive>
 8008f1e:	4628      	mov	r0, r5
 8008f20:	4621      	mov	r1, r4
 8008f22:	f7ff ff5f 	bl	8008de4 <__sflush_r>
 8008f26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f28:	07da      	lsls	r2, r3, #31
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	d4e4      	bmi.n	8008ef8 <_fflush_r+0xc>
 8008f2e:	89a3      	ldrh	r3, [r4, #12]
 8008f30:	059b      	lsls	r3, r3, #22
 8008f32:	d4e1      	bmi.n	8008ef8 <_fflush_r+0xc>
 8008f34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f36:	f7fe fb45 	bl	80075c4 <__retarget_lock_release_recursive>
 8008f3a:	e7dd      	b.n	8008ef8 <_fflush_r+0xc>

08008f3c <memmove>:
 8008f3c:	4288      	cmp	r0, r1
 8008f3e:	b510      	push	{r4, lr}
 8008f40:	eb01 0402 	add.w	r4, r1, r2
 8008f44:	d902      	bls.n	8008f4c <memmove+0x10>
 8008f46:	4284      	cmp	r4, r0
 8008f48:	4623      	mov	r3, r4
 8008f4a:	d807      	bhi.n	8008f5c <memmove+0x20>
 8008f4c:	1e43      	subs	r3, r0, #1
 8008f4e:	42a1      	cmp	r1, r4
 8008f50:	d008      	beq.n	8008f64 <memmove+0x28>
 8008f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f5a:	e7f8      	b.n	8008f4e <memmove+0x12>
 8008f5c:	4402      	add	r2, r0
 8008f5e:	4601      	mov	r1, r0
 8008f60:	428a      	cmp	r2, r1
 8008f62:	d100      	bne.n	8008f66 <memmove+0x2a>
 8008f64:	bd10      	pop	{r4, pc}
 8008f66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f6e:	e7f7      	b.n	8008f60 <memmove+0x24>

08008f70 <_sbrk_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4d06      	ldr	r5, [pc, #24]	@ (8008f8c <_sbrk_r+0x1c>)
 8008f74:	2300      	movs	r3, #0
 8008f76:	4604      	mov	r4, r0
 8008f78:	4608      	mov	r0, r1
 8008f7a:	602b      	str	r3, [r5, #0]
 8008f7c:	f7fa f8b0 	bl	80030e0 <_sbrk>
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	d102      	bne.n	8008f8a <_sbrk_r+0x1a>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	b103      	cbz	r3, 8008f8a <_sbrk_r+0x1a>
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	bd38      	pop	{r3, r4, r5, pc}
 8008f8c:	20002810 	.word	0x20002810

08008f90 <__assert_func>:
 8008f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f92:	4614      	mov	r4, r2
 8008f94:	461a      	mov	r2, r3
 8008f96:	4b09      	ldr	r3, [pc, #36]	@ (8008fbc <__assert_func+0x2c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4605      	mov	r5, r0
 8008f9c:	68d8      	ldr	r0, [r3, #12]
 8008f9e:	b954      	cbnz	r4, 8008fb6 <__assert_func+0x26>
 8008fa0:	4b07      	ldr	r3, [pc, #28]	@ (8008fc0 <__assert_func+0x30>)
 8008fa2:	461c      	mov	r4, r3
 8008fa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fa8:	9100      	str	r1, [sp, #0]
 8008faa:	462b      	mov	r3, r5
 8008fac:	4905      	ldr	r1, [pc, #20]	@ (8008fc4 <__assert_func+0x34>)
 8008fae:	f000 f857 	bl	8009060 <fiprintf>
 8008fb2:	f000 f867 	bl	8009084 <abort>
 8008fb6:	4b04      	ldr	r3, [pc, #16]	@ (8008fc8 <__assert_func+0x38>)
 8008fb8:	e7f4      	b.n	8008fa4 <__assert_func+0x14>
 8008fba:	bf00      	nop
 8008fbc:	20000190 	.word	0x20000190
 8008fc0:	08009d46 	.word	0x08009d46
 8008fc4:	08009d18 	.word	0x08009d18
 8008fc8:	08009d0b 	.word	0x08009d0b

08008fcc <_calloc_r>:
 8008fcc:	b570      	push	{r4, r5, r6, lr}
 8008fce:	fba1 5402 	umull	r5, r4, r1, r2
 8008fd2:	b93c      	cbnz	r4, 8008fe4 <_calloc_r+0x18>
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	f7fe fec3 	bl	8007d60 <_malloc_r>
 8008fda:	4606      	mov	r6, r0
 8008fdc:	b928      	cbnz	r0, 8008fea <_calloc_r+0x1e>
 8008fde:	2600      	movs	r6, #0
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}
 8008fe4:	220c      	movs	r2, #12
 8008fe6:	6002      	str	r2, [r0, #0]
 8008fe8:	e7f9      	b.n	8008fde <_calloc_r+0x12>
 8008fea:	462a      	mov	r2, r5
 8008fec:	4621      	mov	r1, r4
 8008fee:	f7fe fa31 	bl	8007454 <memset>
 8008ff2:	e7f5      	b.n	8008fe0 <_calloc_r+0x14>

08008ff4 <malloc>:
 8008ff4:	4b02      	ldr	r3, [pc, #8]	@ (8009000 <malloc+0xc>)
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	f7fe beb1 	b.w	8007d60 <_malloc_r>
 8008ffe:	bf00      	nop
 8009000:	20000190 	.word	0x20000190

08009004 <_realloc_r>:
 8009004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009008:	4680      	mov	r8, r0
 800900a:	4615      	mov	r5, r2
 800900c:	460c      	mov	r4, r1
 800900e:	b921      	cbnz	r1, 800901a <_realloc_r+0x16>
 8009010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009014:	4611      	mov	r1, r2
 8009016:	f7fe bea3 	b.w	8007d60 <_malloc_r>
 800901a:	b92a      	cbnz	r2, 8009028 <_realloc_r+0x24>
 800901c:	f7fe fafa 	bl	8007614 <_free_r>
 8009020:	2400      	movs	r4, #0
 8009022:	4620      	mov	r0, r4
 8009024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009028:	f000 f833 	bl	8009092 <_malloc_usable_size_r>
 800902c:	4285      	cmp	r5, r0
 800902e:	4606      	mov	r6, r0
 8009030:	d802      	bhi.n	8009038 <_realloc_r+0x34>
 8009032:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009036:	d8f4      	bhi.n	8009022 <_realloc_r+0x1e>
 8009038:	4629      	mov	r1, r5
 800903a:	4640      	mov	r0, r8
 800903c:	f7fe fe90 	bl	8007d60 <_malloc_r>
 8009040:	4607      	mov	r7, r0
 8009042:	2800      	cmp	r0, #0
 8009044:	d0ec      	beq.n	8009020 <_realloc_r+0x1c>
 8009046:	42b5      	cmp	r5, r6
 8009048:	462a      	mov	r2, r5
 800904a:	4621      	mov	r1, r4
 800904c:	bf28      	it	cs
 800904e:	4632      	movcs	r2, r6
 8009050:	f7fe fac1 	bl	80075d6 <memcpy>
 8009054:	4621      	mov	r1, r4
 8009056:	4640      	mov	r0, r8
 8009058:	f7fe fadc 	bl	8007614 <_free_r>
 800905c:	463c      	mov	r4, r7
 800905e:	e7e0      	b.n	8009022 <_realloc_r+0x1e>

08009060 <fiprintf>:
 8009060:	b40e      	push	{r1, r2, r3}
 8009062:	b503      	push	{r0, r1, lr}
 8009064:	4601      	mov	r1, r0
 8009066:	ab03      	add	r3, sp, #12
 8009068:	4805      	ldr	r0, [pc, #20]	@ (8009080 <fiprintf+0x20>)
 800906a:	f853 2b04 	ldr.w	r2, [r3], #4
 800906e:	6800      	ldr	r0, [r0, #0]
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	f000 f83f 	bl	80090f4 <_vfiprintf_r>
 8009076:	b002      	add	sp, #8
 8009078:	f85d eb04 	ldr.w	lr, [sp], #4
 800907c:	b003      	add	sp, #12
 800907e:	4770      	bx	lr
 8009080:	20000190 	.word	0x20000190

08009084 <abort>:
 8009084:	b508      	push	{r3, lr}
 8009086:	2006      	movs	r0, #6
 8009088:	f000 fa08 	bl	800949c <raise>
 800908c:	2001      	movs	r0, #1
 800908e:	f7f9 ffae 	bl	8002fee <_exit>

08009092 <_malloc_usable_size_r>:
 8009092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009096:	1f18      	subs	r0, r3, #4
 8009098:	2b00      	cmp	r3, #0
 800909a:	bfbc      	itt	lt
 800909c:	580b      	ldrlt	r3, [r1, r0]
 800909e:	18c0      	addlt	r0, r0, r3
 80090a0:	4770      	bx	lr

080090a2 <__sfputc_r>:
 80090a2:	6893      	ldr	r3, [r2, #8]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	b410      	push	{r4}
 80090aa:	6093      	str	r3, [r2, #8]
 80090ac:	da08      	bge.n	80090c0 <__sfputc_r+0x1e>
 80090ae:	6994      	ldr	r4, [r2, #24]
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	db01      	blt.n	80090b8 <__sfputc_r+0x16>
 80090b4:	290a      	cmp	r1, #10
 80090b6:	d103      	bne.n	80090c0 <__sfputc_r+0x1e>
 80090b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090bc:	f000 b932 	b.w	8009324 <__swbuf_r>
 80090c0:	6813      	ldr	r3, [r2, #0]
 80090c2:	1c58      	adds	r0, r3, #1
 80090c4:	6010      	str	r0, [r2, #0]
 80090c6:	7019      	strb	r1, [r3, #0]
 80090c8:	4608      	mov	r0, r1
 80090ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <__sfputs_r>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	4606      	mov	r6, r0
 80090d4:	460f      	mov	r7, r1
 80090d6:	4614      	mov	r4, r2
 80090d8:	18d5      	adds	r5, r2, r3
 80090da:	42ac      	cmp	r4, r5
 80090dc:	d101      	bne.n	80090e2 <__sfputs_r+0x12>
 80090de:	2000      	movs	r0, #0
 80090e0:	e007      	b.n	80090f2 <__sfputs_r+0x22>
 80090e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e6:	463a      	mov	r2, r7
 80090e8:	4630      	mov	r0, r6
 80090ea:	f7ff ffda 	bl	80090a2 <__sfputc_r>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	d1f3      	bne.n	80090da <__sfputs_r+0xa>
 80090f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090f4 <_vfiprintf_r>:
 80090f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f8:	460d      	mov	r5, r1
 80090fa:	b09d      	sub	sp, #116	@ 0x74
 80090fc:	4614      	mov	r4, r2
 80090fe:	4698      	mov	r8, r3
 8009100:	4606      	mov	r6, r0
 8009102:	b118      	cbz	r0, 800910c <_vfiprintf_r+0x18>
 8009104:	6a03      	ldr	r3, [r0, #32]
 8009106:	b90b      	cbnz	r3, 800910c <_vfiprintf_r+0x18>
 8009108:	f7fe f8be 	bl	8007288 <__sinit>
 800910c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800910e:	07d9      	lsls	r1, r3, #31
 8009110:	d405      	bmi.n	800911e <_vfiprintf_r+0x2a>
 8009112:	89ab      	ldrh	r3, [r5, #12]
 8009114:	059a      	lsls	r2, r3, #22
 8009116:	d402      	bmi.n	800911e <_vfiprintf_r+0x2a>
 8009118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800911a:	f7fe fa52 	bl	80075c2 <__retarget_lock_acquire_recursive>
 800911e:	89ab      	ldrh	r3, [r5, #12]
 8009120:	071b      	lsls	r3, r3, #28
 8009122:	d501      	bpl.n	8009128 <_vfiprintf_r+0x34>
 8009124:	692b      	ldr	r3, [r5, #16]
 8009126:	b99b      	cbnz	r3, 8009150 <_vfiprintf_r+0x5c>
 8009128:	4629      	mov	r1, r5
 800912a:	4630      	mov	r0, r6
 800912c:	f000 f938 	bl	80093a0 <__swsetup_r>
 8009130:	b170      	cbz	r0, 8009150 <_vfiprintf_r+0x5c>
 8009132:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009134:	07dc      	lsls	r4, r3, #31
 8009136:	d504      	bpl.n	8009142 <_vfiprintf_r+0x4e>
 8009138:	f04f 30ff 	mov.w	r0, #4294967295
 800913c:	b01d      	add	sp, #116	@ 0x74
 800913e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009142:	89ab      	ldrh	r3, [r5, #12]
 8009144:	0598      	lsls	r0, r3, #22
 8009146:	d4f7      	bmi.n	8009138 <_vfiprintf_r+0x44>
 8009148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800914a:	f7fe fa3b 	bl	80075c4 <__retarget_lock_release_recursive>
 800914e:	e7f3      	b.n	8009138 <_vfiprintf_r+0x44>
 8009150:	2300      	movs	r3, #0
 8009152:	9309      	str	r3, [sp, #36]	@ 0x24
 8009154:	2320      	movs	r3, #32
 8009156:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800915a:	f8cd 800c 	str.w	r8, [sp, #12]
 800915e:	2330      	movs	r3, #48	@ 0x30
 8009160:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009310 <_vfiprintf_r+0x21c>
 8009164:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009168:	f04f 0901 	mov.w	r9, #1
 800916c:	4623      	mov	r3, r4
 800916e:	469a      	mov	sl, r3
 8009170:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009174:	b10a      	cbz	r2, 800917a <_vfiprintf_r+0x86>
 8009176:	2a25      	cmp	r2, #37	@ 0x25
 8009178:	d1f9      	bne.n	800916e <_vfiprintf_r+0x7a>
 800917a:	ebba 0b04 	subs.w	fp, sl, r4
 800917e:	d00b      	beq.n	8009198 <_vfiprintf_r+0xa4>
 8009180:	465b      	mov	r3, fp
 8009182:	4622      	mov	r2, r4
 8009184:	4629      	mov	r1, r5
 8009186:	4630      	mov	r0, r6
 8009188:	f7ff ffa2 	bl	80090d0 <__sfputs_r>
 800918c:	3001      	adds	r0, #1
 800918e:	f000 80a7 	beq.w	80092e0 <_vfiprintf_r+0x1ec>
 8009192:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009194:	445a      	add	r2, fp
 8009196:	9209      	str	r2, [sp, #36]	@ 0x24
 8009198:	f89a 3000 	ldrb.w	r3, [sl]
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 809f 	beq.w	80092e0 <_vfiprintf_r+0x1ec>
 80091a2:	2300      	movs	r3, #0
 80091a4:	f04f 32ff 	mov.w	r2, #4294967295
 80091a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ac:	f10a 0a01 	add.w	sl, sl, #1
 80091b0:	9304      	str	r3, [sp, #16]
 80091b2:	9307      	str	r3, [sp, #28]
 80091b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80091ba:	4654      	mov	r4, sl
 80091bc:	2205      	movs	r2, #5
 80091be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c2:	4853      	ldr	r0, [pc, #332]	@ (8009310 <_vfiprintf_r+0x21c>)
 80091c4:	f7f7 f83c 	bl	8000240 <memchr>
 80091c8:	9a04      	ldr	r2, [sp, #16]
 80091ca:	b9d8      	cbnz	r0, 8009204 <_vfiprintf_r+0x110>
 80091cc:	06d1      	lsls	r1, r2, #27
 80091ce:	bf44      	itt	mi
 80091d0:	2320      	movmi	r3, #32
 80091d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091d6:	0713      	lsls	r3, r2, #28
 80091d8:	bf44      	itt	mi
 80091da:	232b      	movmi	r3, #43	@ 0x2b
 80091dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091e0:	f89a 3000 	ldrb.w	r3, [sl]
 80091e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80091e6:	d015      	beq.n	8009214 <_vfiprintf_r+0x120>
 80091e8:	9a07      	ldr	r2, [sp, #28]
 80091ea:	4654      	mov	r4, sl
 80091ec:	2000      	movs	r0, #0
 80091ee:	f04f 0c0a 	mov.w	ip, #10
 80091f2:	4621      	mov	r1, r4
 80091f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091f8:	3b30      	subs	r3, #48	@ 0x30
 80091fa:	2b09      	cmp	r3, #9
 80091fc:	d94b      	bls.n	8009296 <_vfiprintf_r+0x1a2>
 80091fe:	b1b0      	cbz	r0, 800922e <_vfiprintf_r+0x13a>
 8009200:	9207      	str	r2, [sp, #28]
 8009202:	e014      	b.n	800922e <_vfiprintf_r+0x13a>
 8009204:	eba0 0308 	sub.w	r3, r0, r8
 8009208:	fa09 f303 	lsl.w	r3, r9, r3
 800920c:	4313      	orrs	r3, r2
 800920e:	9304      	str	r3, [sp, #16]
 8009210:	46a2      	mov	sl, r4
 8009212:	e7d2      	b.n	80091ba <_vfiprintf_r+0xc6>
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	1d19      	adds	r1, r3, #4
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	9103      	str	r1, [sp, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	bfbb      	ittet	lt
 8009220:	425b      	neglt	r3, r3
 8009222:	f042 0202 	orrlt.w	r2, r2, #2
 8009226:	9307      	strge	r3, [sp, #28]
 8009228:	9307      	strlt	r3, [sp, #28]
 800922a:	bfb8      	it	lt
 800922c:	9204      	strlt	r2, [sp, #16]
 800922e:	7823      	ldrb	r3, [r4, #0]
 8009230:	2b2e      	cmp	r3, #46	@ 0x2e
 8009232:	d10a      	bne.n	800924a <_vfiprintf_r+0x156>
 8009234:	7863      	ldrb	r3, [r4, #1]
 8009236:	2b2a      	cmp	r3, #42	@ 0x2a
 8009238:	d132      	bne.n	80092a0 <_vfiprintf_r+0x1ac>
 800923a:	9b03      	ldr	r3, [sp, #12]
 800923c:	1d1a      	adds	r2, r3, #4
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	9203      	str	r2, [sp, #12]
 8009242:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009246:	3402      	adds	r4, #2
 8009248:	9305      	str	r3, [sp, #20]
 800924a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009320 <_vfiprintf_r+0x22c>
 800924e:	7821      	ldrb	r1, [r4, #0]
 8009250:	2203      	movs	r2, #3
 8009252:	4650      	mov	r0, sl
 8009254:	f7f6 fff4 	bl	8000240 <memchr>
 8009258:	b138      	cbz	r0, 800926a <_vfiprintf_r+0x176>
 800925a:	9b04      	ldr	r3, [sp, #16]
 800925c:	eba0 000a 	sub.w	r0, r0, sl
 8009260:	2240      	movs	r2, #64	@ 0x40
 8009262:	4082      	lsls	r2, r0
 8009264:	4313      	orrs	r3, r2
 8009266:	3401      	adds	r4, #1
 8009268:	9304      	str	r3, [sp, #16]
 800926a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800926e:	4829      	ldr	r0, [pc, #164]	@ (8009314 <_vfiprintf_r+0x220>)
 8009270:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009274:	2206      	movs	r2, #6
 8009276:	f7f6 ffe3 	bl	8000240 <memchr>
 800927a:	2800      	cmp	r0, #0
 800927c:	d03f      	beq.n	80092fe <_vfiprintf_r+0x20a>
 800927e:	4b26      	ldr	r3, [pc, #152]	@ (8009318 <_vfiprintf_r+0x224>)
 8009280:	bb1b      	cbnz	r3, 80092ca <_vfiprintf_r+0x1d6>
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	3307      	adds	r3, #7
 8009286:	f023 0307 	bic.w	r3, r3, #7
 800928a:	3308      	adds	r3, #8
 800928c:	9303      	str	r3, [sp, #12]
 800928e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009290:	443b      	add	r3, r7
 8009292:	9309      	str	r3, [sp, #36]	@ 0x24
 8009294:	e76a      	b.n	800916c <_vfiprintf_r+0x78>
 8009296:	fb0c 3202 	mla	r2, ip, r2, r3
 800929a:	460c      	mov	r4, r1
 800929c:	2001      	movs	r0, #1
 800929e:	e7a8      	b.n	80091f2 <_vfiprintf_r+0xfe>
 80092a0:	2300      	movs	r3, #0
 80092a2:	3401      	adds	r4, #1
 80092a4:	9305      	str	r3, [sp, #20]
 80092a6:	4619      	mov	r1, r3
 80092a8:	f04f 0c0a 	mov.w	ip, #10
 80092ac:	4620      	mov	r0, r4
 80092ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092b2:	3a30      	subs	r2, #48	@ 0x30
 80092b4:	2a09      	cmp	r2, #9
 80092b6:	d903      	bls.n	80092c0 <_vfiprintf_r+0x1cc>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d0c6      	beq.n	800924a <_vfiprintf_r+0x156>
 80092bc:	9105      	str	r1, [sp, #20]
 80092be:	e7c4      	b.n	800924a <_vfiprintf_r+0x156>
 80092c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80092c4:	4604      	mov	r4, r0
 80092c6:	2301      	movs	r3, #1
 80092c8:	e7f0      	b.n	80092ac <_vfiprintf_r+0x1b8>
 80092ca:	ab03      	add	r3, sp, #12
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	462a      	mov	r2, r5
 80092d0:	4b12      	ldr	r3, [pc, #72]	@ (800931c <_vfiprintf_r+0x228>)
 80092d2:	a904      	add	r1, sp, #16
 80092d4:	4630      	mov	r0, r6
 80092d6:	f3af 8000 	nop.w
 80092da:	4607      	mov	r7, r0
 80092dc:	1c78      	adds	r0, r7, #1
 80092de:	d1d6      	bne.n	800928e <_vfiprintf_r+0x19a>
 80092e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092e2:	07d9      	lsls	r1, r3, #31
 80092e4:	d405      	bmi.n	80092f2 <_vfiprintf_r+0x1fe>
 80092e6:	89ab      	ldrh	r3, [r5, #12]
 80092e8:	059a      	lsls	r2, r3, #22
 80092ea:	d402      	bmi.n	80092f2 <_vfiprintf_r+0x1fe>
 80092ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092ee:	f7fe f969 	bl	80075c4 <__retarget_lock_release_recursive>
 80092f2:	89ab      	ldrh	r3, [r5, #12]
 80092f4:	065b      	lsls	r3, r3, #25
 80092f6:	f53f af1f 	bmi.w	8009138 <_vfiprintf_r+0x44>
 80092fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092fc:	e71e      	b.n	800913c <_vfiprintf_r+0x48>
 80092fe:	ab03      	add	r3, sp, #12
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	462a      	mov	r2, r5
 8009304:	4b05      	ldr	r3, [pc, #20]	@ (800931c <_vfiprintf_r+0x228>)
 8009306:	a904      	add	r1, sp, #16
 8009308:	4630      	mov	r0, r6
 800930a:	f7ff fc4b 	bl	8008ba4 <_printf_i>
 800930e:	e7e4      	b.n	80092da <_vfiprintf_r+0x1e6>
 8009310:	08009cd8 	.word	0x08009cd8
 8009314:	08009ce2 	.word	0x08009ce2
 8009318:	00000000 	.word	0x00000000
 800931c:	080090d1 	.word	0x080090d1
 8009320:	08009cde 	.word	0x08009cde

08009324 <__swbuf_r>:
 8009324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009326:	460e      	mov	r6, r1
 8009328:	4614      	mov	r4, r2
 800932a:	4605      	mov	r5, r0
 800932c:	b118      	cbz	r0, 8009336 <__swbuf_r+0x12>
 800932e:	6a03      	ldr	r3, [r0, #32]
 8009330:	b90b      	cbnz	r3, 8009336 <__swbuf_r+0x12>
 8009332:	f7fd ffa9 	bl	8007288 <__sinit>
 8009336:	69a3      	ldr	r3, [r4, #24]
 8009338:	60a3      	str	r3, [r4, #8]
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	071a      	lsls	r2, r3, #28
 800933e:	d501      	bpl.n	8009344 <__swbuf_r+0x20>
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	b943      	cbnz	r3, 8009356 <__swbuf_r+0x32>
 8009344:	4621      	mov	r1, r4
 8009346:	4628      	mov	r0, r5
 8009348:	f000 f82a 	bl	80093a0 <__swsetup_r>
 800934c:	b118      	cbz	r0, 8009356 <__swbuf_r+0x32>
 800934e:	f04f 37ff 	mov.w	r7, #4294967295
 8009352:	4638      	mov	r0, r7
 8009354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	6922      	ldr	r2, [r4, #16]
 800935a:	1a98      	subs	r0, r3, r2
 800935c:	6963      	ldr	r3, [r4, #20]
 800935e:	b2f6      	uxtb	r6, r6
 8009360:	4283      	cmp	r3, r0
 8009362:	4637      	mov	r7, r6
 8009364:	dc05      	bgt.n	8009372 <__swbuf_r+0x4e>
 8009366:	4621      	mov	r1, r4
 8009368:	4628      	mov	r0, r5
 800936a:	f7ff fdbf 	bl	8008eec <_fflush_r>
 800936e:	2800      	cmp	r0, #0
 8009370:	d1ed      	bne.n	800934e <__swbuf_r+0x2a>
 8009372:	68a3      	ldr	r3, [r4, #8]
 8009374:	3b01      	subs	r3, #1
 8009376:	60a3      	str	r3, [r4, #8]
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	6022      	str	r2, [r4, #0]
 800937e:	701e      	strb	r6, [r3, #0]
 8009380:	6962      	ldr	r2, [r4, #20]
 8009382:	1c43      	adds	r3, r0, #1
 8009384:	429a      	cmp	r2, r3
 8009386:	d004      	beq.n	8009392 <__swbuf_r+0x6e>
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	07db      	lsls	r3, r3, #31
 800938c:	d5e1      	bpl.n	8009352 <__swbuf_r+0x2e>
 800938e:	2e0a      	cmp	r6, #10
 8009390:	d1df      	bne.n	8009352 <__swbuf_r+0x2e>
 8009392:	4621      	mov	r1, r4
 8009394:	4628      	mov	r0, r5
 8009396:	f7ff fda9 	bl	8008eec <_fflush_r>
 800939a:	2800      	cmp	r0, #0
 800939c:	d0d9      	beq.n	8009352 <__swbuf_r+0x2e>
 800939e:	e7d6      	b.n	800934e <__swbuf_r+0x2a>

080093a0 <__swsetup_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4b29      	ldr	r3, [pc, #164]	@ (8009448 <__swsetup_r+0xa8>)
 80093a4:	4605      	mov	r5, r0
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	460c      	mov	r4, r1
 80093aa:	b118      	cbz	r0, 80093b4 <__swsetup_r+0x14>
 80093ac:	6a03      	ldr	r3, [r0, #32]
 80093ae:	b90b      	cbnz	r3, 80093b4 <__swsetup_r+0x14>
 80093b0:	f7fd ff6a 	bl	8007288 <__sinit>
 80093b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b8:	0719      	lsls	r1, r3, #28
 80093ba:	d422      	bmi.n	8009402 <__swsetup_r+0x62>
 80093bc:	06da      	lsls	r2, r3, #27
 80093be:	d407      	bmi.n	80093d0 <__swsetup_r+0x30>
 80093c0:	2209      	movs	r2, #9
 80093c2:	602a      	str	r2, [r5, #0]
 80093c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093c8:	81a3      	strh	r3, [r4, #12]
 80093ca:	f04f 30ff 	mov.w	r0, #4294967295
 80093ce:	e033      	b.n	8009438 <__swsetup_r+0x98>
 80093d0:	0758      	lsls	r0, r3, #29
 80093d2:	d512      	bpl.n	80093fa <__swsetup_r+0x5a>
 80093d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093d6:	b141      	cbz	r1, 80093ea <__swsetup_r+0x4a>
 80093d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093dc:	4299      	cmp	r1, r3
 80093de:	d002      	beq.n	80093e6 <__swsetup_r+0x46>
 80093e0:	4628      	mov	r0, r5
 80093e2:	f7fe f917 	bl	8007614 <_free_r>
 80093e6:	2300      	movs	r3, #0
 80093e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	2300      	movs	r3, #0
 80093f4:	6063      	str	r3, [r4, #4]
 80093f6:	6923      	ldr	r3, [r4, #16]
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	f043 0308 	orr.w	r3, r3, #8
 8009400:	81a3      	strh	r3, [r4, #12]
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	b94b      	cbnz	r3, 800941a <__swsetup_r+0x7a>
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800940c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009410:	d003      	beq.n	800941a <__swsetup_r+0x7a>
 8009412:	4621      	mov	r1, r4
 8009414:	4628      	mov	r0, r5
 8009416:	f000 f883 	bl	8009520 <__smakebuf_r>
 800941a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941e:	f013 0201 	ands.w	r2, r3, #1
 8009422:	d00a      	beq.n	800943a <__swsetup_r+0x9a>
 8009424:	2200      	movs	r2, #0
 8009426:	60a2      	str	r2, [r4, #8]
 8009428:	6962      	ldr	r2, [r4, #20]
 800942a:	4252      	negs	r2, r2
 800942c:	61a2      	str	r2, [r4, #24]
 800942e:	6922      	ldr	r2, [r4, #16]
 8009430:	b942      	cbnz	r2, 8009444 <__swsetup_r+0xa4>
 8009432:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009436:	d1c5      	bne.n	80093c4 <__swsetup_r+0x24>
 8009438:	bd38      	pop	{r3, r4, r5, pc}
 800943a:	0799      	lsls	r1, r3, #30
 800943c:	bf58      	it	pl
 800943e:	6962      	ldrpl	r2, [r4, #20]
 8009440:	60a2      	str	r2, [r4, #8]
 8009442:	e7f4      	b.n	800942e <__swsetup_r+0x8e>
 8009444:	2000      	movs	r0, #0
 8009446:	e7f7      	b.n	8009438 <__swsetup_r+0x98>
 8009448:	20000190 	.word	0x20000190

0800944c <_raise_r>:
 800944c:	291f      	cmp	r1, #31
 800944e:	b538      	push	{r3, r4, r5, lr}
 8009450:	4605      	mov	r5, r0
 8009452:	460c      	mov	r4, r1
 8009454:	d904      	bls.n	8009460 <_raise_r+0x14>
 8009456:	2316      	movs	r3, #22
 8009458:	6003      	str	r3, [r0, #0]
 800945a:	f04f 30ff 	mov.w	r0, #4294967295
 800945e:	bd38      	pop	{r3, r4, r5, pc}
 8009460:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009462:	b112      	cbz	r2, 800946a <_raise_r+0x1e>
 8009464:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009468:	b94b      	cbnz	r3, 800947e <_raise_r+0x32>
 800946a:	4628      	mov	r0, r5
 800946c:	f000 f830 	bl	80094d0 <_getpid_r>
 8009470:	4622      	mov	r2, r4
 8009472:	4601      	mov	r1, r0
 8009474:	4628      	mov	r0, r5
 8009476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800947a:	f000 b817 	b.w	80094ac <_kill_r>
 800947e:	2b01      	cmp	r3, #1
 8009480:	d00a      	beq.n	8009498 <_raise_r+0x4c>
 8009482:	1c59      	adds	r1, r3, #1
 8009484:	d103      	bne.n	800948e <_raise_r+0x42>
 8009486:	2316      	movs	r3, #22
 8009488:	6003      	str	r3, [r0, #0]
 800948a:	2001      	movs	r0, #1
 800948c:	e7e7      	b.n	800945e <_raise_r+0x12>
 800948e:	2100      	movs	r1, #0
 8009490:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009494:	4620      	mov	r0, r4
 8009496:	4798      	blx	r3
 8009498:	2000      	movs	r0, #0
 800949a:	e7e0      	b.n	800945e <_raise_r+0x12>

0800949c <raise>:
 800949c:	4b02      	ldr	r3, [pc, #8]	@ (80094a8 <raise+0xc>)
 800949e:	4601      	mov	r1, r0
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	f7ff bfd3 	b.w	800944c <_raise_r>
 80094a6:	bf00      	nop
 80094a8:	20000190 	.word	0x20000190

080094ac <_kill_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d07      	ldr	r5, [pc, #28]	@ (80094cc <_kill_r+0x20>)
 80094b0:	2300      	movs	r3, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	4611      	mov	r1, r2
 80094b8:	602b      	str	r3, [r5, #0]
 80094ba:	f7f9 fd88 	bl	8002fce <_kill>
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	d102      	bne.n	80094c8 <_kill_r+0x1c>
 80094c2:	682b      	ldr	r3, [r5, #0]
 80094c4:	b103      	cbz	r3, 80094c8 <_kill_r+0x1c>
 80094c6:	6023      	str	r3, [r4, #0]
 80094c8:	bd38      	pop	{r3, r4, r5, pc}
 80094ca:	bf00      	nop
 80094cc:	20002810 	.word	0x20002810

080094d0 <_getpid_r>:
 80094d0:	f7f9 bd75 	b.w	8002fbe <_getpid>

080094d4 <__swhatbuf_r>:
 80094d4:	b570      	push	{r4, r5, r6, lr}
 80094d6:	460c      	mov	r4, r1
 80094d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094dc:	2900      	cmp	r1, #0
 80094de:	b096      	sub	sp, #88	@ 0x58
 80094e0:	4615      	mov	r5, r2
 80094e2:	461e      	mov	r6, r3
 80094e4:	da0d      	bge.n	8009502 <__swhatbuf_r+0x2e>
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094ec:	f04f 0100 	mov.w	r1, #0
 80094f0:	bf14      	ite	ne
 80094f2:	2340      	movne	r3, #64	@ 0x40
 80094f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80094f8:	2000      	movs	r0, #0
 80094fa:	6031      	str	r1, [r6, #0]
 80094fc:	602b      	str	r3, [r5, #0]
 80094fe:	b016      	add	sp, #88	@ 0x58
 8009500:	bd70      	pop	{r4, r5, r6, pc}
 8009502:	466a      	mov	r2, sp
 8009504:	f000 f848 	bl	8009598 <_fstat_r>
 8009508:	2800      	cmp	r0, #0
 800950a:	dbec      	blt.n	80094e6 <__swhatbuf_r+0x12>
 800950c:	9901      	ldr	r1, [sp, #4]
 800950e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009512:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009516:	4259      	negs	r1, r3
 8009518:	4159      	adcs	r1, r3
 800951a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800951e:	e7eb      	b.n	80094f8 <__swhatbuf_r+0x24>

08009520 <__smakebuf_r>:
 8009520:	898b      	ldrh	r3, [r1, #12]
 8009522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009524:	079d      	lsls	r5, r3, #30
 8009526:	4606      	mov	r6, r0
 8009528:	460c      	mov	r4, r1
 800952a:	d507      	bpl.n	800953c <__smakebuf_r+0x1c>
 800952c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	6123      	str	r3, [r4, #16]
 8009534:	2301      	movs	r3, #1
 8009536:	6163      	str	r3, [r4, #20]
 8009538:	b003      	add	sp, #12
 800953a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800953c:	ab01      	add	r3, sp, #4
 800953e:	466a      	mov	r2, sp
 8009540:	f7ff ffc8 	bl	80094d4 <__swhatbuf_r>
 8009544:	9f00      	ldr	r7, [sp, #0]
 8009546:	4605      	mov	r5, r0
 8009548:	4639      	mov	r1, r7
 800954a:	4630      	mov	r0, r6
 800954c:	f7fe fc08 	bl	8007d60 <_malloc_r>
 8009550:	b948      	cbnz	r0, 8009566 <__smakebuf_r+0x46>
 8009552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009556:	059a      	lsls	r2, r3, #22
 8009558:	d4ee      	bmi.n	8009538 <__smakebuf_r+0x18>
 800955a:	f023 0303 	bic.w	r3, r3, #3
 800955e:	f043 0302 	orr.w	r3, r3, #2
 8009562:	81a3      	strh	r3, [r4, #12]
 8009564:	e7e2      	b.n	800952c <__smakebuf_r+0xc>
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	6020      	str	r0, [r4, #0]
 800956a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800956e:	81a3      	strh	r3, [r4, #12]
 8009570:	9b01      	ldr	r3, [sp, #4]
 8009572:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009576:	b15b      	cbz	r3, 8009590 <__smakebuf_r+0x70>
 8009578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800957c:	4630      	mov	r0, r6
 800957e:	f000 f81d 	bl	80095bc <_isatty_r>
 8009582:	b128      	cbz	r0, 8009590 <__smakebuf_r+0x70>
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	f023 0303 	bic.w	r3, r3, #3
 800958a:	f043 0301 	orr.w	r3, r3, #1
 800958e:	81a3      	strh	r3, [r4, #12]
 8009590:	89a3      	ldrh	r3, [r4, #12]
 8009592:	431d      	orrs	r5, r3
 8009594:	81a5      	strh	r5, [r4, #12]
 8009596:	e7cf      	b.n	8009538 <__smakebuf_r+0x18>

08009598 <_fstat_r>:
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	4d07      	ldr	r5, [pc, #28]	@ (80095b8 <_fstat_r+0x20>)
 800959c:	2300      	movs	r3, #0
 800959e:	4604      	mov	r4, r0
 80095a0:	4608      	mov	r0, r1
 80095a2:	4611      	mov	r1, r2
 80095a4:	602b      	str	r3, [r5, #0]
 80095a6:	f7f9 fd72 	bl	800308e <_fstat>
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	d102      	bne.n	80095b4 <_fstat_r+0x1c>
 80095ae:	682b      	ldr	r3, [r5, #0]
 80095b0:	b103      	cbz	r3, 80095b4 <_fstat_r+0x1c>
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	bd38      	pop	{r3, r4, r5, pc}
 80095b6:	bf00      	nop
 80095b8:	20002810 	.word	0x20002810

080095bc <_isatty_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	4d06      	ldr	r5, [pc, #24]	@ (80095d8 <_isatty_r+0x1c>)
 80095c0:	2300      	movs	r3, #0
 80095c2:	4604      	mov	r4, r0
 80095c4:	4608      	mov	r0, r1
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	f7f9 fd71 	bl	80030ae <_isatty>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_isatty_r+0x1a>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_isatty_r+0x1a>
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	20002810 	.word	0x20002810

080095dc <_init>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	bf00      	nop
 80095e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e2:	bc08      	pop	{r3}
 80095e4:	469e      	mov	lr, r3
 80095e6:	4770      	bx	lr

080095e8 <_fini>:
 80095e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ea:	bf00      	nop
 80095ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ee:	bc08      	pop	{r3}
 80095f0:	469e      	mov	lr, r3
 80095f2:	4770      	bx	lr
